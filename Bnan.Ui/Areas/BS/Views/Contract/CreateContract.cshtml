@using Bnan.Core.Extensions;
@using Bnan.Ui.ViewModels.BS;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@using Newtonsoft.Json;
@model BSLayoutVM
@inject UserManager<CrMasUserInformation> userManager
@inject SignInManager<CrMasUserInformation> signinManager
@inject IViewLocalizer localizer
@{
    var user = await userManager.GetUserAsync(User);
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    ViewData["returnUrl"] = string.IsNullOrEmpty(Context.Request.Path) ? "~/" : $"~{Context.Request.Path.Value}";

    var userInfo = await userManager.Users
        .Include(l => l.CrMasUserMainValidations)
        .Include(l => l.CrMasUserSubValidations)
        .Include(l => l.CrMasUserInformationLessorNavigation)
            .ThenInclude(l => l.CrMasLessorImage) // دمج استعلام المؤجر
        .Include(l => l.CrMasUserContractValidity)
        .FirstOrDefaultAsync(l => l.UserName == user.UserName);
}
@* <link href="~/BranchSys/CreateContract/sb-admin-2.min.css" rel="stylesheet">
 *@
<link href="~/BranchSys/CreateContract/css/contract.css" rel="styleSheet">
<link rel="stylesheet" href="~/css/toastr.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<!--Pdf-->
<link rel="stylesheet" href="~/PdfJS/CatchReceipt/style/style.css">
<!--Pdf-->
@if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
{
    <link href="~/BranchSys/CreateContract/css/english-style.css" rel="styleSheet">
}
<style>
    .flatpickr-input::placeholder {
        color: #999; /* Make sure the color is not the same as the background */
    }

    .form-control[readonly],
    .form-select[disabled],
    .form-control[disabled],
    .input-group-text[disabled] {
        background-color: #ffffff !important;
        opacity: 1;
        cursor: not-allowed; /* Optional: Change cursor to not-allowed to indicate non-interactivity */
    }

    .content {
        height: 120%;
    }
</style>
<div class="container-fluid ">
    <section class="section-mainCard">
        <div class="row justify-content-center w-100 h-100">
            <div class="col-11 col-sm-10 col-md-11 col-lg-11 col-xl-10 text-center p-0 ">
                <div class="card main-card ">
                    <div class="row pt-2">
                        <a asp-action="Index" asp-area="BS" asp-controller="Home" style="width: fit-content;">
                            <img src="~/BranchSys/CreateContract/img/cancel.png" alt="cancle_icon" class="cancle-icon">
                        </a>
                    </div>
                    <div class="row" style="flex-direction: row-reverse;">
                        <div class="col justify-content-center d-flex title-row">
                            <span class="card-title">
                                @localizer["CreateContract"]
                            </span>
                        </div>
                    </div>
                    <div class="row justify-content-center h-100 content-row">
                        <div class="col-md-11 mx-0 h-100">
                            <form asp-area="BS" asp-action="CreateContract" asp-controller="Contract" id="msform" novalidate class="needs-validation" enctype="multipart/form-data" method="post">
                                <input hidden id="StaticContractCardImg" name="StaticContractCardImg" />
                                <input hidden id="SavePdfInvoice" name="SavePdfInvoice" />
                                <input hidden id="SavePdfReceipt" name="SavePdfReceipt" />
                                <input hidden id="SavePdfContract" name="SavePdfContract" />
                                <input hidden asp-for="Contract.RenterInfo.CrMasRenterInformationSignature" />
                                <input hidden asp-for="Contract.RenterInfo.OldSignature" />
                                <input hidden asp-for="Contract.AccountReceiptNo" />
                                <input hidden asp-for="Contract.InitialInvoiceNo" />
                                <input hidden id="language" name="language" />
                                <div class=" pe-4">
                                    <!-- progressbar -->
                                    <ul id="progressbar">
                                        <li class="active" id="tenant">@localizer["Renterr"]</li>
                                        <li id="car">@localizer["Car"]</li>
                                        <li id="driver">@localizer["Driver"]</li>
                                        <li id="add-driver">@localizer["AdditionalDriver"]</li>
                                        <li id="options">@localizer["AdditionalAndChoices"]</li>
                                        <li id="check">@localizer["CheckUp"]</li>
                                        <li id="payment">@localizer["Payment"]</li>

                                    </ul>
                                </div>
                                <fieldset id="">
                                    <div class="form-card form-card1 h-100">
                                        <input hidden asp-for="SelectedBranch" />
                                        <div class="row flex-row-reverse g-3 ">
                                            <div class="col-lg-9">
                                                <div class="row flex-row-reverse align-items-center g-2 gap-2">
                                                    <div class="col-md-4 requird-inputs-col">
                                                        <label for="national-number" class="form-label">@localizer["RenterId"]</label>
                                                        <input type="text" class="form-control inputs-style" asp-for="Contract.RenterInfo.CrMasRenterInformationId" oninput="this.value = this.value.replace(/[^0-9]/g, '').replace(/^0/, '')" maxlength="20" autofocus>
                                                        <div class="row requird-field-row">
                                                            <span class="requird-field" id="requird-field_RenterID" asp-validation-for="Contract.RenterInfo.CrMasRenterInformationId"></span>
                                                        </div>
                                                    </div>
                                                    <div class="col-auto seacrh-icon-col" id="seacrh_icon_Renter" style="display:none">
                                                        <img src="~/BranchSys/CreateContract/img/seacrh-icon.png" alt="seacrh-icon Image">
                                                        <div class="dropdown-content" id="dropdown_content_Renter">
                                                            <div class="row dropdown-content-row pt-2">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["FirstVisit"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="FirstVisit"></p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["LastContract"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="LastContract"></p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["ActiveContractsCount"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="ActiveContractsCount">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["ClosedContractsCount"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="ClosedContractsCount">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["RentalDays"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="RentalDays">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["KilometersCut"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="KMCut">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["AmountsTraded"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="AmountsTraded">0.00</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["Balance"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="BalanceRenter">0.00</p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["AvailableBalance"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="AvailableBalance">0.00</p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["ReservedBalance"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="ReservedBalance">0.00</p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["Evaluation"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="DealingMechanism"></p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["Membership"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="Membership"></p>
                                                                </div>

                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4 requird-inputs-col">
                                                        <label for="nationality-type" class="form-label">
                                                            @localizer["UserIdType"]
                                                        </label>
                                                        @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                        {
                                                            <select class="form-select select-style AR-select" id="nationality-type" asp-for="Contract.RenterInfo.CrMasRenterInformationIdtype">
                                                                <option selected></option>
                                                                @foreach (var type in Model.RenterIdtypes)
                                                                {
                                                                    <option value="@type.CrMasSupRenterIdtypeCode">@type.CrMasSupRenterIdtypeEnName</option>
                                                                }
                                                            </select>

                                                        }
                                                        else
                                                        {
                                                            <select class="form-select select-style AR-select text-right" id="nationality-type" asp-for="Contract.RenterInfo.CrMasRenterInformationIdtype">
                                                                <option selected></option>
                                                                @foreach (var type in Model.RenterIdtypes)
                                                                {
                                                                    <option value="@type.CrMasSupRenterIdtypeCode">@type.CrMasSupRenterIdtypeArName</option>
                                                                }
                                                            </select>
                                                        }
                                                        <div class="row requird-field-row">
                                                            <span class="requird-field" id="requird-field_RenterIDType" asp-validation-for="Contract.RenterInfo.CrMasRenterInformationIdtype"></span>
                                                        </div>
                                                    </div>
                                                    @* <div class="col-auto">
                                                    <button type="button" class="btn check-btn payment-button" id="UploadRenderIdPhoto" onclick="setupIDPhotoUpload('UploadRenderIdPhoto','RenterIdImg')">
                                                    <div class="row align-items-center">
                                                    <div class="col-auto">
                                                    <div class="systems-check">
                                                    <i class="fa-solid fa-check text-white"></i>
                                                    </div>
                                                    </div>
                                                    <div class="col">
                                                    @localizer["RenterIdPhoto"]
                                                    </div>
                                                    </div>
                                                    </button>
                                                    <input hidden asp-for="Contract.RenterInfo.CrMasRenterInformationRenterIdImage" id="RenterIdImg" />
                                                    </div>
                                                    *@
                                                </div>
                                            </div>
                                            <div class="col-lg-12">
                                                <div class="row align-items-center g-2 flex-row-reverse gap-3">
                                                    <div class="col-md-auto ">
                                                        <label>@localizer["BirthDate"]</label>
                                                        <div class="row flex-row-reverse">
                                                            <div class="col-auto d-flex flex-column align-items-end">
                                                                <select id="dayRenter" class="form-select select-style" asp-for="Contract.RenterInfo.DayDate" style="width: 70px;"></select>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.RenterInfo.DayDate"></span>
                                                                </div>
                                                            </div>
                                                            <div class="col-auto d-flex flex-column align-items-end p-md-0">
                                                                <select id="monthRenter" class="form-select select-style" asp-for="Contract.RenterInfo.MonthDate" style="width: 70px;"></select>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.RenterInfo.MonthDate"></span>
                                                                </div>
                                                            </div>
                                                            <div class="col-auto d-flex flex-column align-items-end">
                                                                <select id="yearRenter" class="form-select select-style" asp-for="Contract.RenterInfo.YearDate" style="width: 90px;"></select>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.RenterInfo.YearDate"></span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-auto">
                                                        <button type="button" class="btn check-btn check-btn-version2 px-5 Driver-checkModal-open-button" id="CheckRenter">
                                                            @localizer["Verification"]
                                                        </button>
                                                    </div>
                                                    <div class="col">
                                                        <div class="row  justify-content-start flex-row-reverse align-items-center" style="display:none" id="RenterIsdriverDiv">

                                                            <div class="col-auto">
                                                                <div class="form-check">
                                                                    <label class="form-check-label" for="RenterIsdriver"> @localizer["TheRenterIsAdriver"]</label>
                                                                    <input class="form-check-input" type="checkbox" name="RenterIsdriver" id="RenterIsdriver" value="tenant-is-driver">
                                                                </div>
                                                            </div>
                                                            <div class="col-auto">
                                                                <div class="form-check form-check2" id="PrivateDriverDiv" style="display:none">
                                                                    <label class="form-check-label" for="PrivateDriver">@localizer["PrivateDriver"]</label>
                                                                    <input class="form-check-input" type="checkbox" name="PrivateDriver" id="PrivateDriver" value="another-driver">
                                                                </div>
                                                            </div>
                                                            <div class=" col-md-6  col-xl-4" id="Private-Driver-select-Div" style="display: none;">
                                                                <label for="Private-Driver-selectt" class="form-label">@localizer["ChooseYourDriver"]</label>
                                                                @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                                {
                                                                    <select class="form-select select-style AR-select" id="Private-Driver-selectt" asp-for="Contract.PrivateDriverId">
                                                                        <option selected disabled></option>
                                                                        @foreach (var driver in Model.Drivers)
                                                                        {
                                                                            <option value="@driver.CrCasRenterPrivateDriverInformationId">@driver.CrCasRenterPrivateDriverInformationEnName</option>
                                                                        }
                                                                    </select>

                                                                }
                                                                else
                                                                {
                                                                    <select class="form-select select-style AR-select text-right" id="Private-Driver-selectt" asp-for="Contract.PrivateDriverId">
                                                                        <option selected disabled>@localizer["ChooseYourDriver"]</option>
                                                                        @foreach (var driver in Model.Drivers)
                                                                        {
                                                                            <option value="@driver.CrCasRenterPrivateDriverInformationId">@driver.CrCasRenterPrivateDriverInformationArName</option>
                                                                        }
                                                                    </select>
                                                                }

                                                                <div class="row requird-field-row">
                                                                    <p class="requird-field" id="PrivateDriverRequired"></p>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>

                                        </div>
                                        <hr class="version2-hr">
                                        <div class="row hidden-input-row hidden-input-row-Renter ms-2" style="display: none">
                                            <input type="hidden" id="renterIdTypeCode" asp-for="Contract.RenterInfo.CrMasRenterInformationIdtype" />
                                            <input type="hidden" asp-for="Contract.RenterInfo.CrMasRenterInformationExpiryIdDate" />
                                            <input type="hidden" asp-for="Contract.RenterInfo.CrMasRenterInformationCopyId" />
                                            <input type="hidden" asp-for="Contract.RenterInfo.CrMasRenterInformationDrivingLicenseNo" />
                                            <input type="hidden" asp-for="Contract.RenterInfo.CrMasRenterInformationDrivingLicenseType" />
                                            <input type="hidden" asp-for="Contract.RenterInfo.CrMasRenterInformationExpiryDrivingLicenseDate" />
                                            <div class="col-lg-12">
                                                <div class="row justify-content-end">
                                                    <div class="col-lg-7 inner-hidden-row-div">
                                                        <div class="row">
                                                            <div class="col-md-6 requird-inputs-col">
                                                                <label for="AR-name-tenant" class="form-label">
                                                                    @localizer["NameArabic"]
                                                                </label>
                                                                <input type="text" id="AR-name-tenant" class="form-control text-end inputs-style" asp-for="Contract.RenterInfo.CrMasRenterInformationArName" maxlength="100" oninput="this.value=this.value.replace(/[^\u0600-\u06FF\ufb50-\ufdff\ufe70-\ufeff\s]/g, '')">
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.RenterInfo.CrMasRenterInformationArName"></span>
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6 requird-inputs-col">
                                                                <label for="EN-name-tenant" class="form-label">
                                                                    @localizer["NameEnglish"]
                                                                </label>
                                                                <input type="text" id="EN-name-tenant" class="form-control text-start inputs-style" asp-for="Contract.RenterInfo.CrMasRenterInformationEnName" maxlength="100" oninput="this.value = this.value.replace(/[^a-zA-Z ]/g, '')">
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.RenterInfo.CrMasRenterInformationEnName"></span>
                                                                </div>
                                                            </div>


                                                        </div>
                                                        <div class="row ">
                                                            <div class="col-md-6 requird-inputs-col">
                                                                <label for="nationality-Renter" class="form-label">@localizer["RenterDriverNationality"]</label>
                                                                <input type="text" id="nationality-Renter" class="form-control inputs-style" asp-for="Contract.RenterInfo.NationalityText">
                                                                <input type="hidden" id="nationality-Renter-code" asp-for="Contract.RenterInfo.CrMasRenterInformationNationality" maxlength="100">
                                                                <div id="autocomplete-Nationalities1" class="autocomplete-items "></div>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" id="nationality-Renter-error" asp-validation-for="Contract.RenterInfo.NationalityText"></span>
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6 " id="divGenderRenter">
                                                                <label class="form-label">
                                                                    @localizer["Gender"]
                                                                </label>
                                                                <div class="d-flex">

                                                                    @foreach (var gender in Model.RenterGender)
                                                                    {
                                                                        <div class="form-check">
                                                                            <input class="form-check-input genderRenter"
                                                                                   type="radio"
                                                                                   id="genderRenter-@gender.CrMasSupRenterGenderCode"
                                                                                   asp-for="Contract.RenterInfo.CrMasRenterInformationGender"
                                                                                   value="@gender.CrMasSupRenterGenderCode"
                                                                                   data-en="@gender.CrMasSupRenterGenderEnName"
                                                                                   data-ar="@gender.CrMasSupRenterGenderArName">

                                                                            <label class="form-check-label" for="genderRenter-@gender.CrMasSupRenterGenderCode">
                                                                                @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                                                {
                                                                                    @gender.CrMasSupRenterGenderEnName
                                                                                }
                                                                                else
                                                                                {
                                                                                    @gender.CrMasSupRenterGenderArName
                                                                                }
                                                                            </label>
                                                                        </div>
                                                                    }
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row align-items-center">
                                                            <div class="col-md-6">
                                                                <label for="Profession-tenant" class="form-label">
                                                                    @localizer["RenterProfessionName"]
                                                                </label>
                                                                @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                                {
                                                                    <select class="form-select select-style AR-select" id="Profession-tenant" asp-for="Contract.RenterInfo.CrMasRenterInformationProfession">
                                                                        <option selected></option>
                                                                        @foreach (var type in Model.RenterProfession)
                                                                        {
                                                                            <option value="@type.CrMasSupRenterProfessionsCode">@type.CrMasSupRenterProfessionsEnName</option>
                                                                        }
                                                                    </select>

                                                                }
                                                                else
                                                                {
                                                                    <select class="form-select select-style AR-select text-right" id="Profession-tenant" asp-for="Contract.RenterInfo.CrMasRenterInformationProfession">
                                                                        <option selected></option>
                                                                        @foreach (var type in Model.RenterProfession)
                                                                        {
                                                                            <option value="@type.CrMasSupRenterProfessionsCode">@type.CrMasSupRenterProfessionsArName</option>
                                                                        }
                                                                    </select>
                                                                }
                                                                <div class="row requird-field-row">
                                                                </div>
                                                            </div>

                                                            <div class="col-md-6">
                                                                <label for="tenant-workplace" class="form-label">@localizer["RenterEmployerName"]</label>
                                                                <input type="text" id="tenant-workplace" asp-for="Contract.RenterInfo.CrMasRenterInformationEmployerName" class="form-control  inputs-style" maxlength="100">
                                                                <input type="hidden" id="tenant-workplace-code" asp-for="Contract.RenterInfo.CrMasRenterInformationEmployer">
                                                                <div id="autocomplete-workplace1" class="autocomplete-items"></div>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" id="tenant-workplace-error"></span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row align-items-start">
                                                            <div class="col-md-6 requird-inputs-col">
                                                                <label for="Region-city-tenant" class="form-label">@localizer["PostCityConcateAr"]</label>
                                                                <input type="text" id="Region-city-tenant" class="form-control  inputs-style" asp-for="Contract.RenterInfo.CityText" maxlength="100">
                                                                <input type="hidden" id="Region-city-tenant-code" asp-for="Contract.RenterInfo.CrMasRenterInformationCity">
                                                                <div id="autocomplete-Cities1" class="autocomplete-items autocomplete-Cities"></div>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" id="Region-city-tenant-error" asp-validation-for="Contract.RenterInfo.CityText"></span>
                                                                </div>
                                                            </div>

                                                            <div class="col-xl-6 requird-inputs-col">
                                                                <label for="mobileRenter" class="form-label">
                                                                    @localizer["RenterDriverMobile"]
                                                                </label>
                                                                <div class="input-group">
                                                                    <input type="text" id="mobileRenter" asp-for="Contract.RenterInfo.CrMasRenterInformationMobile" class="form-control inputs-style tel-input" maxlength="10"
                                                                           oninput="this.value = this.value.replace(/[^0-9]/g, '').replace(/^0/, '')" autocomplete="off" autofocus="true">
                                                                    <select id="countryCodeRenter" style="border-right: none;" asp-for="Contract.RenterInfo.CrMasRenterInformationCountreyKey" class="input-group-text select-style counterCode">
                                                                        @foreach (var item in Model.CallingKeys)
                                                                        {
                                                                            <option value="@item.CrMasSysCallingKeysNo?.Trim()">@item.CrMasSysCallingKeysNo</option>
                                                                        }
                                                                    </select>
                                                                </div>
                                                                <div class="row requird-field-row">
                                                                    <div class="col">
                                                                        <span class="requird-field" asp-validation-for="Contract.RenterInfo.CrMasRenterInformationMobile"></span>
                                                                    </div>
                                                                    <div class="col-auto">
                                                                        <span class="requird-field" asp-validation-for="Contract.RenterInfo.CrMasRenterInformationCountreyKey"></span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-6">
                                                                <label for="AR-adress-tenant" class="form-label">@localizer["ArAddress"]</label>
                                                                <input type="text" id="AR-adress-tenant" class="form-control text-end inputs-style" asp-for="Contract.RenterInfo.CrMasRenterInformationArAddress" maxlength="200">
                                                                <div class="row requird-field-row">
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <label for="EN-adress-tenant" class="form-label">@localizer["EnAddress"]</label>
                                                                <input type="text" id="EN-adress-tenant" class="form-control inputs-style text-start" asp-for="Contract.RenterInfo.CrMasRenterInformationEnAddress" maxlength="200">
                                                                <div class="row requird-field-row">
                                                                </div>
                                                            </div>


                                                        </div>
                                                    </div>
                                                    <div class="col-lg-10 inner-hidden-row-div">
                                                        <div class="row tenant-last-row-content g-3">
                                                            <div class="col-md-6 col-lg-4 requird-inputs-col">
                                                                <label for="Email-Renter" class="form-label">
                                                                    @localizer["Email"]
                                                                </label>
                                                                <input type="text" id="Email-Renter" class="form-control inputs-style email-input" asp-for="Contract.RenterInfo.CrMasRenterInformationEmail" maxlength="100">
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" id="Email-Renter-Error" asp-validation-for="Contract.RenterInfo.CrMasRenterInformationEmail"></span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row my-3">
                                                            <div class="col-lg-12">
                                                                <label>@localizer["reasons"]</label>
                                                            </div>
                                                            <div class="col-lg-7">
                                                                <textarea class="form-control textarea-inputs reasons" rows="1" maxlength="100" id="Reasons-tenant" asp-for="Contract.RenterInfo.CrMasRenterInformationReasons" type="text"></textarea>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row button-row" style="text-align: left;">
                                        <div class="button-card">
                                            <img src="~/BranchSys/CreateContract/img/Group.png" alt="Button Image"
                                                 class="next action-button" style="vertical-align: middle; ">
                                            <input type="button" name="next" class="next action-button"
                                                   id="driver_fieldset" value="@localizer["Next"]" />
                                            @*                                             <input type="button" class="action-button" onclick="GetContractDetailsFromTajeerApi(2476904147910016)" value="@localizer["Next"]" />
                                            *@
                                        </div>
                                    </div>
                                </fieldset>
                                <!--Car Field-->
                                <fieldset>
                                    <div class="form-card">
                                        <div class="row g-4" style="flex-direction: row-reverse;">
                                            <div class=" col-lg-auto car-catogeries my-3 " id="scrollContainer">
                                                <input asp-for="Contract.SerialNo" hidden />
                                                <input asp-for="Contract.PriceNo" hidden />

                                                <div class="row d-flex car-catogeries-div px-2 ">
                                                    <button type="button" class="btn customized-button" onclick="GetCodeCategory(`3400000000`)">@localizer["All"]</button>
                                                    @foreach (var category in Model.CarCategories)
                                                    {
                                                        @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                        {
                                                            <button type="button" class="btn customized-button" onclick="GetCodeCategory(`@category.CrMasSupCarCategoryCode`)">@category.CrMasSupCarCategoryEnName</button>
                                                        }
                                                        else
                                                        {
                                                            <button type="button" class="btn customized-button" onclick="GetCodeCategory(`@category.CrMasSupCarCategoryCode`)">@category.CrMasSupCarCategoryArName</button>
                                                        }
                                                    }
                                                </div>
                                            </div>
                                            <!--Cars Informations-->
                                            <div class="col scrollable-content">
                                                <table width="100%" class="table table-hover" id="ListCars">
                                                    <tbody>
                                                        <partial name="_CarsList" />
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row button-row">
                                        <div class="button-card">
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous" class="previous action-button-previous" value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/CreateContract/Vector.png" alt="Button Image" class="previous action-button-previous" style="vertical-align: middle; ">
                                        </div>
                                    </div>

                                </fieldset>
                                <!--Driver-->
                                <fieldset class="disable-all-inputs">
                                    <div class="form-card form-card1 h-100">
                                        <div class="row flex-row-reverse g-3 ">
                                            <div class="col-lg-9">
                                                <div class="row flex-row-reverse align-items-center gap-2 g-2">
                                                    <div class="col-md-4 requird-inputs-col">
                                                        <label for="national-number-driver" class="form-label">@localizer["RenterId"]</label>
                                                        <input type="text" class="form-control inputs-style" asp-for="Contract.DriverInfo.CrMasRenterInformationId" oninput="this.value = this.value.replace(/[^0-9]/g, '').replace(/^0/, '')" maxlength="10">
                                                        <div class="row requird-field-row">
                                                            <span class="requird-field" id="requird-field_DriverID" asp-validation-for="Contract.DriverInfo.CrMasRenterInformationId"></span>
                                                            <span class="requird-field" id="errorDriverMustNotRenterId"></span>
                                                        </div>
                                                    </div>
                                                    <div class="col-auto seacrh-icon-col" id="seacrh_icon_Driver" style="display:none">
                                                        <img src="~/BranchSys/CreateContract/img/seacrh-icon.png" alt="seacrh-icon Image" id="driver-details">
                                                        <div class="dropdown-content" id="dropdown_content_Driver">
                                                            <div class="row dropdown-content-row pt-2">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["FirstVisit"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="FirstVisitDriver"></p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["LastContract"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="LastContractDriver"></p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["ActiveContractsCount"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="ActiveContractsCountDriver">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["ClosedContractsCount"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="ClosedContractsCountDriver">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["RentalDays"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="RentalDaysDriver">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["KilometersCut"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="KMCutDriver">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["AmountsTraded"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="AmountsTradedDriver">0.00</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["Balance"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="BalanceRenterDriver">0.00</p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["AvailableBalance"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="AvailableBalanceDriver">0.00</p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["ReservedBalance"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="ReservedBalanceDriver">0.00</p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["Evaluation"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="DealingMechanismDriver"></p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["Membership"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="MembershipDriver"></p>
                                                                </div>

                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4 requird-inputs-col">
                                                        <label for="nationality-type-driver" class="form-label"> @localizer["UserIdType"]</label>
                                                        @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                        {
                                                            <select class="form-select select-style AR-select" id="nationality-type-driver" asp-for="Contract.DriverInfo.CrMasRenterInformationIdtype">
                                                                <option selected></option>
                                                                @foreach (var type in Model.RenterIdtypes.Where(x => x.CrMasSupRenterIdtypeCode == "1" || x.CrMasSupRenterIdtypeCode == "2"))
                                                                {
                                                                    <option value="@type.CrMasSupRenterIdtypeCode">@type.CrMasSupRenterIdtypeEnName</option>
                                                                }
                                                            </select>
                                                        }
                                                        else
                                                        {
                                                            <select class="form-select select-style AR-select text-right" id="nationality-type-driver" asp-for="Contract.DriverInfo.CrMasRenterInformationIdtype">
                                                                <option selected></option>
                                                                @foreach (var type in Model.RenterIdtypes.Where(x => x.CrMasSupRenterIdtypeCode == "1" || x.CrMasSupRenterIdtypeCode == "2"))
                                                                {
                                                                    <option value="@type.CrMasSupRenterIdtypeCode">@type.CrMasSupRenterIdtypeArName</option>
                                                                }
                                                            </select>
                                                        }
                                                        <div class="row requird-field-row">
                                                            <span class="requird-field" id="requird-field_DriverIDType" asp-validation-for="Contract.DriverInfo.CrMasRenterInformationIdtype"></span>
                                                        </div>
                                                    </div>
                                                    @* <div class="col-auto">
                                                    <button type="button" class="btn check-btn payment-button " id="DriverIdBtn" onclick="setupIDPhotoUpload('DriverIdBtn','DriverIdImg')">
                                                    <div class="row align-items-center">
                                                    <div class="col-auto">
                                                    <div class="systems-check">
                                                    <i class="fa-solid fa-check text-white"></i>
                                                    </div>
                                                    </div>
                                                    <div class="col">
                                                    @localizer["RenterIdPhoto"]
                                                    </div>
                                                    </div>
                                                    </button>
                                                    <input hidden asp-for="Contract.DriverInfo.CrMasRenterInformationRenterIdImage" id="DriverIdImg" />
                                                    </div> *@
                                                </div>
                                            </div>
                                            <div class="col-lg-6">

                                                <div class="row align-items-center g-4 flex-row-reverse">
                                                    <div class="col-md-auto ">
                                                        <label>@localizer["BirthDate"]</label>
                                                        <div class="row flex-row-reverse">
                                                            <div class="col-auto d-flex flex-column align-items-end">
                                                                <select id="dayDriver" class="form-select select-style" asp-for="Contract.DriverInfo.DayDate" style="width: 70px;"></select>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.DriverInfo.DayDate"></span>
                                                                </div>
                                                            </div>
                                                            <div class="col-auto d-flex flex-column align-items-end p-md-0">
                                                                <select id="monthDriver" class="form-select select-style" asp-for="Contract.DriverInfo.MonthDate" style="width: 70px;"></select>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.DriverInfo.MonthDate"></span>
                                                                </div>
                                                            </div>
                                                            <div class="col-auto d-flex flex-column align-items-end">
                                                                <select id="yearDriver" class="form-select select-style" asp-for="Contract.DriverInfo.YearDate" style="width: 90px;"></select>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.DriverInfo.YearDate"></span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-auto">
                                                        <button type="button" class="btn check-btn check-btn-version2 px-5 Driver-checkModal-open-button" id="CheckDriver">
                                                            @localizer["Verification"]
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <hr class="version2-hr">
                                        <div class="row  hidden-input-row hidden-input-row-Driver ms-2" style="display:none">
                                            <input type="hidden" id="driverIdTypeCode" asp-for="Contract.DriverInfo.CrMasRenterInformationIdtype" />
                                            <input type="hidden" asp-for="Contract.DriverInfo.CrMasRenterInformationExpiryIdDate" />
                                            <input type="hidden" asp-for="Contract.DriverInfo.CrMasRenterInformationCopyId" />
                                            <div class="col-lg-12">
                                                <div class="row justify-content-end">
                                                    <div class="col-lg-7  inner-hidden-row-div">
                                                        <div class="row">
                                                            <div class="col-md-6 requird-inputs-col">
                                                                <label for="AR-name-driver" class="form-label">
                                                                    @localizer["NameArabic"]
                                                                </label>
                                                                <input type="text" id="AR-name-driver" class="form-control text-end inputs-style" maxlength="100" asp-for="Contract.DriverInfo.CrMasRenterInformationArName" oninput="this.value=this.value.replace(/[^\u0600-\u06FF\ufb50-\ufdff\ufe70-\ufeff\s]/g, '')">
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.DriverInfo.CrMasRenterInformationArName"></span>
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6 requird-inputs-col">
                                                                <label for="EN-name-driver" class="form-label">
                                                                    @localizer["NameEnglish"]
                                                                </label>
                                                                <input type="text" id="EN-name-driver"
                                                                       class="form-control inputs-style text-start" asp-for="Contract.DriverInfo.CrMasRenterInformationEnName" maxlength="100" oninput="this.value = this.value.replace(/[^a-zA-Z ]/g, '')">
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.DriverInfo.CrMasRenterInformationEnName"></span>
                                                                </div>
                                                            </div>


                                                        </div>
                                                        <div class="row ">
                                                            <div class="col-md-6 requird-inputs-col">
                                                                <label for="nationality-Driver" class="form-label">@localizer["RenterDriverNationality"]</label>
                                                                <input type="text" id="nationality-Driver" class="form-control inputs-style" maxlength="100" asp-for="Contract.DriverInfo.NationalityText">
                                                                <input type="hidden" id="nationality-Driver-code" asp-for="Contract.DriverInfo.CrMasRenterInformationNationality">
                                                                <div id="autocomplete-Nationalities2" class="autocomplete-items"></div>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" id="nationality-Driver-error" asp-validation-for="Contract.DriverInfo.NationalityText"></span>
                                                                </div>
                                                            </div>

                                                            <div class="col-md-6 " id="divGenderDriver">
                                                                <label class="form-label">
                                                                    @localizer["Gender"]

                                                                </label>
                                                                <div class="d-flex">
                                                                    @foreach (var gender in Model.RenterGender)
                                                                    {
                                                                        <div class="form-check">
                                                                            <input class="form-check-input genderDriver"
                                                                                   type="radio"
                                                                                   id="genderDriver-@gender.CrMasSupRenterGenderCode"
                                                                                   asp-for="Contract.DriverInfo.CrMasRenterInformationGender"
                                                                                   value="@gender.CrMasSupRenterGenderCode"
                                                                                   data-en="@gender.CrMasSupRenterGenderEnName"
                                                                                   data-ar="@gender.CrMasSupRenterGenderArName">

                                                                            <label class="form-check-label" for="genderRenter-@gender.CrMasSupRenterGenderCode">
                                                                                @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                                                {
                                                                                    @gender.CrMasSupRenterGenderEnName
                                                                                }
                                                                                else
                                                                                {
                                                                                    @gender.CrMasSupRenterGenderArName
                                                                                }
                                                                            </label>
                                                                        </div>
                                                                    }
                                                                    <div class="row requird-field-row">
                                                                    </div>
                                                                </div>

                                                            </div>

                                                        </div>
                                                        <div class="row align-items-center">

                                                            <div class="col-md-6">
                                                                <label for="Profession-driver"
                                                                       class="form-label">
                                                                    @localizer["RenterProfessionName"]
                                                                </label>
                                                                @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                                {
                                                                    <select class="form-select select-style AR-select" id="Profession-driver" asp-for="Contract.DriverInfo.CrMasRenterInformationProfession">
                                                                        <option selected></option>
                                                                        @foreach (var type in Model.RenterProfession)
                                                                        {
                                                                            <option value="@type.CrMasSupRenterProfessionsCode">@type.CrMasSupRenterProfessionsEnName</option>
                                                                        }
                                                                    </select>

                                                                }
                                                                else
                                                                {
                                                                    <select class="form-select select-style AR-select text-right" id="Profession-driver" asp-for="Contract.DriverInfo.CrMasRenterInformationProfession">
                                                                        <option selected></option>
                                                                        @foreach (var type in Model.RenterProfession)
                                                                        {
                                                                            <option value="@type.CrMasSupRenterProfessionsCode">@type.CrMasSupRenterProfessionsArName</option>
                                                                        }
                                                                    </select>
                                                                }
                                                                <div class="row requird-field-row">
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <label for="driver-workplace" class="form-label">@localizer["RenterEmployerName"]</label>
                                                                <input type="text" id="driver-workplace" asp-for="Contract.DriverInfo.CrMasRenterInformationEmployerName" class="form-control inputs-style" maxlength="100" maxlength="100">
                                                                <input type="hidden" id="driver-workplace-code" asp-for="Contract.DriverInfo.CrMasRenterInformationEmployer">
                                                                <div id="autocomplete-workplace2" class="autocomplete-items"></div>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" id="driver-workplace-error"></span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row align-items-start">
                                                            <div class="col-md-6 requird-inputs-col">
                                                                <label for="Region-city-driver" class="form-label">@localizer["PostCityConcateAr"]</label>
                                                                <input type="text" id="Region-city-driver" class="form-control  inputs-style" asp-for="Contract.DriverInfo.CityText" maxlength="100">
                                                                <input type="hidden" id="Region-city-driver-code" asp-for="Contract.DriverInfo.CrMasRenterInformationCity">
                                                                <div id="autocomplete-Cities2" class="autocomplete-items autocomplete-Cities"></div>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" id="Region-city-driver-error" asp-validation-for="Contract.DriverInfo.CityText"></span>
                                                                </div>
                                                            </div>

                                                            <div class="col-xl-6 requird-inputs-col">
                                                                <label for="mobileDriver" class="form-label">
                                                                    @localizer["RenterDriverMobile"]
                                                                </label>
                                                                <div class="input-group">
                                                                    <input type="text" id="mobileDriver" asp-for="Contract.DriverInfo.CrMasRenterInformationMobile" class="form-control inputs-style tel-input"
                                                                           oninput="this.value = this.value.replace(/[^0-9]/g, '').replace(/^0/, '')" maxlength="9" autocomplete="off" autofocus="true">
                                                                    <select id="countryCodeDriver" style="border-right: none;" asp-for="Contract.DriverInfo.CrMasRenterInformationCountreyKey" class="input-group-text select-style counterCode">
                                                                        @foreach (var item in Model.CallingKeys)
                                                                        {
                                                                            <option value="@item.CrMasSysCallingKeysNo?.Trim()">@item.CrMasSysCallingKeysNo</option>
                                                                        }
                                                                    </select>
                                                                </div>
                                                                <div class="row requird-field-row">
                                                                    <div class="col">
                                                                        <span class="requird-field" asp-validation-for="Contract.DriverInfo.CrMasRenterInformationMobile"></span>
                                                                    </div>
                                                                    <div class="col-auto">
                                                                        <span class="requird-field" asp-validation-for="Contract.DriverInfo.CrMasRenterInformationCountreyKey"></span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-6">
                                                                <label for="AR-adress-driver" class="form-label">
                                                                    @localizer["ArAddress"]
                                                                </label>
                                                                <input type="text" id="AR-adress-driver" asp-for="Contract.DriverInfo.CrMasRenterInformationArAddress" class="form-control text-end inputs-style" maxlength="200">
                                                                <div class="row requird-field-row">
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <label for="EN-adress-driver" class="form-label">
                                                                    @localizer["EnAddress"]
                                                                </label>
                                                                <input type="text" id="EN-adress-driver" asp-for="Contract.DriverInfo.CrMasRenterInformationEnAddress" class="form-control inputs-style text-start" maxlength="200">
                                                                <div class="row requird-field-row">
                                                                </div>
                                                            </div>


                                                        </div>
                                                    </div>
                                                    <div class="col-lg-10  inner-hidden-row-div">
                                                        <div class="row" id="divLicence">
                                                            <div class="col-lg-4">
                                                                <label for="licence-driver-number" class="form-label"> @localizer["RenterDriverLicenseNO"]</label>
                                                                <input type="text" id="licence-driver-number" asp-for="Contract.DriverInfo.CrMasRenterInformationDrivingLicenseNo" class="form-control inputs-style" maxlength="50">
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.DriverInfo.CrMasRenterInformationDrivingLicenseNo"></span>
                                                                </div>
                                                            </div>
                                                            <div class="col-lg-4 requird-inputs-col">
                                                                <label for="licence-driver-type" class="form-label"> @localizer["RenterDriverLicenseType"] </label>
                                                                @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                                {
                                                                    <select class="form-select select-style AR-select" id="licence-driver-type" asp-for="Contract.DriverInfo.CrMasRenterInformationDrivingLicenseType">
                                                                        @foreach (var type in Model.DrivingLicense)
                                                                        {
                                                                            <option value="@type.CrMasSupRenterDrivingLicenseCode"
                                                                                    data-en="@type.CrMasSupRenterDrivingLicenseEnName"
                                                                                    data-ar="@type.CrMasSupRenterDrivingLicenseArName">
                                                                                @type.CrMasSupRenterDrivingLicenseEnName
                                                                            </option>
                                                                        }
                                                                    </select>
                                                                }
                                                                else
                                                                {
                                                                    <select class="form-select select-style AR-select text-right" id="licence-driver-type" asp-for="Contract.DriverInfo.CrMasRenterInformationDrivingLicenseType">
                                                                        @foreach (var type in Model.DrivingLicense)
                                                                        {
                                                                            <option value="@type.CrMasSupRenterDrivingLicenseCode"
                                                                                    data-en="@type.CrMasSupRenterDrivingLicenseEnName"
                                                                                    data-ar="@type.CrMasSupRenterDrivingLicenseArName">
                                                                                @type.CrMasSupRenterDrivingLicenseArName
                                                                            </option>
                                                                        }
                                                                    </select>
                                                                }
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.DriverInfo.CrMasRenterInformationDrivingLicenseType"></span>
                                                                </div>
                                                            </div>
                                                            <div class="col-lg-4">
                                                                <label for="ExpiryDrivingLicenseDate-driver" class="form-label">
                                                                    @localizer["Expirationdate"]
                                                                </label>
                                                                <input type="date" id="ExpiryDrivingLicenseDate-driver" class="form-control inputs-style" asp-for="Contract.DriverInfo.CrMasRenterInformationExpiryDrivingLicenseDate" placeholder="yyyy/mm/dd">
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.DriverInfo.CrMasRenterInformationExpiryDrivingLicenseDate"></span>
                                                                </div>
                                                                <div class="row requird-field-row">
                                                                </div>
                                                            </div>


                                                        </div>
                                                        <div class="row align-items-center g-3 licence-row-mobile">
                                                            <div class="col-lg-4 mt-2 requird-inputs-col">
                                                                <label for="Email-Driver" class="form-label">
                                                                    @localizer["Email"]
                                                                </label>
                                                                <input type="text" id="Email-Driver" asp-for="Contract.DriverInfo.CrMasRenterInformationEmail" maxlength="100" class="form-control inputs-style email-input">
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" id="Email-Driver-Error" asp-validation-for="Contract.DriverInfo.CrMasRenterInformationEmail"></span>
                                                                </div>
                                                            </div>
                                                            <div class="col-lg-4">
                                                                <div class="form-check form-check2" id="additionalDriverDiv">
                                                                    <input class="addational-driver-input form-check-input" type="checkbox" name='addtional-driver-add' id="addational-driver">
                                                                    <label class="form-check-label" for="addational-driver"> @localizer["AdditionalDriverr"]</label>
                                                                </div>
                                                            </div>
                                                            @* <div class="col-lg-4 ">
                                                            <button type="button" class="btn check-btn payment-button " id="UploadDriverLicensePhoto" onclick="setupIDPhotoUpload('UploadDriverLicensePhoto','LicenseImage-driver')">
                                                            <div class="row align-items-center">
                                                            <div class="col">
                                                            @localizer["DrivingPhoto"]
                                                            </div>
                                                            <div class="col-auto">
                                                            <div class="systems-check">
                                                            <i class="fa-solid fa-check text-white"></i>
                                                            </div>
                                                            </div>
                                                            </div>
                                                            </button>
                                                            </div>
                                                            <input hidden asp-for="Contract.DriverInfo.CrMasRenterInformationRenterLicenseImage" id="LicenseImage-driver" /> *@
                                                        </div>
                                                        <div class="row my-3">
                                                            <div class="col-lg-12">
                                                                <label>@localizer["reasons"]</label>
                                                            </div>
                                                            <div class="col-lg-7 ">
                                                                <textarea class=" form-control textarea-inputs reasons" rows="1" maxlength="100" id="Reasons-driver" asp-for="Contract.DriverInfo.CrMasRenterInformationReasons" type="text"></textarea>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row button-row">
                                        <div class="button-card">
                                            <img src="~/BranchSys/CreateContract/Group.png" alt="Button Image"
                                                 class="next action-button"
                                                 style="vertical-align: middle; ">
                                            <input type="button" name="next" class="next action-button" value="@localizer["Next"]" />
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous" class="previous action-button-previous" value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/CreateContract/Vector.png" alt="Button Image" class="previous action-button-previous" style="vertical-align: middle; ">
                                        </div>
                                    </div>
                                </fieldset>
                                <!--AddDriver-->
                                <fieldset>
                                    <div class="form-card form-card1 h-100">
                                        <div class="row flex-row-reverse g-3 ">
                                            <div class="col-lg-9">
                                                <div class="row flex-row-reverse gap-2 g-2 align-items-center">
                                                    <div class="col-md-4 requird-inputs-col">
                                                        <label for="Contract_AddDriverInfo_CrMasRenterInformationId" class="form-label">@localizer["RenterId"]</label>
                                                        <input type="text" class="form-control inputs-style" asp-for="Contract.AddDriverInfo.CrMasRenterInformationId" oninput="this.value = this.value.replace(/[^0-9]/g, '').replace(/^0/, '')" maxlength="10">
                                                        <div class="row requird-field-row">
                                                            <span class="requird-field" id="requird-field_AddDriverID" asp-validation-for="Contract.AddDriverInfo.CrMasRenterInformationId"></span>
                                                            <span class="requird-field" id="errorAddDriverMustNotRenterId"></span>
                                                        </div>
                                                    </div>
                                                    <div class="col-auto seacrh-icon-col" id="seacrh_icon_AddDriver" style="display:none">
                                                        <img src="~/BranchSys/CreateContract/img/seacrh-icon.png" alt="seacrh-icon Image" id="add-driver-details">
                                                        <div class="dropdown-content" id="dropdown_content_AddDriver">
                                                            <div class="row dropdown-content-row pt-2">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["FirstVisit"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="FirstVisitAddDriver"></p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["LastContract"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="LastContractAddDriver"></p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["ActiveContractsCount"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="ActiveContractsCountAddDriver">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["ClosedContractsCount"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="ClosedContractsCountAddDriver">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["RentalDays"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="RentalDaysAddDriver">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["KilometersCut"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="KMCutAddDriver">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["AmountsTraded"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="AmountsTradedAddDriver">0.00</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["Balance"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="BalanceAddDriver">0.00</p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["AvailableBalance"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="AvailableBalanceAddDriver">0.00</p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["ReservedBalance"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="ReservedBalanceAddDriver">0.00</p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p> @localizer["Evaluation"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="DealingMechanismAddDriver"></p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-7 ">
                                                                    <p>@localizer["Membership"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="MembershipAddDriver"></p>
                                                                </div>

                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4 requird-inputs-col">
                                                        <label for="nationality-type-AddDriver" class="form-label"> @localizer["UserIdType"]</label>
                                                        @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                        {
                                                            <select class="form-select select-style AR-select" id="nationality-type-addDriver" asp-for="Contract.AddDriverInfo.CrMasRenterInformationIdtype">
                                                                <option selected></option>
                                                                @foreach (var type in Model.RenterIdtypes.Where(x => x.CrMasSupRenterIdtypeCode == "1" || x.CrMasSupRenterIdtypeCode == "2"))
                                                                {
                                                                    <option value="@type.CrMasSupRenterIdtypeCode">@type.CrMasSupRenterIdtypeEnName</option>
                                                                }
                                                            </select>
                                                        }
                                                        else
                                                        {
                                                            <select class="form-select select-style AR-select text-right" id="nationality-type-addDriver" asp-for="Contract.AddDriverInfo.CrMasRenterInformationIdtype">
                                                                <option selected></option>
                                                                @foreach (var type in Model.RenterIdtypes.Where(x => x.CrMasSupRenterIdtypeCode == "1" || x.CrMasSupRenterIdtypeCode == "2"))
                                                                {
                                                                    <option value="@type.CrMasSupRenterIdtypeCode">@type.CrMasSupRenterIdtypeArName</option>
                                                                }
                                                            </select>
                                                        }
                                                        <div class="row requird-field-row">
                                                            <span class="requird-field" id="requird-field_AddDriverIDType" asp-validation-for="Contract.AddDriverInfo.CrMasRenterInformationIdtype"></span>
                                                        </div>
                                                    </div>
                                                    @*  <div class="col-auto">
                                                    <button type="button" class="btn check-btn payment-button " id="AddDriverIdBtn" onclick="setupIDPhotoUpload('AddDriverIdBtn','AddDriverIdImg')">
                                                    <div class="row align-items-center">
                                                    <div class="col-auto">
                                                    <div class="systems-check">
                                                    <i class="fa-solid fa-check text-white"></i>
                                                    </div>
                                                    </div>
                                                    <div class="col">
                                                    @localizer["RenterIdPhoto"]
                                                    </div>
                                                    </div>
                                                    </button>
                                                    <input hidden asp-for="Contract.AddDriverInfo.CrMasRenterInformationRenterIdImage" id="AddDriverIdImg" />
                                                    </div> *@
                                                </div>
                                            </div>
                                            <div class="col-lg-6">
                                                <div class="row align-items-center g-4 flex-row-reverse">
                                                    <div class="col-md-auto ">
                                                        <label>@localizer["BirthDate"]</label>
                                                        <div class="row flex-row-reverse">
                                                            <div class="col-auto d-flex flex-column align-items-end">
                                                                <select id="dayAddDriver" class="form-select select-style" asp-for="Contract.AddDriverInfo.DayDate" style="width: 70px;"></select>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.AddDriverInfo.DayDate"></span>
                                                                </div>
                                                            </div>
                                                            <div class="col-auto d-flex flex-column align-items-end p-md-0">
                                                                <select id="monthAddDriver" class="form-select select-style" asp-for="Contract.AddDriverInfo.MonthDate" style="width: 70px;"></select>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.AddDriverInfo.MonthDate"></span>
                                                                </div>
                                                            </div>
                                                            <div class="col-auto d-flex flex-column align-items-end">
                                                                <select id="yearAddDriver" class="form-select select-style" asp-for="Contract.AddDriverInfo.YearDate" style="width: 90px;"></select>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.AddDriverInfo.YearDate"></span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-auto">
                                                        <button type="button" class="btn check-btn check-btn-version2 px-5 Driver-checkModal-open-button" id="CheckAddDriver">
                                                            @localizer["Verification"]
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <hr class="version2-hr">
                                        <div class="row hidden-input-row hidden-input-row-AddDriver ms-2" style="display:none;">
                                            <input type="hidden" id="addDriverIdTypeCode" asp-for="Contract.AddDriverInfo.CrMasRenterInformationIdtype" />
                                            <input type="hidden" asp-for="Contract.AddDriverInfo.CrMasRenterInformationExpiryIdDate" />
                                            <input type="hidden" asp-for="Contract.AddDriverInfo.CrMasRenterInformationCopyId" />
                                            <div class="col-lg-12">
                                                <div class="row justify-content-end">
                                                    <div class="col-lg-7  inner-hidden-row-div">
                                                        <div class="row">
                                                            <div class="col-md-6 requird-inputs-col">
                                                                <label for="AR-name-addDriver" class="form-label">
                                                                    @localizer["NameArabic"]
                                                                </label>
                                                                <input type="text" id="AR-name-addDriver" class="form-control text-end inputs-style" asp-for="Contract.AddDriverInfo.CrMasRenterInformationArName" maxlength="100" oninput="this.value=this.value.replace(/[^\u0600-\u06FF\ufb50-\ufdff\ufe70-\ufeff\s]/g, '')">
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.AddDriverInfo.CrMasRenterInformationArName"></span>
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6 requird-inputs-col">
                                                                <label for="EN-name-addDriver" class="form-label">
                                                                    @localizer["NameEnglish"]
                                                                </label>
                                                                <input type="text" id="EN-name-addDriver" class="form-control inputs-style text-start" asp-for="Contract.AddDriverInfo.CrMasRenterInformationEnName" maxlength="100" oninput="this.value = this.value.replace(/[^a-zA-Z ]/g, '')">
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.AddDriverInfo.CrMasRenterInformationEnName"></span>
                                                                </div>
                                                            </div>

                                                        </div>

                                                        <div class="row ">
                                                            <div class="col-md-6 requird-inputs-col">
                                                                <label for="nationality-AddDriver" class="form-label">@localizer["RenterDriverNationality"]</label>
                                                                <input type="text" id="nationality-AddDriver" class="form-control inputs-style" maxlength="100" asp-for="Contract.AddDriverInfo.NationalityText">
                                                                <input type="hidden" id="nationality-AddDriver-code" asp-for="Contract.AddDriverInfo.CrMasRenterInformationNationality">
                                                                <div id="autocomplete-Nationalities3" class="autocomplete-items"></div>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" id="nationality-AddDriver-error" asp-validation-for="Contract.AddDriverInfo.NationalityText"></span>
                                                                </div>
                                                            </div>

                                                            <div class="col-md-6 " id="divGenderAddDriver">
                                                                <label class="form-label">
                                                                    @localizer["Gender"]

                                                                </label>
                                                                <div class="d-flex">
                                                                    @foreach (var gender in Model.RenterGender)
                                                                    {
                                                                        <div class="form-check">
                                                                            <input class="form-check-input genderAddDriver"
                                                                                   type="radio"
                                                                                   id="genderAddDriver-@gender.CrMasSupRenterGenderCode"
                                                                                   asp-for="Contract.AddDriverInfo.CrMasRenterInformationGender"
                                                                                   value="@gender.CrMasSupRenterGenderCode"
                                                                                   data-en="@gender.CrMasSupRenterGenderEnName"
                                                                                   data-ar="@gender.CrMasSupRenterGenderArName">

                                                                            <label class="form-check-label" for="genderRenter-@gender.CrMasSupRenterGenderCode">
                                                                                @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                                                {
                                                                                    @gender.CrMasSupRenterGenderEnName
                                                                                }
                                                                                else
                                                                                {
                                                                                    @gender.CrMasSupRenterGenderArName
                                                                                }
                                                                            </label>
                                                                        </div>
                                                                    }
                                                                    <div class="row requird-field-row">
                                                                    </div>
                                                                </div>

                                                            </div>

                                                        </div>
                                                        <div class="row align-items-center">

                                                            <div class="col-md-6">
                                                                <label for="Profession-addDriver" class="form-label"> @localizer["RenterProfessionName"]</label>
                                                                @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                                {
                                                                    <select class="form-select select-style AR-select" id="Profession-addDriver" asp-for="Contract.AddDriverInfo.CrMasRenterInformationProfession">
                                                                        <option selected></option>
                                                                        @foreach (var type in Model.RenterProfession)
                                                                        {
                                                                            <option value="@type.CrMasSupRenterProfessionsCode">@type.CrMasSupRenterProfessionsEnName</option>
                                                                        }
                                                                    </select>

                                                                }
                                                                else
                                                                {
                                                                    <select class="form-select select-style AR-select text-right" id="Profession-addDriver" asp-for="Contract.AddDriverInfo.CrMasRenterInformationProfession">
                                                                        <option selected></option>
                                                                        @foreach (var type in Model.RenterProfession)
                                                                        {
                                                                            <option value="@type.CrMasSupRenterProfessionsCode">@type.CrMasSupRenterProfessionsArName</option>
                                                                        }
                                                                    </select>
                                                                }
                                                                <div class="row requird-field-row">
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <label for="addDriver-workplace" class="form-label">@localizer["RenterEmployerName"]</label>
                                                                <input type="text" id="addDriver-workplace" asp-for="Contract.AddDriverInfo.CrMasRenterInformationEmployerName" class="form-control inputs-style" maxlength="100">
                                                                <input type="hidden" id="addDriver-workplace-code" asp-for="Contract.AddDriverInfo.CrMasRenterInformationEmployer">
                                                                <div id="autocomplete-workplace3" class="autocomplete-items"></div>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" id="addDriver-workplace-error"></span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row align-items-start">
                                                            <div class="col-md-6 requird-inputs-col">
                                                                <label for="Region-city-addDriver" class="form-label">@localizer["PostCityConcateAr"]</label>
                                                                <input type="text" id="Region-city-addDriver" class="form-control  inputs-style" asp-for="Contract.AddDriverInfo.CityText" maxlength="100">
                                                                <input type="hidden" id="Region-city-addDriver-code" asp-for="Contract.AddDriverInfo.CrMasRenterInformationCity">
                                                                <div id="autocomplete-Cities3" class="autocomplete-items autocomplete-Cities"></div>
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" id="Region-city-addDriver-error" asp-validation-for="Contract.AddDriverInfo.CityText"></span>
                                                                </div>
                                                            </div>
                                                            <div class="col-xl-6 requird-inputs-col">
                                                                <label for="mobileAddDriver" class="form-label">
                                                                    @localizer["RenterDriverMobile"]
                                                                </label>
                                                                <div class="input-group">
                                                                    <input type="text" id="mobileAddDriver" asp-for="Contract.AddDriverInfo.CrMasRenterInformationMobile" class="form-control inputs-style tel-input"
                                                                           oninput="this.value = this.value.replace(/[^0-9]/g, '').replace(/^0/, '')" maxlength="9" autocomplete="off" autofocus="true">
                                                                    <select id="countryCodeAddDriver" style="border-right: none;" asp-for="Contract.AddDriverInfo.CrMasRenterInformationCountreyKey" class="input-group-text select-style counterCode">
                                                                        @foreach (var item in Model.CallingKeys)
                                                                        {
                                                                            <option value="@item.CrMasSysCallingKeysNo?.Trim()">@item.CrMasSysCallingKeysNo</option>
                                                                        }
                                                                    </select>
                                                                </div>
                                                                <div class="row requird-field-row">
                                                                    <div class="col">
                                                                        <span class="requird-field" asp-validation-for="Contract.AddDriverInfo.CrMasRenterInformationMobile"></span>
                                                                    </div>
                                                                    <div class="col-auto">
                                                                        <span class="requird-field" asp-validation-for="Contract.AddDriverInfo.CrMasRenterInformationCountreyKey"></span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-6">
                                                                <label for="AR-adress-driver" class="form-label">
                                                                    @localizer["ArAddress"]
                                                                </label>
                                                                <input type="text" id="AR-adress-addDriver" asp-for="Contract.AddDriverInfo.CrMasRenterInformationArAddress" class="form-control text-end inputs-style" maxlength="200">
                                                                <div class="row requird-field-row">
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <label for="EN-adress-driver" class="form-label">
                                                                    @localizer["EnAddress"]
                                                                </label>
                                                                <input type="text" id="EN-adress-addDriver" asp-for="Contract.AddDriverInfo.CrMasRenterInformationEnAddress" class="form-control inputs-style text-start" maxlength="200">
                                                                <div class="row requird-field-row">
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-lg-10  inner-hidden-row-div">
                                                        <div class="row" id="divLicenceAddDriver">
                                                            <div class="col-lg-4">
                                                                <label for="licence-addDriver-number" class="form-label"> @localizer["RenterDriverLicenseNO"]</label>
                                                                <input type="text" id="licence-addDriver-number" asp-for="Contract.AddDriverInfo.CrMasRenterInformationDrivingLicenseNo" class="form-control inputs-style" maxlength="50">
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.AddDriverInfo.CrMasRenterInformationDrivingLicenseNo"></span>
                                                                </div>
                                                            </div>
                                                            <div class="col-lg-4 requird-inputs-col">
                                                                <label for="licence-addDriver-type" class="form-label"> @localizer["RenterDriverLicenseType"] </label>
                                                                @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                                {
                                                                    <select class="form-select select-style AR-select" id="licence-addDriver-type" asp-for="Contract.AddDriverInfo.CrMasRenterInformationDrivingLicenseType">
                                                                        <option selected></option>
                                                                        @foreach (var type in Model.DrivingLicense)
                                                                        {
                                                                            <option value="@type.CrMasSupRenterDrivingLicenseCode"
                                                                                    data-en="@type.CrMasSupRenterDrivingLicenseEnName"
                                                                                    data-ar="@type.CrMasSupRenterDrivingLicenseArName">
                                                                                @type.CrMasSupRenterDrivingLicenseEnName
                                                                            </option>
                                                                        }
                                                                    </select>
                                                                }
                                                                else
                                                                {
                                                                    <select class="form-select select-style AR-select text-right" id="licence-addDriver-type" asp-for="Contract.AddDriverInfo.CrMasRenterInformationDrivingLicenseType">
                                                                        <option selected></option>
                                                                        @foreach (var type in Model.DrivingLicense)
                                                                        {
                                                                            <option value="@type.CrMasSupRenterDrivingLicenseCode"
                                                                                    data-en="@type.CrMasSupRenterDrivingLicenseEnName"
                                                                                    data-ar="@type.CrMasSupRenterDrivingLicenseArName">
                                                                                @type.CrMasSupRenterDrivingLicenseArName
                                                                            </option>
                                                                        }
                                                                    </select>
                                                                }
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.AddDriverInfo.CrMasRenterInformationDrivingLicenseType"></span>
                                                                </div>
                                                            </div>
                                                            <div class="col-lg-4">
                                                                <label for="ExpiryDrivingLicenseDate-driver" class="form-label">
                                                                    @localizer["Expirationdate"]
                                                                </label>
                                                                <input type="date" id="ExpiryDrivingLicenseDate-addDriver" class="form-control inputs-style" asp-for="Contract.AddDriverInfo.CrMasRenterInformationExpiryDrivingLicenseDate" placeholder="yyyy/mm/dd">
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" asp-validation-for="Contract.AddDriverInfo.CrMasRenterInformationExpiryDrivingLicenseDate"></span>
                                                                </div>
                                                                <div class="row requird-field-row">
                                                                </div>
                                                            </div>


                                                        </div>
                                                        <div class="row align-items-center g-3 licence-row-mobile">
                                                            <div class="col-lg-4 mt-2 requird-inputs-col">
                                                                <label for="Email-AddDriver" class="form-label">
                                                                    @localizer["Email"]
                                                                </label>
                                                                <input type="text" id="Email-AddDriver" asp-for="Contract.AddDriverInfo.CrMasRenterInformationEmail" maxlength="100" class="form-control inputs-style email-input">
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" id="Email-AddDriver-Error" asp-validation-for="Contract.AddDriverInfo.CrMasRenterInformationEmail"></span>
                                                                </div>
                                                            </div>
                                                            @* <div class="col-lg-4 ">
                                                            <button type="button" class="btn check-btn payment-button " id="UploadAddDriverLicensePhoto" onclick="setupIDPhotoUpload('UploadAddDriverLicensePhoto','LicenseImage-addDriver')">
                                                            <div class="row align-items-center">
                                                            <div class="col">
                                                            @localizer["DrivingPhoto"]
                                                            </div>
                                                            <div class="col-auto">
                                                            <div class="systems-check">
                                                            <i class="fa-solid fa-check text-white"></i>
                                                            </div>
                                                            </div>
                                                            </div>
                                                            </button>
                                                            </div>
                                                            <input hidden asp-for="Contract.AddDriverInfo.CrMasRenterInformationRenterLicenseImage" id="LicenseImage-addDriver" /> *@
                                                        </div>
                                                        <div class="row my-3">
                                                            <div class="col-lg-12">
                                                                <label>@localizer["reasons"]</label>
                                                            </div>
                                                            <div class="col-lg-7 ">
                                                                <textarea class=" form-control textarea-inputs reasons" rows="1" maxlength="100" id="Reasons-addDriver" asp-for="Contract.AddDriverInfo.CrMasRenterInformationReasons" type="text"></textarea>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="row button-row">
                                        <div class="button-card">
                                            <img src="~/BranchSys/CreateContract/Group.png" alt="Button Image"
                                                 class="next action-button"
                                                 style="vertical-align: middle; ">
                                            <input type="button" name="next" class="next action-button"
                                                   value="@localizer["Next"]" />
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous"
                                                   class="previous action-button-previous"
                                                   value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/CreateContract/Vector.png" alt="Button Image"
                                                 class="previous action-button-previous"
                                                 style="vertical-align: middle; ">
                                        </div>
                                    </div>
                                </fieldset>
                                <!--Choices and Additional-->
                                <fieldset>
                                    <div class="form-card">
                                        <div class="row  table-field-row g-4 justify-content-center">
                                            <!--Car Options-->
                                            <div class="col-lg-4">
                                                <div class="table-scroll">
                                                    <table class="table table-bordered  table-hover " id="AdditionalList">
                                                        <thead>
                                                            <tr>
                                                                <th scope="col" class="value-tabel-header">@localizer["TheValue"]</th>
                                                                <th scope="col" style='border-left: 1px solid #ff9626a3;'>@localizer["Additionals"]</th>
                                                            </tr>
                                                        </thead>

                                                        <tbody id="additionalBody">
                                                            <input hidden id="AdditionalsList" name="AdditionalsList" />
                                                            <input hidden asp-for="Contract.AdditionalTotal" />
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="col-lg-4">
                                                <div class="table-scroll">
                                                    <table class="table table-bordered  table-hover" id="OptionsList">
                                                        <thead>
                                                            <tr>
                                                                <th scope="col"
                                                                    class="value-tabel-header">
                                                                    @localizer["TheValue"]
                                                                </th>
                                                                <th scope="col"
                                                                    style='border-left: 1px solid #ff9626a3; '>
                                                                    @localizer["Choices"]
                                                                </th>

                                                            </tr>
                                                        </thead>
                                                        <tbody id="optionsBody">
                                                            <input hidden id="ChoicesList" name="ChoicesList" />
                                                            <input hidden asp-for="Contract.OptionTotal" />
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row button-row">
                                        <div class="button-card">
                                            <img src="~/BranchSys/CreateContract/Group.png" alt="Button Image"
                                                 class="next action-button"
                                                 style="vertical-align: middle; margin-right: 10px;">
                                            <input type="button" name="next" class="next action-button"
                                                   value="@localizer["Next"]" />
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous"
                                                   class="previous action-button-previous"
                                                   value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/CreateContract/Vector.png" alt="Button Image"
                                                 class="previous action-button-previous"
                                                 style="vertical-align: middle; margin-right: 10px;">
                                        </div>
                                    </div>
                                </fieldset>
                                <!--CheckUP-->
                                <fieldset>
                                    <div class="form-card">
                                        <div class="row g-3">
                                            <div class="col-xl-6">
                                                <div class="row flex-row-reverse g-2 mb-2  justify-content-between">
                                                    <div class="col-md-6">
                                                        <div class="row CurrentReadingg_row"
                                                             style="flex-direction: row-reverse;align-items: baseline;">
                                                            <div class="col-auto">
                                                                <label id="CurrentReadingg" for="CurrentReadingg-input">
                                                                    @localizer["CurrentMeter"]
                                                                </label>
                                                            </div>
                                                            <div class="col-6">
                                                                <input type="tel" class="form-control inputs-style" style="width: 100%;" asp-for="Contract.CurrentMeter" autocomplete="off">
                                                                <div class="row requird-field-row">
                                                                    <span class="requird-field" id="requird_field_CurrentMeter"></span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-5">
                                                        <button type="button" class="btn check-btn d-flex align-items-center gap-2" data-bs-toggle="modal" href="#TechnicalCheckUp">
                                                            <img src="~/BranchSys/CreateContract/img/icon (2).svg">
                                                            @localizer["TechnicalInspection"]
                                                        </button>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="upload__box d-flex">
                                                        <div class="upload_img-wrap_inner" style="display: flex; flex-wrap: wrap; gap: 10px ">
                                                            <div class="upload__img-box" id="upload-img1">
                                                            </div>
                                                            <div class="upload__btn-box" id="upload__btn-box">
                                                                <label class="upload__btn" id="upload__btn">
                                                                    <div class="upload-container-checking">
                                                                        <img class="upload-icon" src="~/BranchSys/CreateContract/Group (1).png" alt="Upload Icon">
                                                                        <input type="file" multiple accept="image/*" data-max_length="10" id="checking-img" class="upload__inputfile " onclick="HideFirstImg()">
                                                                    </div>
                                                                </label>
                                                            </div>
                                                        </div>

                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <p style="color: red;" id="checkUpMessageRequired">

                                                    </p>
                                                </div>

                                            </div>

                                            <div class="col-xl-6">
                                                <div id="referenceDiv">

                                                    <div id="tableContainer" class="table-scroll">
                                                        <table class="table table-bordered  table-hover Checkup-table ">
                                                            <thead>
                                                                <tr>
                                                                    <th scope="col" class="value-tabel-header">
                                                                        @localizer["reasons"]
                                                                    </th>
                                                                    <th scope="col">
                                                                        @localizer["TheCheck"]
                                                                    </th>
                                                                    <th scope="col">
                                                                        <div class="d-flex justify-content-center gap-3">
                                                                            <div class="col">
                                                                                @localizer["CheckUpNames"]
                                                                            </div>
                                                                            <div class="col-auto p-0">
                                                                                <input type="checkbox" id="CheckAll" />
                                                                            </div>
                                                                        </div>
                                                                    </th>
                                                                </tr>
                                                            </thead>
                                                            <tbody id="CheckBody">
                                                                <partial name="_CheckUpList" />
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                    </div>

                                    <div class="row button-row"
                                         style=" justify-content: space-between;">
                                        <div class="button-card">
                                            <img src="~/BranchSys/CreateContract/Group.png" alt="Button Image"
                                                 class="next action-button"
                                                 style="vertical-align: middle; margin-right: 10px;">
                                            <input type="button" name="next" class="next action-button"
                                                   value="@localizer["Next"]" />
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous"
                                                   class="previous action-button-previous"
                                                   value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/CreateContract/Vector.png" alt="Button Image"
                                                 class="previous action-button-previous"
                                                 style="vertical-align: middle; margin-right: 10px;">
                                        </div>
                                    </div>

                                </fieldset>
                                <!--Payment-->
                                <fieldset>
                                    <div class="form-card form-card7">
                                        <div class="row flex-row-reverse">
                                            <div class="col-md-6 col-lg-4 d-flex payment-col">
                                                <div class="col-auto">
                                                    <p id="contract-number">@localizer["ContractNo"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <input name="ContractNo" id="ContractNo" value="@ViewBag.ContractNo" hidden />
                                                    <p>@ViewBag.ContractNo</p>
                                                </div>
                                            </div>
                                            @* <div class="col-md-6 col-lg-4 d-flex payment-col">
                                                <div class="col-auto">
                                                    <p id="Receiving-branch">@localizer["Policy"] </p>
                                                </div>
                                                <div class="col-md-6 personal-data">
                                                    <div class="offset">
                                                        <select class="form-select-last form-select" id="PolicyCode" asp-for="Contract.PolicyCode">
                                                            <option selected disabled>
                                                            </option>
                                                            <option value="35">35</option>
                                                            <option value="10159">10159</option>
                                                            <option value="10161">10161</option>
                                                        </select>
                                                        <div class="row requird-field-row-last">
                                                            <span class="requird-field" asp-validation-for="@Model.Contract.PolicyCode"></span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div> *@
                                        </div>
                                        <div class="row flex-row-reverse">
                                            <div class="col-md-6 col-lg-4 d-flex payment-col align-items-center">
                                                <div class="col-auto">
                                                    <label id="days-number" for="days-number-input">
                                                        @localizer["DaysNo"]
                                                    </label>
                                                </div>
                                                <div class="col-auto DaysNoFixPaddin">
                                                    <input type="text" class="form-control1 form-control" asp-for="Contract.DaysNo" id="dayNo" oninput="validateDaysNo(this)" onfocusout="CalculateContract()" maxlength="3" autocomplete="off" autofocus required>                                                <div class="row requird-field-row-last">
                                                        <div class="row requird-field-row-last">
                                                            <span class="requird-field" id="requird_field_DaysNo" asp-validation-for="@Model.Contract.DaysNo"></span>
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col">
                                                <div class="col-auto">
                                                    <p id="start-date">@localizer["StartDate"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p id="StartDate">@ViewBag.StartDate</p>
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col">
                                                <div class="col-auto">
                                                    <p id="end-date">@localizer["EndDate"]</p>

                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p id="EndDate"> </p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row flex-row-reverse g-2">
                                            <div class="col-md-6 col-lg-4 d-flex payment-col  flex-wrap ">
                                                <div class="col-12 col-md-auto d-flex gap-3 flex-wrap contract-value ">
                                                    <p class="personal-data" id="contractValue">0.00</p>
                                                    <p id="renting-price"> @localizer["ContractValue"]</p>
                                                    <input hidden asp-for="Contract.ContractValueBeforeDiscount" />
                                                </div>
                                                <div class="col-auto">
                                                    <img src="~/BranchSys/CreateContract/img/seacrh-icon.png" alt="icon button to display more data" id="payment-extra-details">
                                                    <div class="dropdown-content payment-dropdown-content" id="dropdown-content-payment">
                                                        <div class="data-container">
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-auto ">
                                                                    <p>@localizer["RentalValue"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="RentValue">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-auto ">
                                                                    <p>@localizer["AdvantagesValue"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="AdvatagesValue">0</p>
                                                                    <input hidden asp-for="Contract.AdvantagesTotalValue" />
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-auto ">
                                                                    <p>@localizer["ChoicesValue"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="ChoicesValue">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-auto ">
                                                                    <p>@localizer["AdditionalValue"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="AdditionalValue">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-auto ">
                                                                    <p>@localizer["AddDriverValue"] </p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="AddDriverValue">0</p>
                                                                </div>

                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-auto ">
                                                                    <p>@localizer["PrivateDriverValue"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="PrivateDriverValue">0</p>
                                                                </div>
                                                            </div>
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-auto ">
                                                                    <p>@localizer["DelegationValue"]</p>
                                                                </div>
                                                                <div class="col personal-data-dropdown">
                                                                    <p id="InFeesTammValue">0</p>
                                                                    <input hidden asp-for="Contract.FeesTmmValue" />
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col ">
                                                <div class="col-auto personal-data">
                                                    <input class="Delegate-out-input" type="checkbox" id="Delegate-out" value="checked">
                                                    <input hidden asp-for="Contract.OutFeesTmm" />
                                                </div>
                                                <div class="col-auto">
                                                    <label class="Delegate-out-label" for="Delegate-out" name="Delegate-out">
                                                        @localizer["ExternalDelegation"]
                                                    </label>
                                                </div>

                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col" id="ReceivingBranch" style="display:none">
                                                <div class="col-auto">
                                                    <p id="Receiving-branch">@localizer["DeliveryBranch"] </p>
                                                </div>
                                                <div class="col-md-7 personal-data">
                                                    <div class="offset">
                                                        <select class="form-select-last form-select" id="Receiving-branch-dropdown" asp-for="Contract.BranchReceivingCode">
                                                            <option selected disabled>
                                                            </option>
                                                            @foreach (var item in Model.CrCasBranchInformations.Where(x => x.CrCasBranchInformationCode != Model.SelectedBranch))
                                                            {
                                                                <option value="@item.CrCasBranchInformationCode"
                                                                        data-en="@item.CrCasBranchInformationEnShortName"
                                                                        data-ar="@item.CrCasBranchInformationArShortName"
                                                                        data-code="@item.CrCasBranchInformationTgaCode">
                                                                    @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                                    {
                                                                        @item.CrCasBranchInformationEnShortName
                                                                    }
                                                                    else
                                                                    {
                                                                        @item.CrCasBranchInformationArShortName
                                                                    }
                                                                </option>
                                                            }
                                                        </select>
                                                        <div class="row requird-field-row-last">
                                                            <span class="requird-field" asp-validation-for="@Model.Contract.BranchReceivingCode"></span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row flex-row-reverse align-items-baseline g-2 my-2">
                                            <div class="col-md-6 col-lg-4 d-flex payment-col align-items-center">
                                                <div class="col-auto">
                                                    <label id="discount-percentage" for="discount-percentage-input">@localizer["DiscountRate"]</label>
                                                </div>
                                                <div class="col-auto">
                                                    <input type="text" class="form-control1 form-control" asp-for="Contract.UserDiscount" id="Discount_Input" oninput="handleDiscountInput(this)" onfocusout="CalculateDiscount()" min="0" max="100" value="0" maxlength="5" autocomplete="off">
                                                    <input hidden asp-for="Contract.DiscountValue" />
                                                    <div class="row requird-field-row-last">
                                                        <p class="requird_field_Discount"></p>
                                                    </div>
                                                </div>

                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col align-items-center">
                                                <div class="col-auto">
                                                    <label id="addational-hours" for="AdditionalHours"> @localizer["AdditionalHours"] </label>
                                                </div>
                                                <div class="col-auto">
                                                    <input type="tel" class="form-control1 form-control" asp-for="Contract.UserAddHours" id="AdditionalHours" maxlength="2" oninput="handleAdditionalHoursInput(this)" min="0" max="99" value="0" autocomplete="off">
                                                    <div class="row requird-field-row-last">
                                                        <p class="requird-field"></p>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col align-items-center">
                                                <div class="col-auto">
                                                    <label id="addational-kilos"
                                                           for="AdditionalKilos">
                                                        @localizer["AdditionalKm"]
                                                    </label>
                                                </div>
                                                <div class="col-auto">
                                                    <input type="tel" class="form-control1 form-control" asp-for="Contract.UserAddKm" id="AdditionalKilos" maxlength="3" oninput="handleAdditionalKilosInput(this)" min="0" max="999" value="0" autocomplete="off">
                                                    <div class="row requird-field-row-last">
                                                        <p class="requird-field"></p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row flex-row-reverse">
                                            <div class="col-md-6 col-lg-4 d-flex payment-col">
                                                <div class="col-auto">
                                                    <p id="Total contract">@localizer["TotalContract"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p id="totalContract">0.00</p>
                                                    <input hidden asp-for="Contract.ContractValueAfterDiscount" />
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex payment-col">
                                                <div class="col-auto">
                                                    <p id="Tax-value"> @localizer["TaxValue"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p id="Taxvalue">0.00</p>
                                                    <input hidden asp-for="Contract.TaxValue" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row flex-row-reverse">
                                            <div class="col-md-6 col-lg-4 d-flex payment-col">
                                                <div class="col-auto">
                                                    <p id="Total_Contract"> @localizer["NetContract"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p id="TotalActualContract">0</p>
                                                    <input hidden asp-for="Contract.TotalContractAmount" />
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex payment-col">
                                                <div class="col-auto">
                                                    <p id="previous-balance"> @localizer["AvailableBalance"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p id="Balance">0.00</p>

                                                </div>
                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex payment-col">
                                                <div class="col-auto">
                                                    <p id="price"> @localizer["AmountRequired"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p id="TotalAmount">0.00</p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row flex-row-reverse g-2">
                                            <div class="col-md-6 col-lg-4 d-flex payment-col">
                                                <div class="col-auto">
                                                    <label id="amount-paid" for="AmountPayed">@localizer["AmountPaid"]</label>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <input type="text" class="form-control2 form-control" asp-for="Contract.AmountPayed" style="width: 110px!important" id="AmountPayed" oninput="handleAmountPayed(this)" autocomplete="off" readonly>
                                                    <div class="row requird-field-row-last">
                                                        <p class="requird_field_AmountPayed"></p>
                                                    </div>
                                                </div>
                                            </div>
                                            @{
                                                if (Model?.AccountBanks?.FindAll(x => x.CrCasAccountBankNo != "00").Count() == 0)
                                                {
                                                    Model.PaymentMethods = Model?.PaymentMethods?.FindAll(x => x.CrMasSupAccountPaymentMethodClassification == "1");
                                                }
                                                else if (Model?.AccountBanks?.FindAll(x => x.CrCasAccountBankNo != "00").Count() > 0 && Model?.SalesPoint?.FindAll(x => x.CrCasAccountSalesPointBank != "00").Count() == 0)
                                                {
                                                    Model.PaymentMethods = Model?.PaymentMethods?.FindAll(x => x.CrMasSupAccountPaymentMethodClassification == "3" || x.CrMasSupAccountPaymentMethodClassification == "1");
                                                }
                                                else if (Model?.AccountBanks?.FindAll(x => x.CrCasAccountBankNo != "00").Count() > 0 && Model?.SalesPoint?.FindAll(x => x.CrCasAccountSalesPointBank != "00").Count() > 0)
                                                {
                                                    Model.PaymentMethods = Model?.PaymentMethods?.FindAll(x => x.CrMasSupAccountPaymentMethodClassification == "2" || x.CrMasSupAccountPaymentMethodClassification == "3" || x.CrMasSupAccountPaymentMethodClassification == "1");
                                                }
                                            }
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col">
                                                <div class="col-auto">
                                                    <p id="payment-method">@localizer["PaymentMethod"]</p>
                                                </div>
                                                <div class="col-md-6 personal-data">
                                                    <div class="offset">
                                                        <select class="form-select-last form-select" asp-for="Contract.PaymentMethod" style="font-size:14px;" disabled>
                                                            <option selected disabled></option>
                                                            @foreach (var payment in Model.PaymentMethods)
                                                            {
                                                                @if (requestCulture?.RequestCulture.UICulture.Name != "en-US")
                                                                {
                                                                    <option value="@payment.CrMasSupAccountPaymentMethodCode" data-id="@payment.CrMasSupAccountPaymentMethodNaqlCode" data-ar="@payment.CrMasSupAccountPaymentMethodArName" data-en="@payment.CrMasSupAccountPaymentMethodEnName" class="text-right">@payment.CrMasSupAccountPaymentMethodArName</option>

                                                                }
                                                                else
                                                                {
                                                                    <option value="@payment.CrMasSupAccountPaymentMethodCode" data-id="@payment.CrMasSupAccountPaymentMethodNaqlCode" data-ar="@payment.CrMasSupAccountPaymentMethodArName" data-en="@payment.CrMasSupAccountPaymentMethodEnName">@payment.CrMasSupAccountPaymentMethodEnName</option>
                                                                }
                                                            }
                                                        </select>
                                                    </div>
                                                    <span class="requird-field" id="requird_field_PaymentMethod" asp-validation-for="@Model.Contract.PaymentMethod"></span>
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-lg-4 d-flex  payment-col">
                                                <div class="col-auto">
                                                    <p id="selling-point"> @localizer["SalesPoint"] </p>
                                                </div>
                                                <div class="col-md-8 personal-data">
                                                    <div class="offset">
                                                        <select class="form-select-last form-select" asp-for="Contract.SalesPoint" disabled>
                                                        </select>
                                                    </div>
                                                    <span class="requird-field" id="requird_field_SalesPoint" asp-validation-for="@Model.Contract.SalesPoint"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row p-2 row-step1 ">
                                            <div class="col-auto">
                                                <p id="notes">@localizer["reasons"]</p>
                                            </div>
                                            <div class="col-sm-7 col-md-7 col-lg-7">
                                                <input class="form-control text-right textarea-inputs" id="FormControl-last-Textarea" asp-for="Contract.PaymentReasons" rows="1" maxlength="100">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row button-row align-items-center"
                                         style="padding: 6px 7px 0px 20px;">
                                        <div class="payment-button-card button-card  gap-2">
                                            <input id="SaveContractBtn" type="button" class=" check-btn payment-button" value="@localizer["SaveContract"]">

                                            <button type="button" class="btn check-btn check-btn-load payment-button signature-button" id="check_btn_load_Signture" data-bs-toggle="modal" href="#PicsignatureModal">
                                                <div class="row align-items-center">
                                                    <div class="col-auto">
                                                        <div class="systems-check">
                                                            <i class="fa-solid fa-check text-white"></i>
                                                        </div>
                                                    </div>
                                                    <div class="col">@localizer["SignatureTenant"]</div>
                                                </div>
                                            </button>
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous" class="previous action-button-previous" value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/CreateContract/img/vector.png" alt="Button Image" class="previous action-button-previous" style="vertical-align: middle; margin-right: 10px;">
                                        </div>
                                    </div>
                                </fieldset>
                            </form>
                        </div>
                    </div>
                </div>
                <!-- %%%%%%%%%%%%%%%%%%%%%%%Licence Driver Photo%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
                <div class="modal fade" id="IDphoto-modal" tabindex="-1"
                     aria-labelledby="PicignaturPopupModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered d-flex justify-content-center">
                        <div class="modal-content IDphoto-modal-content p-3">
                            <div class="modal-body IDphoto-modal-body">
                                <div class="ID-Card">
                                    <div class="ID-main-container" id="removeIDImg"></div>
                                    <div class="ID-upload-container">
                                    </div>
                                </div>
                                <br>
                                <div class="row">
                                    <div class="col">
                                        <div class="Id-btn-card p-2">
                                            <img src="~/BranchSys/CreateContract/img/signature/Pic.svg" class="w-100"
                                                 id="UploadIDPic">
                                            <input type="file" id="IDimageUpload" accept="image/*"
                                                   style="display: none;">
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="Id-btn-card p-2">
                                            <img src="~/BranchSys/CreateContract/img/Camera.svg"
                                                 class="w-100" id="openCamera">
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="Id-btn-card p-2">
                                            <img src="~/BranchSys/CreateContract/img/signature/save.svg" class="w-100" id="ID-photo-save">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!--Signture-->
                <div class="modal fade" id="PicsignatureModal" tabindex="-1" aria-labelledby="PicignaturPopupModalLabel" aria-hidden="true" data-bs-backdrop="true">
                    <div class="modal-dialog modal-dialog-centered d-flex justify-content-center">
                        <div class="modal-content signature-modal-content p-3">
                            <div class="modal-body Signature-modal-body">
                                <div class="SignatureCard">
                                    <div class="main-container" id="removeSignatureImg"></div>
                                    <div class="upload-container">
                                    </div>
                                </div>
                                <br>
                                <div class="row">
                                    <div class="col-4">
                                        <div class="sinature-Btn-Card p-2" id="UploadSigntaurePic">
                                            <img src="~/BranchSys/img/Pic.svg" class="w-100">
                                            <input type="file" id="imageUpload" accept="image/*" style="display: none;">
                                        </div>
                                    </div>
                                    <div class="col-4" id="WriteSignature">
                                        <div class="sinature-Btn-Card p-2">
                                            <img src="~/BranchSys/img/file-signature_9795523 1.svg" class="w-100">
                                        </div>
                                    </div>
                                    @* <div class="col-3" id="clear">
                                    <div class="sinature-Btn-Card p-2">
                                    <img src="~/BranchSys/img/Frame.svg" class="w-100">
                                    </div>
                                    </div> *@
                                    <div class="col-4" id="Save_Btn">
                                        <div class="sinature-Btn-Card p-2">
                                            <img src="~/BranchSys/img/save.svg" class="w-100" id="save">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!--Signture-->
                <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%% TechnicalCheckUp %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
                <div class="modal fade" id="TechnicalCheckUp"
                     aria-labelledby="TechnicalCheckUpLabel" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-xl">
                        <div class="modal-content">
                            <div class="modal-header text-center">
                                <p class="modal-title w-100"></p>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"
                                        aria-label="Close"></button>

                            </div>
                            <div class="modal-body">
                                <div class="container">
                                    <div class="row flex-column">
                                        <div class="col-12 text-center">
                                            <div class="row g-3 justify-content-center "
                                                 id="TechnicalCheckUp-container">
                                                <div class="col-auto">
                                                    <button id="bend-in-body-btn"
                                                            class="TechnicalCheckUp-Btn p-2">
                                                        <img src="~/BranchSys/CreateContract/img/bend-in-body.svg">@localizer["CurvatureStructure"]
                                                    </button>
                                                </div>
                                                <div class="col-auto">
                                                    <button id="very-deep-scratch-btn"
                                                            class="TechnicalCheckUp-Btn p-2">
                                                        <img src="~/BranchSys/CreateContract/img/very-deep-scratch.svg">@localizer["VeryDeepScratch"]
                                                    </button>

                                                </div>
                                                <div class="col-auto">
                                                    <button id="deep-scratch-btn"
                                                            class="TechnicalCheckUp-Btn p-2">
                                                        <img src="~/BranchSys/CreateContract/img/deep-scratch.svg"> @localizer["DeepScratch"]
                                                    </button>

                                                </div>
                                                <div class="col-auto">
                                                    <button id="small-scratch-btn"
                                                            class="TechnicalCheckUp-Btn p-2">
                                                        <img src="~/BranchSys/CreateContract/img/small-scratch.svg"> @localizer["SimpleScratch"]
                                                    </button>

                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-12 d-flex justify-content-center">
                                            <div class="car-container m-3">
                                                <canvas id="shape-canvas"></canvas>
                                            </div>
                                        </div>
                                        <div class="col-12">
                                            <div class="row g-3">
                                                <div class="col d-flex justify-content-center ">
                                                    <button id="undo-btn" class=" undo-redo-btn">
                                                        <img src="~/BranchSys/CreateContract/img/undo.svg">
                                                    </button>


                                                    <button id="redo-btn" class="undo-redo-btn mx-2 ">
                                                        <img src="~/BranchSys/CreateContract/img/undo (2).svg">
                                                    </button>

                                                </div>
                                                <div class="col">
                                                    <button id="save-btn" class="check-btn ">@localizer["Save"] </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
                <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% TechnicalCheckUp %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
            </div>
        </div>
    </section>
</div>
<canvas id="myCanvas" hidden></canvas>
<footer class="fixed-bottom-xl">
    <div class="before-footer-widget">
        <svg width: 100%; height:auto viewbox="0 0 2444 132">
            <path fill="rgba(254, 248, 232, 1)" fill-rule="evenodd"
                  d="M1222 0h1222c-444.13 88-852.127 132-1223.993 132C849.253 132 442.585 88.263 0 .789V0h1222z">
            </path>
        </svg>
    </div>
</footer>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/BranchSys/CreateContract/js/contract.js"></script>
    <script src="~/BranchSys/CreateContract/js/contract2.js"></script>
    <script src="~/BranchSys/CreateContract/js/TechnicalCheckUp.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jspdf@latest/dist/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/js/all.min.js" integrity="sha512-u3fPA7V8qQmhBPNT5quvaXVa1mnnLSXUep5PS1qo5NRzHwG19aHmNJnj1Q8hpA/nBWZtZD4r4AX6YOt5ynLN2g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="~/js/toastr.js"></script>
    <!--Pdf-->
    <script src="~/PdfJS/CatchReceipt/ReceiptCatchJS/Receipt.js"></script>
    <script src="~/PdfJS/Invoice/ProformaInvoice/js/ProformaInvoice.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.min.js"></script>
    <script src="https://mozilla.github.io/pdf.js/build/pdf.js"></script>
    <!--Pdf-->
    <script>
        $(document).ready(function () {
            // "Check All" checkbox functionality
            $('#CheckAll').on('change', function () {
                // Set all checkboxes with the class 'CheckUp' to the same state as "Check All"
                console.log("111111")
                $('.CheckUp').prop('checked', $(this).prop('checked'));
            });

            // Uncheck the "Check All" checkbox if any individual checkbox is unchecked
            $(document).on('change', '.CheckUp', function () {
                console.log("00000")
                if (!$(this).prop('checked')) {
                    $('#CheckAll').prop('checked', false);
                }
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            toastr.options = { "positionClass": '@localizer["toastPostion"]', "title": " " };
        });
    </script>
    <!-- script for جهة العمل و الجنسيات و المنطقة / المدينة dropdown autocomplete list -->
    <script>
        const nationalities = @Html.Raw(Json.Serialize(ViewBag.RenterNationalities));
        const cities = @Html.Raw(Json.Serialize(ViewBag.RenterCities));
        const workPlaces = @Html.Raw(Json.Serialize(ViewBag.RenterWorkplaces));
        console.log("nationalities",nationalities);
        var listsIsTrueOrNotRenter = true;
        var listsIsTrueOrNotDriver = true;
        var listsIsTrueOrNotAddDriver = true;
        var dataLists = {
            Cities: cities,
            Nationalities: nationalities,
            WorkPlace: workPlaces
        };
        function setupAutocomplete(inputId, list, dataList, errorElementId, listsIsTrueOrNot, validate) {
                $("#" + inputId).on("input", function () {
                    const value = this.value.toLowerCase();
                    const autocompleteList = $("#" + list);
                    autocompleteList.empty();

                    if (validate) {
                        // Clear the code input and error message whenever the user types
                        $("#" + inputId + "-code").val('');
                        $("#" + errorElementId).text(''); // Clear any previous error message
                    }

                    if (value) {
                        let matchesFound = false;
                        dataList.forEach(item => {
                            if (item.text.toLowerCase().includes(value)) {
                                autocompleteList.append("<div data-value='" + item.value + "'>" + item.text + "</div>");
                                matchesFound = true;
                            }
                        });

                        autocompleteList.toggle(matchesFound);
                    } else {
                        autocompleteList.hide();
                    }
                });

                $(document).on("click", "#" + list + " div", function () {
                    const selectedText = $(this).text();
                    const selectedValue = $(this).data("value");

                    $("#" + inputId).val(selectedText);
                    $("#" + inputId + "-code").val(selectedValue);

                    const matchedItemFromChose = dataList.find(item => item.text === selectedText);

                    if (validate) {
                        if (matchedItemFromChose) {
                            $("#" + inputId + "-code").val(matchedItemFromChose.value);
                            $("#" + errorElementId).text(''); // Clear error message
                            window[listsIsTrueOrNot] = true; // Update the global flag
                        } else {
                            $("#" + errorElementId).text("@localizer["requiredFiled"]"); // Show error message
                            $("#" + inputId + "-code").val("");
                            window[listsIsTrueOrNot] = false; // Update the global flag
                        }
                    }

                    $("#" + list).empty().hide();
                });

                $(document).click(function (e) {
                    if (!$(e.target).closest("#" + list + ", #" + inputId).length) {
                        $("#" + list).empty().hide();
                    }
                });

                if (validate) {
                    // Check for match on blur or Enter key press
                    $("#" + inputId).on("blur keypress", function (e) {
                        if (e.type === "blur" || (e.type === "keypress" && e.which === 13)) {
                            const inputValue = $(this).val();
                            const matchedItem = dataList.find(item => item.text === inputValue);

                            if (matchedItem) {
                                $("#" + inputId + "-code").val(matchedItem.value);
                                $("#" + errorElementId).text(''); // Clear error message
                                window[listsIsTrueOrNot] = true; // Update the global flag
                            } else {
                                $("#" + errorElementId).text("@localizer["requiredFiled"]"); // Show error message
                                window[listsIsTrueOrNot] = false; // Update the global flag
                            }
                        }
                    });
                }
            }
        $(document).ready(function () {
            // Initialize autocomplete for renters, drivers, and addDrivers
            setupAutocomplete("Region-city-tenant", "autocomplete-Cities1", dataLists.Cities, "Region-city-tenant-error", "listsIsTrueOrNotRenter", true);
            setupAutocomplete("tenant-workplace", "autocomplete-workplace1", dataLists.WorkPlace, "tenant-workplace-error", "listsIsTrueOrNotRenter", false);

            setupAutocomplete("Region-city-driver", "autocomplete-Cities2", dataLists.Cities, "Region-city-driver-error", "listsIsTrueOrNotDriver", true);
            setupAutocomplete("driver-workplace", "autocomplete-workplace2", dataLists.WorkPlace, "driver-workplace-error", "listsIsTrueOrNotDriver", false);

            setupAutocomplete("Region-city-addDriver", "autocomplete-Cities3", dataLists.Cities, "Region-city-addDriver-error", "listsIsTrueOrNotAddDriver", true);
            setupAutocomplete("addDriver-workplace", "autocomplete-workplace3", dataLists.WorkPlace, "addDriver-workplace-error", "listsIsTrueOrNotAddDriver", false);
        });
        function updateNationalitiesList(filterNationalities, type) {
            if (Array.isArray(filterNationalities) && filterNationalities.length > 0) {
                dataLists.Nationalities = filterNationalities;
                console.log(`Updated Nationalities List for ${type}:`, dataLists.Nationalities);

                // إعداد الـ autocomplete بناءً على النوع
                const autocompleteId = `autocomplete-Nationalities${type === "Renter" ? "1" : type === "Driver" ? "2" : "3"}`;
                const nationalityFieldId = `nationality-${type}`;
                const errorFieldId = `nationality-${type}-error`;

                setupAutocomplete(nationalityFieldId, autocompleteId, dataLists.Nationalities, errorFieldId, `listsIsTrueOrNot${type}`, true);
            } else {
                console.error(`Invalid filterNationalities for ${type}.`);
            }
        }

    </script>
    <script>
        // // //////////////////////////////////////////////// رفع صورة الهوية ////////////////////////////////////////////////////////////////////////

        //variables//

        // let saveIDBtn = null;

        // document.addEventListener("click", function () {
        //         saveIDBtn = "UploadIDPic";
        //         console.log(saveIDBtn)
        //     });

        // const IDuploadContainer = document.querySelector(".ID-upload-container");
        // const IDmainContainer = document.querySelector(".ID-main-container");
        // const UploadIDPic = document.getElementById("UploadIDPic");
        // const IDimageUpload = document.getElementById("IDimageUpload");
        // const UploadRenderIdPhotoBtn = document.getElementById("UploadRenderIdPhoto");
        // const UploadDriverDrivingLicensePhotoBtn = document.getElementById("UploadDriverLicensePhoto");
        // var imgeURL;
        // const IDuploadedImg = null;
        // //
        // UploadIDPic.addEventListener("click", function () {
        //     IDimageUpload.click();
        // });
        // IDimageUpload.addEventListener("change", function () {
        //     const file = IDimageUpload.files[0];
        //     if (file) {
        //         const reader = new FileReader();
        //         reader.onload = function (e) {
        //             const IDimageURL = e.target.result;
        //             const IDpreviewImage = document.createElement("img");
        //             IDpreviewImage.classList.add("preview-image");
        //             IDpreviewImage.src = IDimageURL;
        //             IDpreviewImage.id = "IDImage";
        //             imgeURL = IDimageURL;
        //             IDmainContainer.innerHTML =
        //                 '<i class="fa-regular fa-circle-xmark"  style="cursor: pointer;"></i>';
        //             IDuploadContainer.innerHTML = "";
        //             IDuploadContainer.appendChild(IDpreviewImage);
        //             IDuploadContainer.classList.add("previewing");
        //         };
        //         reader.readAsDataURL(file);
        //     }
        // });
        // removeIDImg.addEventListener("click", function (event) {
        //     event.preventDefault();
        //     if (IDuploadContainer.firstChild) {
        //         IDuploadContainer.innerHTML = "";
        //         IDmainContainer.innerHTML = "";
        //         IDuploadContainer.classList.remove("previewing");
        //         IDuploadContainer.innerHTML =
        //             ' <img class="upload-icon" src="/BranchSys/CreateContract/img/Rectangle 144.png" alt="Upload Icon"><p>ارفق صورة الهوية </p>';
        //         document.getElementById("RenterIdImg").value = null;
        //     }
        // });
        // // // //////////////////////////////////////////////// التقاط صورة الهوية ////////////////////////////////////////////////////////////////////////
        // const openCameraButton = document.getElementById('openCamera');
        // document.getElementById("openCamera").addEventListener("click", function () {
        //         saveIDBtn = "CameraID";
        //         console.log(saveIDBtn)
        //     });
        // openCameraButton.addEventListener('click', async () => {
        //     let videoElement = document.getElementById('videoElement');
        //     let photo = document.getElementById('photo');

        //     if (!videoElement) {
        //         IDuploadContainer.innerHTML = `
        //                                                                     <video id="videoElement" autoplay></video>
        //                                                                     <img id="photo" alt="The screen capture will appear in this box." style="display:none;">
        //                                                                 `;
        //         videoElement = document.getElementById('videoElement');
        //         photo = document.getElementById('photo');

        //         try {
        //             const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        //             videoElement.srcObject = stream;

        //             await new Promise(resolve => {
        //                 videoElement.onloadedmetadata = () => {
        //                     resolve();
        //                 };
        //             });

        //         } catch (error) {
        //             console.error('Error accessing the camera:', error);
        //         }
        //     } else {
        //         const canvasElement = document.createElement('canvas');
        //         canvasElement.width = videoElement.videoWidth;
        //         canvasElement.height = videoElement.videoHeight;
        //         const context = canvasElement.getContext('2d');
        //         context.drawImage(videoElement, 0, 0, canvasElement.width, canvasElement.height);

        //         const stream = videoElement.srcObject;
        //         const tracks = stream.getTracks();
        //         tracks.forEach(track => track.stop());

        //         const dataUrl = canvasElement.toDataURL('image/png');
        //         photo.src = dataUrl;
        //         photo.style.display = 'block';
        //         videoElement.remove();
        //     }
        // });
        // // Save the uploded IDphoto image
        // function SaveUplodedIDphoto() {
        //     const img = document.getElementById("IDImage");
        //     const canvas = document.createElement("canvas");
        //     canvas.width = img.width;
        //     canvas.height = img.height;
        //     const context = canvas.getContext("2d");
        //     context.drawImage(img, 0, 0, canvas.width, canvas.height);
        //     const base64 = canvas.toDataURL("image/png");
        //     document.getElementById("RenterIdImg").value = base64;
        //     console.log(base64);
        //     $("#IDphoto-modal").modal("hide");
        //     showSpinner(UploadRenderIdPhotoBtn);
        //     setTimeout(function () {
        //         if (base64) {
        //             removeSpinnerAndChangeColor(UploadRenderIdPhotoBtn); // Remove spinner and change color
        //         }
        //     }, 2000);
        // }
        // // Save the camera IDphoto image
        // function SaveCameraIDphoto() {
        //     const img = document.getElementById("photo");
        //     const canvas = document.createElement("canvas");
        //     canvas.width = img.width;
        //     canvas.height = img.height;
        //     const context = canvas.getContext("2d");
        //     context.drawImage(img, 0, 0, canvas.width, canvas.height);
        //     const base64 = canvas.toDataURL("image/png");
        //     document.getElementById("RenterIdImg").value = base64;
        //     console.log(base64);
        //     $("#IDphoto-modal").modal("hide");
        //     showSpinner(UploadRenderIdPhotoBtn);
        //     setTimeout(function () {
        //         if (base64) {
        //             removeSpinnerAndChangeColor(UploadRenderIdPhotoBtn); // Remove spinner and change color
        //         }
        //     }, 2000);
        // }
        // document.getElementById("ID-photo-save").addEventListener("click", function () {
        //     if (saveIDBtn === "UploadIDPic") {
        //         SaveUplodedIDphoto();
        //     } else if (saveIDBtn === "CameraID") {
        //         SaveCameraIDphoto();
        //     }
        // });

        function setupIDPhotoUpload(idBtn, idInputSaved) {

            $('#IDphoto-modal').modal('show'); // Open the modal
            let saveBtn = null;
            document.addEventListener("click", function () {
                saveBtn = "UploadPic";
                console.log(saveBtn)
            });
            const IDuploadContainer = document.querySelector(".ID-upload-container");
            const IDmainContainer = document.querySelector(".ID-main-container");
            const UploadIDPic = document.getElementById("UploadIDPic");
            const IDimageUpload = document.getElementById("IDimageUpload");
            const UploadRenderIdPhotoBtn = document.getElementById(idBtn);
            const InputSavePicture = document.getElementById(idInputSaved);
            InputSavePicture.value = ""; // Clear the hidden input value
            var imgeURL;
            const IDuploadedImg = null;

            UploadIDPic.addEventListener("click", function () {
                IDimageUpload.click();
            });

            IDimageUpload.addEventListener("change", function () {
                const file = IDimageUpload.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const IDimageURL = e.target.result;
                        const IDpreviewImage = document.createElement("img");
                        IDpreviewImage.classList.add("preview-image");
                        IDpreviewImage.src = IDimageURL;
                        IDpreviewImage.id = "IDImage";
                        imgeURL = IDimageURL;
                        IDmainContainer.innerHTML =
                            '<i class="fa-regular fa-circle-xmark" style="cursor: pointer;"></i>';
                        IDuploadContainer.innerHTML = "";
                        IDuploadContainer.appendChild(IDpreviewImage);
                        IDuploadContainer.classList.add("previewing");
                    };
                    reader.readAsDataURL(file);
                }
            });

            document.querySelector("#removeIDImg").addEventListener("click", function (event) {
                event.preventDefault();
                if (IDuploadContainer.firstChild) {
                    IDuploadContainer.innerHTML = "";
                    IDmainContainer.innerHTML = "";
                    IDuploadContainer.classList.remove("previewing");
                    IDuploadContainer.innerHTML =
                        '<img class="upload-icon" src="/BranchSys/CreateContract/img/Rectangle 144.png" alt="Upload Icon"><p>ارفق صورة الهوية </p>';
                    InputSavePicture.value = null;
                }
            });

            const openCameraButton = document.getElementById("openCamera");
            openCameraButton.addEventListener("click", function () {
                saveBtn = "CameraID";
                console.log(saveBtn);
            });

            openCameraButton.addEventListener('click', async () => {
                let videoElement = document.getElementById('videoElement');
                let photo = document.getElementById('photo');

                if (!videoElement) {
                    IDuploadContainer.innerHTML = `
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <video id="videoElement" autoplay></video>
img id="photo" alt="The screen capture will appear in this box." style="display:none;">
`;
                    videoElement = document.getElementById('videoElement');
                    photo = document.getElementById('photo');

                    try {
                        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                        videoElement.srcObject = stream;

                        await new Promise(resolve => {
                            videoElement.onloadedmetadata = () => {
                                resolve();
                            };
                        });

                    } catch (error) {
                        console.error('Error accessing the camera:', error);
                    }
                } else {
                    const canvasElement = document.createElement('canvas');
                    canvasElement.width = videoElement.videoWidth;
                    canvasElement.height = videoElement.videoHeight;
                    const context = canvasElement.getContext('2d');
                    context.drawImage(videoElement, 0, 0, canvasElement.width, canvasElement.height);

                    const stream = videoElement.srcObject;
                    const tracks = stream.getTracks();
                    tracks.forEach(track => track.stop());

                    const dataUrl = canvasElement.toDataURL('image/png');
                    photo.src = dataUrl;
                    photo.style.display = 'block';
                    videoElement.remove();
                }
            });

            function saveUploadedPhoto() {
                const img = document.getElementById("IDImage");
                const canvas = document.createElement("canvas");
                canvas.width = img.width;
                canvas.height = img.height;
                const context = canvas.getContext("2d");
                context.drawImage(img, 0, 0, canvas.width, canvas.height);
                const base64 = canvas.toDataURL("image/png");
                InputSavePicture.value = base64;
                console.log(base64);
                $("#IDphoto-modal").modal("hide");
                showSpinner(UploadRenderIdPhotoBtn);
                setTimeout(function () {
                    if (base64) {
                        removeSpinnerAndChangeColor(UploadRenderIdPhotoBtn, "id"); // Remove spinner and change color
                    }
                }, 2000);
            }

            function saveCameraPhoto() {
                const img = document.getElementById("photo");
                const canvas = document.createElement("canvas");
                canvas.width = img.width;
                canvas.height = img.height;
                const context = canvas.getContext("2d");
                context.drawImage(img, 0, 0, canvas.width, canvas.height);
                const base64 = canvas.toDataURL("image/png");
                InputSavePicture.value = base64;
                console.log(base64);
                $("#IDphoto-modal").modal("hide");
                showSpinner(UploadRenderIdPhotoBtn);
                setTimeout(function () {
                    if (base64) {
                        removeSpinnerAndChangeColor(UploadRenderIdPhotoBtn, "id"); // Remove spinner and change color
                    }
                }, 2000);
            }

            document.getElementById("ID-photo-save").addEventListener("click", function () {
                if (saveBtn === "UploadPic") {
                    saveUploadedPhoto();
                } else if (saveBtn === "CameraID") {
                    saveCameraPhoto();
                }
            });
        }

    </script>
    <!--Upload Signture-->
    <script>
        //variables//
        let saveSignatureBtn = null;
        var imgeURL;
        document.getElementById("UploadSigntaurePic").addEventListener("click", function () { saveSignatureBtn = "UploadSigntaurePic"; });
        document.getElementById("WriteSignature").addEventListener("click", function () { saveSignatureBtn = "WriteSignature"; });
        const uploadContainer = document.querySelector(".upload-container");
        const mainContainer = document.querySelector(".main-container");
        const UploadSigntaurePic = document.getElementById("UploadSigntaurePic");
        const imageUpload = document.getElementById("imageUpload");
        var btnSignture = document.getElementById('check_btn_load_Signture');
        const originalContentBtnSignture = document.querySelector("#check_btn_load_Signture").innerHTML;
        var imgeURL;
        const uploadedImg = null;
        //

        UploadSigntaurePic.addEventListener("click", function () {
            imageUpload.click();
        });

        imageUpload.addEventListener("change", function () {
            const file = imageUpload.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const imageURL = e.target.result;
                    const previewImage = document.createElement("img");
                    previewImage.classList.add("preview-image");
                    previewImage.src = imageURL;
                    previewImage.id = "signatureImage";
                    imgeURL = imageURL;
                    mainContainer.innerHTML =
                        '<i class="fa-regular fa-circle-xmark"  style="cursor: pointer;"></i>';
                    uploadContainer.innerHTML = "";
                    uploadContainer.appendChild(previewImage);
                    uploadContainer.classList.add("previewing");
                };
                reader.readAsDataURL(file);
            }
        });

        removeSignatureImg.addEventListener("click", function (event) {
            event.preventDefault();
            if (uploadContainer.firstChild) {
                uploadContainer.innerHTML = "";
                mainContainer.innerHTML = "";
                uploadContainer.classList.remove("previewing");
                uploadContainer.innerHTML =
                    '<img class="upload-icon" src="/BranchSys/CreateContract/img/Rectangle 144.png" alt="Upload Icon"><p>' + '@localizer["UploadSignture"]' + '</p>';
            }
        });

        function CheckSigntureImgForRenter() {
            // Clear existing content and remove the 'previewing' class by default
            uploadContainer.innerHTML = '<img class="upload-icon" src="/BranchSys/CreateContract/img/Rectangle 144.png" alt="Upload Icon"><p>' + '@localizer["UploadSignture"]' + '</p>';
            uploadContainer.classList.remove('previewing');

            // Check if RenterInformation is not null or undefined and has a signture property
            if (RenterInformation && RenterInformation.signture) {
                removeSpinnerAndChangeColor(btnSignture, "signature");
                uploadContainer.innerHTML = '<img class="preview-image" src="' + RenterInformation.signture.replace("~", "") + '">';
                uploadContainer.classList.add('previewing');
            }
        }
        btnSignture.addEventListener('click', function (event) {
            event.preventDefault();
            CheckSigntureImgForRenter();
        });
    </script>
    <!--Write Signture-->
    <script>
        const WriteSignature = document.getElementById("WriteSignature");
        WriteSignature.addEventListener("click", function () {
            uploadContainer.innerHTML = "";
            mainContainer.innerHTML = "";
            uploadContainer.innerHTML =
                '<canvas id="canvas" width="200" height="200" class="mb-2"></canvas>';
            var canvas = document.getElementById("canvas");
            var ctx = canvas.getContext("2d");
            ctx.lineWidth = 4;

            var drawing = false;
            var prevX = 0;
            var prevY = 0;
            var currX = 0;
            var currY = 0;

            function drawLine(x0, y0, x1, y1) {
                ctx.beginPath();
                ctx.moveTo(x0, y0);
                ctx.lineTo(x1, y1);
                ctx.stroke();
                ctx.closePath();
            }

            canvas.addEventListener("mousedown", handleMouseDown, false);
            canvas.addEventListener("mousemove", handleMouseMove, false);
            canvas.addEventListener("mouseup", handleMouseUp, false);

            canvas.addEventListener("touchstart", handleTouchStart, false);
            canvas.addEventListener("touchmove", handleTouchMove, false);
            canvas.addEventListener("touchend", handleTouchEnd, false);

            function handleMouseDown(e) {
                drawing = true;
                prevX = e.clientX - canvas.getBoundingClientRect().left;
                prevY = e.clientY - canvas.getBoundingClientRect().top;
            }

            function handleMouseMove(e) {
                if (!drawing) return;
                currX = e.clientX - canvas.getBoundingClientRect().left;
                currY = e.clientY - canvas.getBoundingClientRect().top;

                drawLine(prevX, prevY, currX, currY);
                prevX = currX;
                prevY = currY;
            }

            function handleMouseUp() {
                drawing = false;
            }

            function handleTouchStart(e) {
                drawing = true;
                prevX = e.touches[0].clientX - canvas.getBoundingClientRect().left;
                prevY = e.touches[0].clientY - canvas.getBoundingClientRect().top;
            }

            function handleTouchMove(e) {
                if (!drawing) return;
                currX = e.touches[0].clientX - canvas.getBoundingClientRect().left;
                currY = e.touches[0].clientY - canvas.getBoundingClientRect().top;

                drawLine(prevX, prevY, currX, currY);
                prevX = currX;
                prevY = currY;
            }

            function handleTouchEnd() {
                drawing = false;
            }
            // Clear the canvas
            // function clearCanvas() {
            //     ctx.clearRect(0, 0, canvas.width, canvas.height);
            // }

            // document.getElementById("clear").addEventListener("click", function () {
            //     clearCanvas();
            // });

        });
        // Save the written signature as an image
        function SaveWrittenSignature() {
            var canvas = document.getElementById("canvas");
            if (canvas) {
                var dataURL = canvas.toDataURL();
                var link = document.createElement("a");
                link.href = dataURL;
                var imgeURL = dataURL;
                $("#PicsignatureModal").modal("hide");
                return imgeURL;
            } else {
                return null;
            }
        }
        // Save the uploaded signature image
        function SaveUploadedSignature() {
            const img = document.getElementById("signatureImage");
            if (img) {
                const canvas = document.createElement("canvas");
                canvas.width = img.width;
                canvas.height = img.height;
                const context = canvas.getContext("2d");
                context.drawImage(img, 0, 0, canvas.width, canvas.height);
                const base64 = canvas.toDataURL("image/png");
                $("#PicsignatureModal").modal("hide");
                return base64;
            } else {
                return null;
            }
        }
    </script>
    <script>
        const imageSubmitBtn = document.getElementById('Save_Btn');
        imageSubmitBtn.addEventListener('click', function (event) {
            event.preventDefault();
            imgeURL = null;
            if (saveSignatureBtn === "UploadSigntaurePic") {
                imgeURL = SaveUploadedSignature();
            } else if (saveSignatureBtn === "WriteSignature") {
                imgeURL = SaveWrittenSignature();
            }
            if (!imgeURL) {
                $('#PicsignatureModal').modal('hide');
                //
                // toastr.error('@localizer["PleaseEnterPictureToast"]');
                return;
            }

            if (uploadContainer.firstChild) {
                uploadContainer.innerHTML = '';
                uploadContainer.classList.remove('previewing');
                uploadContainer.innerHTML = '<img class="upload-icon" src="/BranchSys/CreateContract/img/Rectangle 144.png" alt="Upload Icon"><p>' + '@localizer["UploadSignture"]' + '</p>';
            }

            $('#PicsignatureModal').modal('hide');
            // Show the spinner
            showSpinner(btnSignture);
            var CheckUpdateSigntureForRenter = updateRenterSignture(imgeURL);
            console.log("CheckUpdateSigntureForRenter", CheckUpdateSigntureForRenter);
            setTimeout(function () {
                $('#thirdPopupModal').modal('hide');
                if (CheckUpdateSigntureForRenter) {
                    removeSpinnerAndChangeColor(btnSignture, "signature"); // Remove spinner and change color
                    console.log("CheckUpdateSigntureForRenter", 000000000000);
                }
                else {

                    toastr.error('@localizer["SomethingWrongPleaseCallAdmin"]');
                }
            }, 2000);
        });
        async function updateRenterSignture(img) {
            if (RenterInformation != null && img) {
                RenterInformation.signture = img;
                $("#Contract_RenterInfo_CrMasRenterInformationSignature").val(img);
                console.log("img", img);
                return true;
            }
            return false;
        }
        // async function updateRenterSignture(img, renterId) {
        //     try {
        //         var data = await $.ajax({
        //             url: "/BS/Contract/UpdateSigntureForRenter",
        //             type: "POST",
        //             data: { img: img, renterId: renterId },
        //         });
        //         if (data) {
        //             RenterInformation.signture = data;
        //             console.log("data", data);
        //             return true; // Renter Updated Successfully
        //         }
        //     } catch (error) {
        //         return false; // Error occurred or Renter doesn't exist
        //     }
        //     return false; // Renter doesn't exist
        // }
    </script>
    <script>
        //////////////////////choose-adriver-display////////////////
        document.addEventListener("DOMContentLoaded", function () {
            $(".seacrh_icon_Renter").hide();
            $("#seacrh_icon_Driver").hide();
            $("#seacrh_icon_AddDriver").hide();
            $("#PrivateDriverDiv").hide();
            $("#RenterIsdriverDiv").hide();
            // Check if have driver or not
            var driverRadio1 = document.getElementById("RenterIsdriver");
            var driverRadio2 = document.getElementById("PrivateDriver");
            var dropdownContainer = document.getElementById("Private-Driver-select-Div");

            driverRadio1.addEventListener("click", function () {
                dropdownContainer.style.display = "none";
                driverRadio2.checked = false;
                $('#Private-Driver-selectt option:first').prop('selected', true);
            });

            driverRadio2.addEventListener("click", function () {
                if (this.checked) {
                    dropdownContainer.style.display = "block";
                    driverRadio1.checked = false;
                } else {
                    dropdownContainer.style.display = "none";
                }
            });
        });
        function ShowPrivateAndRenterIsDriver() {
            var driverCount = "@Model.Drivers.Count()";
            console.log("driverCount", driverCount);
            if (parseInt(driverCount) > 0) {
                $("#PrivateDriverDiv").show();
            }
            $("#RenterIsdriverDiv").show();
        }
    </script>
    <script>
        function getHijriDate(gregorianDate) {
            const formatter = new Intl.DateTimeFormat('en-TN-u-ca-islamic', {
                day: 'numeric',
                month: 'numeric',
                year: 'numeric'
            });
            return formatter.formatToParts(gregorianDate).reduce((acc, part) => {
                acc[part.type] = part.value;
                return acc;
            }, {});
        }
        const todayS = new Date();
        const currentGregorianYear = todayS.getFullYear() - 18; // خصم 18 سنة من الميلادي
        const currentGregorianMonth = todayS.getMonth() + 1;
        const currentGregorianDay = todayS.getDate();
        const hijriToday = getHijriDate(todayS);
        const currentHijriYear = parseInt(hijriToday.year, 10) - 18; // خصم 18 سنة من الهجري
        function populateGregorianDate(prefix) {
            const yearSelect = document.getElementById(`year${prefix}`);
            const monthSelect = document.getElementById(`month${prefix}`);
            const daySelect = document.getElementById(`day${prefix}`);

            yearSelect.innerHTML = '';
            monthSelect.innerHTML = '';
            daySelect.innerHTML = '';

            const startYear = 1900;
            for (let year = currentGregorianYear; year >= startYear; year--) {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                yearSelect.appendChild(option);
            }

            for (let month = 1; month <= 12; month++) {
                const option = document.createElement('option');
                option.value = month;
                option.textContent = month;
                monthSelect.appendChild(option);
            }

            function populateDays() {
                daySelect.innerHTML = '';
                const selectedYear = parseInt(yearSelect.value);
                const selectedMonth = parseInt(monthSelect.value);

                const daysInMonth = new Date(selectedYear, selectedMonth, 0).getDate();
                for (let day = 1; day <= daysInMonth; day++) {
                    const option = document.createElement('option');
                    option.value = day;
                    option.textContent = day;
                    daySelect.appendChild(option);
                }
            }

            yearSelect.value = currentGregorianYear;
            monthSelect.value = currentGregorianMonth;
            populateDays();
            daySelect.value = currentGregorianDay;
        }
        function populateHijriDate(prefix) {
            const yearSelect = document.getElementById(`year${prefix}`);
            const monthSelect = document.getElementById(`month${prefix}`);
            const daySelect = document.getElementById(`day${prefix}`);

            yearSelect.innerHTML = '';
            monthSelect.innerHTML = '';
            daySelect.innerHTML = '';

            const startHijriYear = 1300;
            for (let year = currentHijriYear; year >= startHijriYear; year--) {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                yearSelect.appendChild(option);
            }

            for (let month = 1; month <= 12; month++) {
                const option = document.createElement('option');
                option.value = month;
                option.textContent = month;
                monthSelect.appendChild(option);
            }

            function populateHijriDays() {
                daySelect.innerHTML = '';
                const selectedYear = parseInt(yearSelect.value, 10);
                const selectedMonth = parseInt(monthSelect.value, 10);

                const hijriDate = new Date(todayS);
                hijriDate.setFullYear(selectedYear);
                hijriDate.setMonth(selectedMonth - 1);
                hijriDate.setDate(1);

                let daysInMonth = 30;  // Default for Hijri month
                for (let day = 1; day <= daysInMonth; day++) {
                    const option = document.createElement('option');
                    option.value = day;
                    option.textContent = day;
                    daySelect.appendChild(option);
                }
            }

            yearSelect.value = currentHijriYear;
            monthSelect.value = parseInt(hijriToday.month, 10);
            populateHijriDays();
            daySelect.value = hijriToday.day;
        }
        function handleDateAndNationalityChange(prefix, nationalityFieldId) {
            const entityIdInput = document.getElementById(`Contract_${prefix}Info_CrMasRenterInformationId`);
            const inputValue = entityIdInput.value;
            const nationalityType = $(`#${nationalityFieldId}`);

            if (inputValue != null && inputValue !== "") {
                if (inputValue.startsWith('1')) {
                    nationalityType.val("1").change().prop("disabled", true);
                    populateHijriDate(prefix);
                } else if (inputValue.startsWith('2') || inputValue.startsWith('3') || inputValue.startsWith('4')) {
                    nationalityType.val(inputValue.charAt(0)).change().prop("disabled", true);
                    populateGregorianDate(prefix);
                } else {
                    nationalityType.val("").change().prop("disabled", false);
                    populateGregorianDate(prefix);
                }
            } else {
                $(`#year${prefix}, #month${prefix}, #day${prefix}`).empty();
                nationalityType.val("").change().prop("disabled", false);
            }
        }
        function handleNationalityByIdNumber(idNumberFieldId, nationalityFieldId, nationalityCodeFieldId,type) {
            const idNumberInput = document.getElementById(idNumberFieldId); // رقم الهوية
            const nationalityInput = document.getElementById(nationalityFieldId); // حقل الجنسية
            const nationalityCodeInput = document.getElementById(nationalityCodeFieldId); // حقل كود الجنسية
            const idNumber = idNumberInput.value.trim(); // قيمة رقم الهوية
            const firstDigit = idNumber.charAt(0); // أول رقم من رقم الهوية

            if (idNumber !== "") {
                if (firstDigit === "1") { // إذا كانت الهوية سعودية
                    // البحث عن الجنسية السعودية باستخدام المتغير الوطني المرسَل
                    const saudiNationality = nationalities.find(item => item.value === "1000000003");

                    if (saudiNationality) {
                        nationalityInput.value = saudiNationality.text; // تعيين الاسم
                        nationalityCodeInput.value = saudiNationality.value; // تعيين الكود
                    }

                    nationalityInput.disabled = true; // تعطيل الحقل
                } else if (firstDigit === "4") { // إذا كان الرقم الأول 4 (هويات محددة)
                    // تصفية الجنسيات التي تحتوي على NaqlGCC = "1"
                    const filteredNationalities = nationalities.filter(item => item.naqlGCC === "1");
                    console.log("filteredNationalities",filteredNationalities);

                    // تحديث قائمة الـ autocomplete مع الجنسيات المصفاة
                    updateNationalitiesList(filteredNationalities, type);
                    nationalityInput.disabled = false; // تمكين الحقل
                } else {
                    const filteredNationalities = nationalities.filter(item => item.value != "1000000003" && item.naqlGCC != "1");
                    console.log("filteredNationalities",filteredNationalities);

                    // تحديث قائمة الـ autocomplete مع الجنسيات المصفاة
            updateNationalitiesList(filteredNationalities, type);
                    nationalityInput.disabled = false; // تمكين الحقل لأي رقم هوية آخر
                }
            } else {
                nationalityInput.value = "";
                nationalityCodeInput.value = "";
                nationalityInput.disabled = false;
            }
        }
        function handleCodeCountryAndPhoneByIdNumber(idNumberFieldId, codeCountryId) {
            const idNumberInput = document.getElementById(idNumberFieldId); // رقم الهوية
            const codeCountryInput = document.getElementById(codeCountryId); // كود البلد
            const idNumber = idNumberInput.value.trim(); // قيمة رقم الهوية
            const firstDigit = idNumber.charAt(0); // أول رقم من رقم الهوية
            console.log("firstDigit",firstDigit);
            // إذا كان رقم الهوية يبدأ بـ "1" أو "2"
            if (idNumber !== "" && (firstDigit === "1" || firstDigit === "2")) {
                // ضبط كود البلد إلى "996" وتعطيل الحقل
                codeCountryInput.value = "966";
                codeCountryInput.disabled = true; // تعطيل الحقل
            } else {
                // إذا لم يكن الرقم يبدأ بـ "1" أو "2"، ترك الحقل قابل للتعديل
                codeCountryInput.disabled = false; // تمكين الحقل
            }
        }
        function handleEmailRequiredByIdNumber(idNumberFieldId, emailFieldId) {
            const idNumberInput = document.getElementById(idNumberFieldId); // رقم الهوية
            const emailInput = document.getElementById(emailFieldId); // حقل البريد الإلكتروني
            const idNumber = idNumberInput.value.trim(); // قيمة رقم الهوية
            const firstDigit = idNumber.charAt(0); // أول رقم من رقم الهوية

            // الحصول على الرسالة المترجمة من data-val-required
            const requiredMessage = emailInput.getAttribute('data-val-required');

            if (idNumber !== "" && (firstDigit === "3" || firstDigit === "4")) {
                // جعل حقل البريد الإلكتروني مطلوب إذا بدأ رقم الهوية بـ "3" أو "4"
                emailInput.setAttribute("required", "required");
                emailInput.setCustomValidity(requiredMessage); // تعيين الرسالة المخصصة

            } else {
                // إزالة خاصية required إذا لم يبدأ رقم الهوية بـ "3" أو "4"
                emailInput.removeAttribute("required");
                emailInput.setCustomValidity(""); // إزالة الرسالة المخصصة عند عدم تفعيل الحقل
            }
        }
        // function changeCodeCountryAndPhoneForRenterStartWith(renterInfoId) {
        //     let phoneInput = $("#CheckModal-PhoneInput");
        //     if (renterInfoId.startsWith('1') || renterInfoId.startsWith('2')) {
        //         $("#country-code").val("966").prop("disabled", true);
        //         // Set the phone input value to start with 5
        //         let mobileNumber = phoneInput.val();

        //         if (!mobileNumber.startsWith('5')) {
        //             phoneInput.val('5' + mobileNumber);
        //         }
        //         // Prevent deleting the first digit (5)
        //         phoneInput.on('input', function () {
        //             let currentValue = $(this).val();
        //             // Always ensure it starts with '5'
        //             if (!currentValue.startsWith('5')) {
        //                 $(this).val('5' + currentValue.slice(1)); // Restore '5' as the first digit
        //             }
        //         });
        //     } else {
        //         $("#country-code").prop("disabled", false);
        //         phoneInput.off('input');
        //     }

        // }

    </script>
    <script>
        var modelPersonal = {
            renterID: null,
            renterIDType: null,
            idCopyNumber: null,
            personalArName: null,
            personalEnName: null,
            personalArNationality: null,
            personalEnNationality: null,
            nationalityCode: null,
            genderCode: null,
            day: null,
            month: null,
            year: null,
            personalArGender: null,
            personalEnGender: null,
            professionsCode: null,
            personalArProfessions: null,
            personalEnProfessions: null,
            personalEmail: null,
            mobileNumber: null,
            keyCountry: null,
            birthDate: null,
            expiryIdDate: null,
            balance: 0,
            availableBalance: 0,
            reservedBalance: 0,
            licenseType: null,
            licenseCode: null,
            licenseArName: null,
            licenseEnName: null,
            licenseIssuedDate: null,
            licenseExpiryDate: null,
            employerCode: null,
            employerArName: null,
            employerEnName: null,
            cityCode: null,
            cityAr: null,
            cityEn: null,
            postArNameConcenate: null,
            postEnNameConcenate: null,
            postEnDistictName: null,
            postArDistictName: null,
            firstVisit: null,
            lastContract: null,
            contractCount: null,
            rentalDays: null,
            kMCut: null,
            amountsTraded: null,
            evaluation: null,
            arDealingMechanism: null,
            enDealingMechanism: null,
            arMembership: null,
            enMembership: null,
            signture: null,
            taxNo: null,
            countContracts: null,
            activeContractsCount: null,
            closedContractsCount: null,
            reasons: null
        };
        var CheckIfConfirmByPhone = false;
        var CheckIfRenterIdChecked = false;
        var CheckIfDriverIdChecked = false;
        var CheckIfAddDriverIdChecked = false;
        var CheckIfDriverIdSameRenterId = false;
        var CheckIfAddDriverIdSameRenterOrDriverId = false;
        var RenterInformation = { ...modelPersonal };
        var DriverInformation = { ...modelPersonal };
        var AddDriverInformation = { ...modelPersonal };
        var PrivateDriverInformation;
        var SerialNumberOfCar;
        var PriceNumberOfCar;
        var CarInformation;
        var CarInformationForContract;
        var CarChoices;
        var CarAdditionals;
        var CarAdvantages;
        var CarCheckUp;
        var AdvantagesValue;
        var RenterBalance;
        var phoneForRenter;
        var codeCountryForRenter;
        var phoneForDriver;
        var codeCountryForDriver;
        var phoneForAddDriver;
        var codeCountryForAddDriver;
        var DateToDetermineMaximumDays;

        // Get Information Using ID and Type Who get it
        async function GetPersonInformation(Id, type) {
            try {
                var data = await $.ajax({
                    url: "/BS/Contract/GetRenter",
                    type: "GET",
                    data: { RenterId: Id },
                });
                if (type === "Renter") {
                    RenterInformation = data;
                }
                else if (type === "Driver") {
                    DriverInformation = data;
                }
                else if (type === "AddDriver") {
                    AddDriverInformation = data;
                }
                else {
                    PrivateDriverInformation = data;
                }

                console.log(type + "Information", data)

                if (data != null) {
                    return true; // Renter exists
                }
            } catch (error) {

                toastr.error('@localizer["SomethingWrongPleaseCallAdmin"]');
                return false; // Error occurred or Renter doesn't exist
            }
            return false; // Renter doesn't exist
        }
        // For PrivateDriver
        async function GetPrivateDriverInformation(id) {
            try {
                var data = await $.ajax({
                    url: "/BS/Contract/GetPrivateDriverInfo",
                    type: "GET",
                    data: { id: id },
                });

                PrivateDriverInformation = data;
                console.log("PrivateDriverInformation", PrivateDriverInformation);
                if (data != null) {
                    return true; // Renter exists
                }
            } catch (error) {

                toastr.error('@localizer["SomethingWrongPleaseCallAdmin"]');
                return false; // Error occurred or Renter doesn't exist
            }
            return false; // Renter doesn't exist
        }



        // Example usage
        var randomNumberRenter;
        var randomNumberDriver;
        var randomNumberAddDriver;
        function generateRandomNumber() {
            // Generate a random number between 0 and 999999
            const randomNumber = Math.floor(Math.random() * 1000000);
            // Convert it to a string and pad with zeros to ensure length is 6
            return randomNumber.toString().padStart(6, '0');
        }
        // Function to send a message to WhatsApp
        async function sendMessageToWhatsApp(randomNumber, numberPhone) {
            const toNumber = numberPhone; // The recipient's phone number
            const fromNumber = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJudW1iZXIiOiJKYXNlcjExIiwic2VyaWFsIjoiMTk5ZmUzYjFlYjc2MjNlIiwiaWF0IjoxNzA3NzMxNjI4LCJleHAiOjE3OTQxMzE2Mjh9.O_4RW4vYAays1ZL7D-OlOQh6C5P5xVYrT3pZ2Oi9Yak"; // Your WhatsApp API token
            const messageText = '@localizer["VerificationCode"]' + " " + randomNumber + " BnanSC"; // The message text with the random code
            const url = `https://business.enjazatik.com/api/v1/send-message?number=${encodeURIComponent(toNumber)}&message=${encodeURIComponent(messageText)}&token=${encodeURIComponent(fromNumber)}`;
            try {
                const response = await fetch(url, { method: 'GET' });
                const result = await response.json();
            } catch (error) {
                console.error('Error sending message:', error);
            }
        }
        document.getElementById("CheckRenter").addEventListener("click", async function () {
            CheckIfRenterIdChecked = await checkPerson("Renter", SetInformationForRenter, true);
        });
        document.getElementById("CheckDriver").addEventListener("click", async function () {
            CheckIfDriverIdChecked = await checkPerson("Driver", SetInformationForDriver, CheckIfDriverIdSameRenterId);
        });
        document.getElementById("CheckAddDriver").addEventListener("click", async function () {
            CheckIfAddDriverIdChecked = await checkPerson("AddDriver", SetInformationForAddDriver, CheckIfAddDriverIdSameRenterOrDriverId);
        });
        async function checkPerson(type, SetPersonInfoFunction, checkIdIsExist) {
            if ($("#msform").valid()) {
                if (!checkIdIsExist) {
                    $(`#error${type}MustNotRenterId`).text("@localizer["DriverIdExistRenter"]")
                    return false;
                }
                $(`#error${type}MustNotRenterId`).text("")
                var personID = document.getElementById(`Contract_${type}Info_CrMasRenterInformationId`).value;
                console.log(`${type}ID`, personID);
                await GetPersonInformation(personID, type);
                SetPersonInfoFunction();
                HandleInputAfterChecks(type);
                handleNationalityByIdNumber(`Contract_${type}Info_CrMasRenterInformationId`, `nationality-${type}`, `nationality-${type}-code`,type);
                handleCodeCountryAndPhoneByIdNumber(`Contract_${type}Info_CrMasRenterInformationId`, `countryCode${type}`);
                handleEmailRequiredByIdNumber(`Contract_${type}Info_CrMasRenterInformationId`, `Email-${type}`);
                return true;
            }
        }
        function HandleInputAfterChecks(type) {
            var hiddenInputRow = document.querySelector(`.hidden-input-row-${type}`);
            hiddenInputRow.style.display = "block";
            // $(`#day${type}`).prop('disabled', true);
            // $(`#month${type}`).prop('disabled', true);
            // $(`#year${type}`).prop('disabled', true);
            $(`#Check${type}`).hide();
            // استدعاء ShowPrivateAndRenterIsDriver فقط عندما يكون النوع "renter"
            if (type == "Renter") {
                ShowPrivateAndRenterIsDriver();
            }
        }


        // Renter
        //Restart all values
        $(document).ready(function () {
            var initialRenterID = $('#Contract_RenterInfo_CrMasRenterInformationId').val();
            $('#Contract_RenterInfo_CrMasRenterInformationId').on('input', function () {
                // Handle Date and NationalityType For Every Renter
                handleDateAndNationalityChange("Renter", "nationality-type");
                // Check if the value has changed
                if ($(this).val() !== initialRenterID) {
                    // Clear previous data and style
                    RenterInformation = null;
                    EmptyRenterInput();
                    $("#dayRenter").prop('disabled', false);
                    $("#monthRenter").prop('disabled', false);
                    $("#yearRenter").prop('disabled', false);
                    $(".hidden-input-row-Renter").hide();
                    $("#PrivateDriverDiv").hide();
                    $("#RenterIsdriverDiv").hide();
                    $("#seacrh_icon_Renter").hide();
                    $("#CheckRenter").show();
                    EmptyDriverRequiredInputs();
                    EmptyAddDriverRequiredInputs();
                    CheckIfRenterIdChecked = false;
                    CheckIfDriverIdChecked = false;
                    CheckIfAddDriverIdChecked = false;
                    clearPaymentData();
                    // Update the initial value of RenterID
                    initialRenterID = $(this).val();
                }
            });
        });
        function EmptyRenterInput() {
            // $("#dayRenter").prop('disabled', true);
            // $("#monthRenter").prop('disabled', true);
            // $("#yearRenter").prop('disabled', true);
            $("#AR-name-tenant").val('');
            $("#EN-name-tenant").val('');
            $("#AR-adress-tenant").val('');
            $("#EN-adress-tenant").val('');
            $("#Region-city-tenant-code").val('');
            $("#Region-city-tenant").val('');
            $("#tenant-workplace-code").val('');
            $("#Profession-tenant").val('');
            $("#Email-Renter").val('');
            $("#Reasons-tenant").val('');
            $(".requird-field").text('');
            $('.genderRenter[type="radio"]').prop('checked', false);
            var idType = document.getElementById("nationality-type").value;
            if (parseInt(idType) > 5) {
                // Disable all input fields
                $('.genderRenter[type="radio"]').prop('checked', false);
                // Remove the div with id 'divGenderRenter'
                $('#divGenderRenter').remove();
            }
            $("#nationality-Renter").val('');
            $("#tenant-workplace").val('');
            $("#Region-city-tenant").val('');
            document.getElementById("PrivateDriver").checked = false;
            document.getElementById("RenterIsdriver").checked = false;
            // Auto Focus
            if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                setTimeout(() => {
                    $("#EN-name-tenant").focus();
                }, 500);
            } else {
                setTimeout(() => {
                    $("#AR-name-tenant").focus();
                }, 500);
            }
        }
        function SetInformationForRenter() {
            if (RenterInformation != null) {
                document.getElementById("AR-name-tenant").value = RenterInformation.personalArName;
                document.getElementById("EN-name-tenant").value = RenterInformation.personalEnName;
                document.getElementById("AR-adress-tenant").value = RenterInformation.postArDistictName;
                document.getElementById("EN-adress-tenant").value = RenterInformation.postEnDistictName;
                document.getElementById("Region-city-tenant-code").value = RenterInformation.cityCode;
                document.getElementById("nationality-Renter-code").value = RenterInformation.nationalityCode;
                document.getElementById("tenant-workplace-code").value = RenterInformation.employerCode;
                document.getElementById("Profession-tenant").value = RenterInformation.professionsCode;
                document.getElementById("Email-Renter").value = RenterInformation.personalEmail;
                document.getElementById("Reasons-tenant").value = RenterInformation.reasons;
                document.getElementById("Contract_RenterInfo_OldSignature").value = RenterInformation.signture;
                document.getElementById("mobileRenter").value = RenterInformation.mobileNumber;
                document.getElementById("countryCodeRenter").value = RenterInformation.keyCountry;
                // Set the selected radio button by id
                var radioButtonId = "genderRenter-" + RenterInformation.genderCode;
                $("#" + radioButtonId).prop('checked', true);
                var idType = document.getElementById("nationality-type").value;
                if (parseInt(idType) > 5) {
                    // Disable all input fields
                    $('.genderRenter[type="radio"]').prop('checked', false);
                    // Remove the div with id 'divGenderRenter'
                    $('#divGenderRenter').remove();
                    $('#RenterIsdriver').remove();
                }
                if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                    document.getElementById("nationality-Renter").value = RenterInformation.personalEnNationality;
                    if (RenterInformation.employerCode != "1800000001" && RenterInformation.employerCode != "1800000002") {
                        document.getElementById("tenant-workplace").value = RenterInformation.employerEnName;
                    } document.getElementById("Region-city-tenant").value = RenterInformation.cityEn;
                    setTimeout(() => {
                        $("#EN-name-tenant").focus();
                    }, 500);
                }
                else {
                    document.getElementById("nationality-Renter").value = RenterInformation.personalArNationality;
                    if (RenterInformation.employerCode != "1800000001" && RenterInformation.employerCode != "1800000002") {
                        document.getElementById("tenant-workplace").value = RenterInformation.employerArName;
                    } document.getElementById("Region-city-tenant").value = RenterInformation.cityAr;
                    setTimeout(() => {
                        $("#AR-name-tenant").focus();
                    }, 500);
                }

                // Auto Focus
                CheckIfRenterHaveContractsBefore();

                // This update From api tajeer
                document.getElementById("Contract_RenterInfo_CrMasRenterInformationExpiryIdDate").value = RenterInformation.expiryIdDate;
                document.getElementById("Contract_RenterInfo_CrMasRenterInformationCopyId").value = RenterInformation.idCopyNumber;
                document.getElementById("Contract_RenterInfo_CrMasRenterInformationDrivingLicenseNo").value = RenterInformation.licenseCode;
                document.getElementById("Contract_RenterInfo_CrMasRenterInformationDrivingLicenseType").value = RenterInformation.licenseType;
                document.getElementById("Contract_RenterInfo_CrMasRenterInformationExpiryDrivingLicenseDate").value = RenterInformation.licenseExpiryDate;
                document.getElementById("renterIdTypeCode").value = RenterInformation.renterIDType;
            }
            else {
                EmptyRenterInput();
            }
            ShowPrivateAndRenterIsDriver();
        }
        function SetInformationForRenterIfNotExist() {
            // Personal Information
            if (RenterInformation == null) {
                RenterInformation = { ...modelPersonal };
            }
            RenterInformation.renterID = document.getElementById("Contract_RenterInfo_CrMasRenterInformationId").value;
            RenterInformation.renterIDType = document.getElementById("nationality-type").value;
            // RenterInformation.birthDate = document.getElementById("birth-date").value;
            RenterInformation.day = document.getElementById("dayRenter").value;
            RenterInformation.month = document.getElementById("monthRenter").value;
            RenterInformation.year = document.getElementById("yearRenter").value;
            RenterInformation.personalArName = document.getElementById("AR-name-tenant").value;
            RenterInformation.personalEnName = document.getElementById("EN-name-tenant").value;

            RenterInformation.postArDistictName = document.getElementById("AR-adress-tenant").value;
            RenterInformation.postEnDistictName = document.getElementById("EN-adress-tenant").value;

            RenterInformation.postArNameConcenate = document.getElementById("Region-city-tenant").value;
            if (RenterInformation.postArDistictName) {
                RenterInformation.postArNameConcenate += " - " + RenterInformation.postArDistictName;
            }

            RenterInformation.postEnNameConcenate = document.getElementById("Region-city-tenant").value;
            if (RenterInformation.postEnDistictName) {
                RenterInformation.postEnNameConcenate += " - " + RenterInformation.postEnDistictName;
            }

            RenterInformation.cityCode = document.getElementById("Region-city-tenant-code").value;
            RenterInformation.nationalityCode = document.getElementById("nationality-Renter-code").value;
            RenterInformation.employerCode = document.getElementById("tenant-workplace-code").value;
            RenterInformation.professionsCode = document.getElementById("Profession-tenant").value;
            RenterInformation.personalEmail = document.getElementById("Email-Renter").value;
            RenterInformation.keyCountry = document.getElementById("countryCodeRenter").value;
            RenterInformation.mobileNumber = document.getElementById("mobileRenter").value;
            RenterInformation.arMembership = "مشترك";
            RenterInformation.enMembership = "Mutual";
            RenterInformation.reasons = document.getElementById("Reasons-tenant").value;

            // Handle the selected radio button for gender
            var selectedGenderRadio = document.querySelector('input[name="Contract.RenterInfo.CrMasRenterInformationGender"]:checked');
            if (selectedGenderRadio) {
                RenterInformation.genderCode = selectedGenderRadio.value;
                RenterInformation.personalEnGender = selectedGenderRadio.getAttribute('data-en') || '';
                RenterInformation.personalArGender = selectedGenderRadio.getAttribute('data-ar') || ''; // Defaults to an empty string if null or empty
            }

            // Handle the idType and disable inputs if necessary
            var idType = document.getElementById("nationality-type").value;
            if (parseInt(idType) > 5) {
                $('.genderRenter[type="radio"]').prop('checked', false);
                $('#divGenderRenter').remove();
                $('#RenterIsdriver').remove();
            }

            // Handle culture-specific settings
            if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                RenterInformation.personalEnNationality = document.getElementById("nationality-Renter").value;
                RenterInformation.employerEnName = document.getElementById("tenant-workplace").value;
                RenterInformation.cityEn = document.getElementById("Region-city-tenant").value;
                // setTimeout(() => {
                //     $("#EN-name-tenant").focus();
                // }, 500);
            } else {
                RenterInformation.personalArNationality = document.getElementById("nationality-Renter").value;
                RenterInformation.employerArName = document.getElementById("tenant-workplace").value;
                RenterInformation.cityAr = document.getElementById("Region-city-tenant").value;
                // setTimeout(() => {
                //     $("#AR-name-tenant").focus();
                // }, 500);
            }
            ShowPrivateAndRenterIsDriver();
            console.log("RenterInformation", RenterInformation);
        }
        function CheckIfRenterHaveContractsBefore() {
            console.log("countContracts", RenterInformation.countContracts);
            if (RenterInformation != null && RenterInformation.countContracts > 0) {
                console.log("RenterInformation", RenterInformation);
                $("#seacrh_icon_Renter").show();

                var firstVisitDate = new Date(RenterInformation.firstVisit);
                var lastContractDate = new Date(RenterInformation.lastContract);
                var formattedFirstVisit = firstVisitDate.getFullYear() + '/' + (firstVisitDate.getMonth() + 1).toString().padStart(2, '0') + '/' + firstVisitDate.getDate().toString().padStart(2, '0');
                var formattedLastContract = lastContractDate.getFullYear() + '/' + (lastContractDate.getMonth() + 1).toString().padStart(2, '0') + '/' + lastContractDate.getDate().toString().padStart(2, '0');


                if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                    $("#DealingMechanism").text(RenterInformation.enDealingMechanism);
                    $("#Membership").text(RenterInformation.enMembership);
                }
                else {
                    $("#DealingMechanism").text(RenterInformation.arDealingMechanism);
                    $("#Membership").text(RenterInformation.arMembership);
                }
                $("#FirstVisit").text(formattedFirstVisit);
                $("#LastContract").text(formattedLastContract);
                $("#ActiveContractsCount").text(RenterInformation.activeContractsCount);
                $("#ClosedContractsCount").text(RenterInformation.closedContractsCount);
                $("#RentalDays").text(RenterInformation.rentalDays);
                $("#KMCut").text(RenterInformation.kmCut.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 }));
                $("#AmountsTraded").text(RenterInformation.amountsTraded.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                $("#BalanceRenter").text(RenterInformation.balance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                $("#ReservedBalance").text(RenterInformation.reservedBalance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                $("#AvailableBalance").text(RenterInformation.availableBalance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            }
        }

        //Restart Driver values
        $(document).ready(function () {
            var initialRenterID = $('#Contract_DriverInfo_CrMasRenterInformationId').val();
            $('#Contract_DriverInfo_CrMasRenterInformationId').on('input', function () {
                // Check if the value has changed
                if ($(this).val() !== initialRenterID) {
                    // Clear previous data and style
                    CheckIfDriverIdSameRenterId = true;
                    $("#errorDriverMustNotRenterId").text("");
                    EmptyDriverInput();
                    EmptyAddDriverRequiredInputs();
                    DriverInformation = null;
                    AddDriverInformation = null;
                    CheckIfDriverIdChecked = false;
                    CheckIfAddDriverIdChecked = false;
                    $(".requird-field").text('');
                    $(".hidden-input-row-Driver").hide();
                    $("#seacrh_icon_Driver").hide();
                    $("#CheckDriver").show();
                    $("#dayDriver").prop('disabled', false);
                    $("#monthDriver").prop('disabled', false);
                    $("#yearDriver").prop('disabled', false);
                    $("#nationality-type-driver").val("");
                    $("#nationality-type-driver").prop('disabled', false);
                    clearPaymentData();
                    //Check If driver have the same renter id
                    if ($(this).val() == $("#Contract_RenterInfo_CrMasRenterInformationId").val()) {
                        CheckIfDriverIdSameRenterId = false;
                        $("#errorDriverMustNotRenterId").text("@localizer["DriverIdExistRenter"]")
                        $("#dayDriver").empty();
                        $("#monthDriver").empty();
                        $("#yearDriver").empty();
                        return;
                    }
                    handleDateAndNationalityChange("Driver", "nationality-type-driver");
                    // Update the initial value of RenterID
                    initialRenterID = $(this).val();
                }
            });
        });
        function EmptyDriverInput() {
            // $("#dayDriver").prop('disabled', true);
            // $("#monthDriver").prop('disabled', true);
            // $("#yearDriver").prop('disabled', true);
            $("#AR-name-driver").val('');
            $("#EN-name-driver").val('');
            $("#AR-adress-driver").val('');
            $("#EN-adress-driver").val('');
            $("#Region-city-driver-code").val('');
            $("#Region-city-driver").val('');
            $("#driver-workplace-code").val('');
            $("#Profession-driver").val('');
            $("#Email-Driver").val('');
            $("#Reasons-driver").val('');
            $("#licence-driver-number").val("");
            $("#licence-driver-type").val("");
            $("#ExpiryDrivingLicenseDate-driver").val("");
            $("#seacrh_icon_Driver").hide();
            $('.genderDriver[type="radio"]').prop('checked', false);
            var idType = document.getElementById("nationality-type-driver").value;
            if (parseInt(idType) > 5) {
                // Disable all input fields
                $('.genderDriver[type="radio"]').prop('checked', false);
                // Remove the div with id 'divGenderRenter'
                $('#divGenderDriver').remove();
            }
            $("#nationality-Driver").val('');
            $("#driver-workplace").val('');
            $("#Region-city-driver").val('');
            document.getElementById("addational-driver").checked = false;
            // Auto Focus
            if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                setTimeout(() => {
                    $("#EN-name-driver").focus();
                }, 500);
            } else {
                setTimeout(() => {
                    $("#AR-name-driver").focus();
                }, 500);
            }
        }
        function EmptyDriverRequiredInputs() {
            // setDateForInputField("birth-date-driver", "");
            $("#birth-date-driver").val("");
            $("#nationality-type-driver").val('');
            $("#Contract_DriverInfo_CrMasRenterInformationId").val('');
            $(".hidden-input-row-Driver").hide();
            DriverInformation = null;
            EmptyDriverInput();
        }
        function disableAllInputsForDriver() {
            const fieldset = document.querySelector('.disable-all-inputs');
            const inputs = fieldset.querySelectorAll('input, select,radio');
            inputs.forEach(input => {
                // Apply readonly and enable state to all inputs except hidden inputs, textareas, and buttons
                if (input.tagName.toLowerCase() === 'select') {
                    input.disabled = true; // Make select non-interactive
                } else if (input.type !== 'hidden' && input.tagName.toLowerCase() !== 'textarea' && input.type !== 'button' && input.type !== 'submit') {
                    input.readOnly = true; // Make input non-editable
                    input.disabled = true; // Ensure input is not disabled
                }
                // Special case for specific inputs
                if (input.id === 'licence-driver-number' || input.id === 'ExpiryDrivingLicenseDate-driver' || input.id === 'licence-driver-type' || input.id === 'addational-driver') {
                    input.readOnly = false;
                    input.disabled = false;
                }
            });
            $("#CheckDriver").hide();
            $(".hidden-input-row-Driver").show();
        }
        function enableAllInputsForDriver() {
            const fieldset = document.querySelector('.disable-all-inputs');
            const inputs = fieldset.querySelectorAll('input, select, radio');
            inputs.forEach(input => {
                // Apply readOnly and enabled state to all inputs except hidden inputs, textareas, and buttons
                if (input.tagName.toLowerCase() === 'select') {
                    input.disabled = false; // Make select interactive
                } else if (input.type !== 'hidden' && input.tagName.toLowerCase() !== 'textarea' && input.type !== 'button' && input.type !== 'submit') {
                    input.readOnly = false; // Make input editable
                    input.disabled = false; // Ensure input is not disabled
                }
                // Special case for specific inputs
                if (input.id === 'licence-driver-number' || input.id === 'ExpiryDrivingLicenseDate-driver' || input.id === 'licence-driver-type') {
                    input.readOnly = false;
                    input.disabled = false;
                }
            });
            $(".hidden-input-row-Driver").hide();
            $("#CheckDriver").show();
        }
        function SetInformationForDriver() {
            if (DriverInformation != null) {
                document.getElementById("AR-name-driver").value = DriverInformation.personalArName;
                document.getElementById("EN-name-driver").value = DriverInformation.personalEnName;
                document.getElementById("AR-adress-driver").value = DriverInformation.postArDistictName;
                document.getElementById("EN-adress-driver").value = DriverInformation.postEnDistictName;
                document.getElementById("nationality-Drivercode").value = DriverInformation.nationalityCode;
                document.getElementById("Region-city-driver-code").value = DriverInformation.cityCode;
                document.getElementById("driver-workplace-code").value = DriverInformation.employerCode;
                document.getElementById("Profession-driver").value = DriverInformation.professionsCode;
                document.getElementById("Email-Driver").value = DriverInformation.personalEmail;
                document.getElementById("licence-driver-number").value = DriverInformation.licenseCode;
                document.getElementById("licence-driver-type").value = DriverInformation.licenseType;
                document.getElementById("ExpiryDrivingLicenseDate-driver").value = DriverInformation.licenseExpiryDate ? DriverInformation.licenseExpiryDate.split('T')[0] : '';
                document.getElementById("mobileDriver").value = DriverInformation.mobileNumber;
                document.getElementById("countryCodeDriver").value = DriverInformation.keyCountry;
                // Set the selected radio button by id
                var radioButtonId = "genderDriver-" + DriverInformation.genderCode;
                $("#" + radioButtonId).prop('checked', true);
                var idType = document.getElementById("nationality-type-driver").value;
                if (parseInt(idType) > 5) {
                    // Disable all input fields
                    $('.genderDriver[type="radio"]').prop('checked', false);
                    // Remove the div with id 'divGenderRenter'
                    $('#divGenderDriver').remove();
                }
                if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                    document.getElementById("nationality-Driver").value = DriverInformation.personalEnNationality;
                    if (DriverInformation.employerCode != "1800000001" && DriverInformation.employerCode != "1800000002") {
                        document.getElementById("driver-workplace").value = DriverInformation.employerEnName;
                    }
                    document.getElementById("Region-city-driver").value = DriverInformation.cityEn;
                    setTimeout(() => {
                        $("#EN-name-driver").focus();
                    }, 500);
                }
                else {
                    document.getElementById("nationality-Driver").value = DriverInformation.personalArNationality;
                    if (DriverInformation.employerCode != "1800000001" && DriverInformation.employerCode != "1800000002") {
                        document.getElementById("driver-workplace").value = DriverInformation.employerArName;
                    }
                    document.getElementById("Region-city-driver").value = DriverInformation.cityAr;
                    setTimeout(() => {
                        $("#AR-name-driver").focus();
                    }, 500);
                }
                // Auto Focus
                CheckIfDriverHaveContractsBefore();
                // This update From api tajeer
                document.getElementById("Contract_DriverInfo_CrMasRenterInformationExpiryIdDate").value = DriverInformation.expiryIdDate;
                document.getElementById("Contract_DriverInfo_CrMasRenterInformationCopyId").value = DriverInformation.idCopyNumber;
                document.getElementById("driverIdTypeCode").value = DriverInformation.renterIDType;

            }
            else {
                EmptyDriverInput();
            }
        }
        function SetRenterIsDriverInformation() {
            // Copy tenant information to driver information
            DriverInformation = { ...RenterInformation };

            // Map each property from DriverInformation to the corresponding element in the DOM
            document.getElementById("Contract_DriverInfo_CrMasRenterInformationId").value = DriverInformation.renterID;
            document.getElementById("nationality-type-driver").value = DriverInformation.renterIDType;
            // From Tajeer Api
            document.getElementById("driverIdTypeCode").value = DriverInformation.renterIDType;
            /////////////////
            document.getElementById("AR-name-driver").value = DriverInformation.personalArName;
            document.getElementById("EN-name-driver").value = DriverInformation.personalEnName;
            addOptionAndSelect("dayDriver", DriverInformation.day);
            addOptionAndSelect("monthDriver", DriverInformation.month);
            addOptionAndSelect("yearDriver", DriverInformation.year);

            document.getElementById("AR-adress-driver").value = DriverInformation.postArDistictName;
            document.getElementById("EN-adress-driver").value = DriverInformation.postEnDistictName;

            document.getElementById("nationality-Driver-code").value = DriverInformation.nationalityCode;
            document.getElementById("Region-city-driver-code").value = DriverInformation.cityCode;
            document.getElementById("driver-workplace-code").value = DriverInformation.employerCode;
            document.getElementById("Profession-driver").value = DriverInformation.professionsCode;
            document.getElementById("Email-Driver").value = DriverInformation.personalEmail;
            document.getElementById("nationality-Driver").value = DriverInformation.personalArNationality || DriverInformation.personalEnNationality;
            document.getElementById("driver-workplace").value = DriverInformation.employerArName || DriverInformation.employerEnName;
            document.getElementById("Region-city-driver").value = DriverInformation.cityAr || DriverInformation.cityEn;
            document.getElementById("mobileDriver").value = DriverInformation.mobileNumber
            document.getElementById("countryCodeDriver").value = DriverInformation.keyCountry
            document.getElementById("licence-driver-number").value = DriverInformation.licenseCode;
            document.getElementById("licence-driver-type").value = DriverInformation.licenseType;
            document.getElementById("ExpiryDrivingLicenseDate-driver").value = DriverInformation.licenseExpiryDate ? DriverInformation.licenseExpiryDate.split('T')[0] : null;
            document.getElementById("Contract_DriverInfo_CrMasRenterInformationExpiryIdDate").value = DriverInformation.expiryIdDate ? DriverInformation.expiryIdDate.split('T')[0] : null;
            document.getElementById("Contract_DriverInfo_CrMasRenterInformationCopyId").value = DriverInformation.idCopyNumber;
            document.getElementsByName("Contract.DriverInfo.CrMasRenterInformationGender")[0].value = DriverInformation.genderCode;

            // Handle date elements
            // $("#birth-date-driver").val(DriverInformation.birthDate);

            // Copy tenant gender to driver gender
            var driverGenderRadioButton = document.getElementById("genderDriver-" + DriverInformation.genderCode);
            if (driverGenderRadioButton) {
                driverGenderRadioButton.checked = true;
            }
            // document.querySelectorAll('.genderDriver').forEach(function (element) {
            //     element.disabled = true;
            // });
            // Auto Focus
            setTimeout(() => {
                $("#licence-driver-number").focus();
            }, 500);
            // Handle ID type specifics
            var idType = DriverInformation.renterIDType;
            if (parseInt(idType) > 5) {
                $('.genderDriver[type="radio"]').prop('checked', false);
                $('#divGenderDriver').remove();
            }
            $(".hidden-input-row-Driver").show();
            CheckIfDriverIdChecked = true;
            CheckIfDriverIdSameRenterId = true;
        }
        function SetInformationForDriverIfNotExist() {
            // Personal Information
            if (DriverInformation == null) {
                DriverInformation = { ...modelPersonal };
            }
            DriverInformation.renterID = document.getElementById("Contract_DriverInfo_CrMasRenterInformationId").value;
            DriverInformation.renterIDType = document.getElementById("nationality-type-driver").value;
            // DriverInformation.birthDate = document.getElementById("birth-date-driver").value;
            DriverInformation.day = document.getElementById("dayDriver").value;
            DriverInformation.month = document.getElementById("monthDriver").value;
            DriverInformation.year = document.getElementById("yearDriver").value;
            DriverInformation.personalArName = document.getElementById("AR-name-driver").value;
            DriverInformation.personalEnName = document.getElementById("EN-name-driver").value;

            DriverInformation.postArDistictName = document.getElementById("AR-adress-driver").value;
            DriverInformation.postEnDistictName = document.getElementById("EN-adress-driver").value;

            DriverInformation.postArNameConcenate = document.getElementById("Region-city-driver").value;
            if (DriverInformation.postArDistictName) {
                DriverInformation.postArNameConcenate += " - " + DriverInformation.postArDistictName;
            }

            DriverInformation.postEnNameConcenate = document.getElementById("Region-city-driver").value;
            if (DriverInformation.postEnDistictName) {
                DriverInformation.postEnNameConcenate += " - " + DriverInformation.postEnDistictName;
            }

            DriverInformation.cityCode = document.getElementById("Region-city-driver-code").value;
            DriverInformation.nationalityCode = document.getElementById("nationality-Driver-code").value;
            DriverInformation.employerCode = document.getElementById("driver-workplace-code").value;
            DriverInformation.professionsCode = document.getElementById("Profession-driver").value;
            DriverInformation.personalEmail = document.getElementById("Email-Driver").value;
            DriverInformation.keyCountry = document.getElementById("countryCodeDriver").value;
            DriverInformation.mobileNumber = document.getElementById("mobileDriver").value;
            DriverInformation.arMembership = "مشترك";
            DriverInformation.enMembership = "Mutual";
            var selectedOption = $("#licence-driver-type option:selected");
            var enNameLicense = selectedOption.data('en') || '';
            var arNameLicense = selectedOption.data('ar') || ''; // Defaults to empty string if null or empty
            DriverInformation.licenseArName = arNameLicense;
            DriverInformation.licenseEnName = enNameLicense;
            DriverInformation.licenseCode = document.getElementById("licence-driver-number").value;
            DriverInformation.licenseType = document.getElementById("licence-driver-type").value;
            DriverInformation.licenseExpiryDate = document.getElementById("ExpiryDrivingLicenseDate-driver").value;
            DriverInformation.reasons = document.getElementById("Reasons-driver").value;

            // Handle the selected radio button for gender
            var selectedGenderRadio = document.querySelector('input[name="Contract.DriverInfo.CrMasRenterInformationGender"]:checked');
            if (selectedGenderRadio) {
                DriverInformation.genderCode = selectedGenderRadio.value;
                DriverInformation.personalEnGender = selectedGenderRadio.getAttribute('data-en') || '';
                DriverInformation.personalArGender = selectedGenderRadio.getAttribute('data-ar') || ''; // Defaults to an empty string if null or empty
            }

            // Handle the idType and disable inputs if necessary
            var idType = document.getElementById("nationality-type-driver").value;
            if (parseInt(idType) > 5) {
                $('.genderDriver[type="radio"]').prop('checked', false);
                $('#divGenderDriver').remove();
            }

            // Handle culture-specific settings
            if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                DriverInformation.personalEnNationality = document.getElementById("nationality-Driver").value;
                DriverInformation.employerEnName = document.getElementById("driver-workplace").value;
                DriverInformation.cityEn = document.getElementById("Region-city-driver").value;
            } else {
                DriverInformation.personalArNationality = document.getElementById("nationality-Driver").value;
                DriverInformation.employerArName = document.getElementById("driver-workplace").value;
                DriverInformation.cityAr = document.getElementById("Region-city-driver").value;
            }
            // Auto Focus
            console.log("DriverInformation", DriverInformation);
        }
        function CheckIfDriverHaveContractsBefore() {
            if (DriverInformation && DriverInformation.countContracts > 0) {
                $("#seacrh_icon_Driver").show();
                var firstVisitDate = new Date(DriverInformation.firstVisit);
                var lastContractDate = new Date(DriverInformation.lastContract);
                // Format the dates as "yyyy/MM/dd"
                var formattedFirstVisit = firstVisitDate.getFullYear() + '/' + (firstVisitDate.getMonth() + 1).toString().padStart(2, '0') + '/' + firstVisitDate.getDate().toString().padStart(2, '0');
                var formattedLastContract = lastContractDate.getFullYear() + '/' + (lastContractDate.getMonth() + 1).toString().padStart(2, '0') + '/' + lastContractDate.getDate().toString().padStart(2, '0');
                if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                    $("#DealingMechanismDriver").text(DriverInformation.enDealingMechanism);
                    $("#MembershipDriver").text(DriverInformation.enMembership);
                }
                else {
                    $("#DealingMechanismDriver").text(DriverInformation.arDealingMechanism);
                    $("#MembershipDriver").text(DriverInformation.arMembership);
                }
                $("#FirstVisitDriver").text(formattedFirstVisit);
                $("#LastContractDriver").text(formattedLastContract);
                $("#ActiveContractsCountDriver").text(DriverInformation.activeContractsCount);
                $("#ClosedContractsCountDriver").text(DriverInformation.closedContractsCount);
                $("#RentalDaysDriver").text(DriverInformation.rentalDays);
                $("#KMCutDriver").text(DriverInformation.kmCut);
                $("#AmountsTradedDriver").text(DriverInformation.amountsTraded.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                $("#BalanceDriver").text(DriverInformation.balance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                $("#AvailableBalanceDriver").text(DriverInformation.reservedBalance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                $("#ReservedBalanceDriver").text(DriverInformation.availableBalance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            }
        }
        function addOptionAndSelect(selectElementId, value) {
            let selectElement = document.getElementById(selectElementId);

            // Check if the value already exists in the select options
            let optionExists = Array.from(selectElement.options).some(option => option.value == value);

            // If the option doesn't exist, create it
            if (!optionExists) {
                let newOption = document.createElement("option");
                newOption.value = value;
                newOption.text = value; // You can adjust the text if needed
                selectElement.add(newOption);
            }

            // Set the select element to the desired value
            selectElement.value = value;
        }
        // Add Driver
        $(document).ready(function () {
            var initialID = $('#Contract_AddDriverInfo_CrMasRenterInformationId').val();
            $('#Contract_AddDriverInfo_CrMasRenterInformationId').on('input', function () {
                // Check if the value has changed
                if ($(this).val() !== initialID) {
                    // Clear previous data and style
                    CheckIfAddDriverIdSameRenterOrDriverId = true;
                    $("#errorAddDriverMustNotRenterId").text("");
                    EmptyAddDriverInput();
                    AddDriverInformation = null;
                    CheckIfAddDriverIdChecked = false;
                    $(".requird-field").text('');
                    $(".hidden-input-row-AddDriver").hide();
                    $("#seacrh_icon_AddDriver").hide();
                    $("#CheckAddDriver").show();
                    $("#dayAddDriver").prop('disabled', false);
                    $("#monthAddDriver").prop('disabled', false);
                    $("#yearAddDriver").prop('disabled', false);
                    $("#nationality-type-addDriver").val("");
                    $("#nationality-type-addDriver").prop('disabled', false);
                    clearPaymentData();
                    //Check If add driver have the same renter or driver id
                    if ($(this).val() == $("#Contract_RenterInfo_CrMasRenterInformationId").val() || $(this).val() == $("#Contract_DriverInfo_CrMasRenterInformationId").val()) {
                        CheckIfAddDriverIdSameRenterOrDriverId = false;
                        $("#errorAddDriverMustNotRenterId").text("@localizer["DriverAndRenterIdExistAddDriver"]")
                        $("#dayAddDriver").empty();
                        $("#monthAddDriver").empty();
                        $("#yearAddDriver").empty();
                        return;
                    }
                    handleDateAndNationalityChange("AddDriver", "nationality-type-addDriver");
                    // Update the initial value of RenterID
                    initialID = $(this).val();
                }
            });
        });
        function EmptyAddDriverInput() {
            $("#AR-name-addDriver").val('');
            $("#EN-name-addDriver").val('');
            $("#AR-adress-addDriver").val('');
            $("#EN-adress-addDriver").val('');
            $("#Region-city-addDriver-code").val('');
            $("#Region-city-addDriver").val('');
            $("#addDriver-workplace-code").val('');
            $("#Profession-addDriver").val('');
            $("#Email-AddDriver").val('');
            $("#Reasons-addDriver").val('');
            $("#licence-addDriver-number").val("");
            $("#licence-addDriver-type").val("");
            $("#ExpiryDrivingLicenseDate-addDriver").val("");
            $('.genderAddDriver[type="radio"]').prop('checked', false);
            var idType = document.getElementById("nationality-type-addDriver").value;
            if (parseInt(idType) > 5) {
                // Disable all input fields
                $('.genderAddDriver[type="radio"]').prop('checked', false);
                // Remove the div with id 'divGenderRenter'
                $('#divGenderAddDriver').remove();
            }
            $("#nationality-AddDriver").val('');
            $("#addDriver-workplace").val('');
            $("#Region-city-addDriver").val('');
            // Auto Focus
            if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                setTimeout(() => {
                    $("#EN-name-addDriver").focus();
                }, 500);
            } else {
                setTimeout(() => {
                    $("#AR-name-addDriver").focus();
                }, 500);
            }

        }
        function EmptyAddDriverRequiredInputs() {
            // setDateForInputField("birth-date-addDriver", "");
            $("#birth-date-AddDriver").val("");
            $("#nationality-type-addDriver").val('');
            $("#Contract_AddDriverInfo_CrMasRenterInformationId").val('');
            $(".hidden-input-row-AddDriver").hide();
            AddDriverInformation = null;
            EmptyAddDriverInput();
            console.log("Run EmptyAddDriverRequiredInputs")
        }
        function SetInformationForAddDriver() {
            if (AddDriverInformation != null) {
                //This From Tajeer Api
                document.getElementById("addDriverIdTypeCode").value = AddDriverInformation.renterIDType;
                /////////////
                document.getElementById("AR-name-addDriver").value = AddDriverInformation.personalArName;
                document.getElementById("EN-name-addDriver").value = AddDriverInformation.personalEnName;
                document.getElementById("AR-adress-addDriver").value = AddDriverInformation.postArDistictName;
                document.getElementById("EN-adress-addDriver").value = AddDriverInformation.postEnDistictName;
                document.getElementById("nationality-AddDriver-code").value = AddDriverInformation.nationalityCode;
                document.getElementById("mobileAddDriver").value = AddDriverInformation.mobileNumber;
                document.getElementById("countryCodeAddDriver").value = AddDriverInformation.keyCountry;
                document.getElementById("Region-city-addDriver-code").value = AddDriverInformation.cityCode;
                document.getElementById("addDriver-workplace-code").value = AddDriverInformation.employerCode;
                document.getElementById("Profession-addDriver").value = AddDriverInformation.professionsCode;
                document.getElementById("Email-AddDriver").value = AddDriverInformation.personalEmail;
                document.getElementById("licence-addDriver-number").value = AddDriverInformation.licenseCode;
                document.getElementById("licence-addDriver-type").value = AddDriverInformation.licenseType;
                document.getElementById("ExpiryDrivingLicenseDate-addDriver").value = AddDriverInformation.licenseExpiryDate ? AddDriverInformation.licenseExpiryDate.split('T')[0] : '';
                document.getElementById("Reasons-addDriver").value = AddDriverInformation.reasons;
                document.getElementById("Contract_AddDriverInfo_CrMasRenterInformationExpiryIdDate").value = AddDriverInformation.expiryIdDate;
                document.getElementById("Contract_AddDriverInfo_CrMasRenterInformationCopyId").value = AddDriverInformation.idCopyNumber;
                // Set the selected radio button by id
                var radioButtonId = "genderAddDriver-" + AddDriverInformation.genderCode;
                $("#" + radioButtonId).prop('checked', true);
                var idType = document.getElementById("nationality-type-addDriver").value;
                if (parseInt(idType) > 5) {
                    // Disable all input fields
                    $('.genderAddDriver[type="radio"]').prop('checked', false);
                    // Remove the div with id 'divGenderRenter'
                    $('#divGenderAddDriver').remove();
                }
                if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                    document.getElementById("nationality-AddDriver").value = AddDriverInformation.personalEnNationality;
                    if (AddDriverInformation.employerCode != "1800000001" && AddDriverInformation.employerCode != "1800000002") {
                        document.getElementById("addDriver-workplace").value = AddDriverInformation.employerEnName;
                    }
                    document.getElementById("Region-city-addDriver").value = AddDriverInformation.cityEn;
                    setTimeout(() => {
                        $("#EN-name-addDriver").focus();
                    }, 500);
                }
                else {
                    document.getElementById("nationality-AddDriver").value = AddDriverInformation.personalArNationality;
                    if (AddDriverInformation.employerCode != "1800000001" && AddDriverInformation.employerCode != "1800000002") {
                        document.getElementById("addDriver-workplace").value = AddDriverInformation.employerArName;
                    }
                    document.getElementById("Region-city-addDriver").value = AddDriverInformation.cityAr;
                    setTimeout(() => {
                        $("#AR-name-addDriver").focus();
                    }, 500);
                }
                // Auto Focus
                CheckIfAddDriverHaveContractsBefore();
            }
            else {
                EmptyAddDriverInput();
            }
        }
        function SetInformationForAddDriverIfNotExist() {
            // Personal Information
            if (AddDriverInformation == null) {
                AddDriverInformation = { ...modelPersonal };
            }
            AddDriverInformation.renterID = document.getElementById("Contract_AddDriverInfo_CrMasRenterInformationId").value;
            AddDriverInformation.renterIDType = document.getElementById("nationality-type-addDriver").value;
            AddDriverInformation.day = document.getElementById("dayAddDriver").value;
            AddDriverInformation.month = document.getElementById("monthAddDriver").value;
            AddDriverInformation.year = document.getElementById("yearAddDriver").value;
            AddDriverInformation.personalArName = document.getElementById("AR-name-addDriver").value;
            AddDriverInformation.personalEnName = document.getElementById("EN-name-addDriver").value;
            AddDriverInformation.mobileNumber = document.getElementById("mobileAddDriver").value;
            AddDriverInformation.keyCountry = document.getElementById("countryCodeAddDriver").value;
            AddDriverInformation.postArDistictName = document.getElementById("AR-adress-addDriver").value;
            AddDriverInformation.postEnDistictName = document.getElementById("EN-adress-addDriver").value;

            AddDriverInformation.postArNameConcenate = document.getElementById("Region-city-addDriver").value;
            if (AddDriverInformation.postArDistictName) {
                AddDriverInformation.postArNameConcenate += " - " + AddDriverInformation.postArDistictName;
            }

            AddDriverInformation.postEnNameConcenate = document.getElementById("Region-city-addDriver").value;
            if (AddDriverInformation.postEnDistictName) {
                AddDriverInformation.postEnNameConcenate += " - " + AddDriverInformation.postEnDistictName;
            }

            AddDriverInformation.cityCode = document.getElementById("Region-city-addDriver-code").value;
            AddDriverInformation.nationalityCode = document.getElementById("nationality-AddDriver-code").value;
            AddDriverInformation.employerCode = document.getElementById("addDriver-workplace-code").value;
            AddDriverInformation.professionsCode = document.getElementById("Profession-addDriver").value;
            AddDriverInformation.personalEmail = document.getElementById("Email-AddDriver").value;
            var selectedOption = $("#licence-addDriver-type option:selected");
            var enNameLicense = selectedOption.data('en') || '';
            var arNameLicense = selectedOption.data('ar') || ''; // Defaults to empty string if null or empty
            AddDriverInformation.licenseArName = arNameLicense;
            AddDriverInformation.licenseEnName = enNameLicense;
            AddDriverInformation.licenseCode = document.getElementById("licence-addDriver-number").value;
            AddDriverInformation.licenseType = document.getElementById("licence-addDriver-type").value;
            AddDriverInformation.licenseExpiryDate = document.getElementById("ExpiryDrivingLicenseDate-addDriver").value;
            AddDriverInformation.arMembership = "مشترك";
            AddDriverInformation.enMembership = "Mutual";
            AddDriverInformation.reasons = document.getElementById("Reasons-addDriver").value;

            // Handle the selected radio button for gender
            var selectedGenderRadio = document.querySelector('input[name="Contract.AddDriverInfo.CrMasRenterInformationGender"]:checked');
            if (selectedGenderRadio) {
                AddDriverInformation.genderCode = selectedGenderRadio.value;
                AddDriverInformation.personalEnGender = selectedGenderRadio.getAttribute('data-en') || '';
                AddDriverInformation.personalArGender = selectedGenderRadio.getAttribute('data-ar') || ''; // Defaults to an empty string if null or empty
            }

            // Handle the idType and disable inputs if necessary
            var idType = document.getElementById("nationality-type-addDriver").value;
            if (parseInt(idType) > 5) {
                $('.genderAddDriver[type="radio"]').prop('checked', false);
                $('#divGenderAddDriver').remove();
            }

            // Handle culture-specific settings
            if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                AddDriverInformation.personalEnNationality = document.getElementById("nationality-AddDriver").value;
                AddDriverInformation.employerEnName = document.getElementById("addDriver-workplace").value;
                AddDriverInformation.cityEn = document.getElementById("Region-city-addDriver").value;
                setTimeout(() => {
                    $("#EN-name-addDriver").focus();
                }, 500);
            } else {
                AddDriverInformation.personalArNationality = document.getElementById("nationality-AddDriver").value;
                AddDriverInformation.employerArName = document.getElementById("addDriver-workplace").value;
                AddDriverInformation.cityAr = document.getElementById("Region-city-addDriver").value;
                setTimeout(() => {
                    $("#AR-name-addDriver").focus();
                }, 500);
            }
            console.log("AddDriverInformation", AddDriverInformation);
        }
        function CheckIfAddDriverHaveContractsBefore() {
            if (AddDriverInformation && AddDriverInformation.countContracts > 0) {
                $("#seacrh_icon_AddDriver").show();
                var firstVisitDate = new Date(AddDriverInformation.firstVisit);
                var lastContractDate = new Date(AddDriverInformation.lastContract);
                // Format the dates as "yyyy/MM/dd"
                var formattedFirstVisit = firstVisitDate.getFullYear() + '/' + (firstVisitDate.getMonth() + 1).toString().padStart(2, '0') + '/' + firstVisitDate.getDate().toString().padStart(2, '0');
                var formattedLastContract = lastContractDate.getFullYear() + '/' + (lastContractDate.getMonth() + 1).toString().padStart(2, '0') + '/' + lastContractDate.getDate().toString().padStart(2, '0');
                $("#FirstVisitAddDriver").text(formattedFirstVisit);
                $("#LastContractAddDriver").text(formattedLastContract);
                if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                    $("#DealingMechanismAddDriver").text(AddDriverInformation.enDealingMechanism);
                    $("#MembershipAddDriver").text(AddDriverInformation.enMembership);
                } else {
                    $("#DealingMechanismAddDriver").text(AddDriverInformation.arDealingMechanism);
                    $("#MembershipAddDriver").text(AddDriverInformation.arMembership);
                }
                $("#ActiveContractsCountAddDriver").text(AddDriverInformation.activeContractsCount);
                $("#ClosedContractsCountAddDriver").text(AddDriverInformation.closedContractsCount);
                $("#RentalDaysAddDriver").text(AddDriverInformation.rentalDays);
                $("#KMCutAddDriver").text(AddDriverInformation.kmCut);
                $("#AmountsTradedAddDriver").text(AddDriverInformation.amountsTraded.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                $("#BalanceAddDriver").text(AddDriverInformation.balance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                $("#AvailableBalanceAddDriver").text(AddDriverInformation.reservedBalance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
                $("#ReservedBalanceAddDriver").text(AddDriverInformation.availableBalance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            }
        }

        var current_fs, next_fs, previous_fs;
        var tab = 1;
        var currentField = "";
        var NextField = "";
        var PreviousField = "";
        $(document).on("click", ".next", async function () {
            current_fs = $(this).closest("fieldset");
            next_fs = $(this).closest("fieldset").next();
            currentField = $("#progressbar li").eq($("fieldset").index(current_fs))[0].id;
            NextField = $("#progressbar li").eq($("fieldset").index(next_fs))[0].id;
            PreviousField = $("#progressbar li").eq($("fieldset").index(next_fs))[0].id;
            if (currentField === "tenant") {
                if ($("#msform").valid()) {
                    if (!CheckIfRenterIdChecked) {
                        toastr.error('@localizer["PleaseCheckYourID"]');
                        return;
                    }
                    if (!listsIsTrueOrNotRenter) {
                        console.log("listsIsTrueOrNotRenter", listsIsTrueOrNotRenter)
                        toastr.error('@localizer["PleaseCheckInputs"]');
                        return;
                    }
                    SetInformationForRenterIfNotExist();
                    var dateTimeNow = decodeHTMLEntities('@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffK")');
                    var currentDate = new Date(dateTimeNow);
                    var city = RenterInformation.cityCode;
                    var employeerWorkPlace = $("#tenant-workplace").val();
                    var id = true;
                    var address = true;
                    var employeer = true;
                    var chechAuthUser;
                    CheckSigntureImgForRenter();
                    if (city == null || city == "") {
                        address = false;
                    }
                    if (employeerWorkPlace == null || employeerWorkPlace == "") {
                        employeer = false;
                    }
                    // This Check to If Renter Need Private Driver Or not
                    var privateDriverRadio1 = document.getElementById("PrivateDriver");
                    var privateDriverID = $("#Private-Driver-selectt").val();
                    if (privateDriverRadio1.checked && privateDriverID == null) {
                        $("#PrivateDriverRequired").text('@localizer["PleaseChooseYourDriver"]').css("color", "red");
                    }
                    else {
                        if (privateDriverRadio1.checked && privateDriverID != null) {
                            // await GetPersonInformation(privateDriverID, "privateDriver");
                            await GetPrivateDriverInformation(privateDriverID);
                            $("#PrivateDriverRequired").text('').css("color", "");
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.show();
                            current_fs.hide();
                            tab++;
                        }
                        else if (!id || !address || !employeer) {
                            $.ajax({
                                url: "/BS/Contract/CheckAuthUser", // Replace YourController with your actual controller name
                                type: "GET",
                                data: { id: id, address: address, employeer: employeer },
                                success: function (data) {
                                    var check = data;
                                    if (check == "id") {
                                        $("#PrivateDriverRequired").text('').css("color", "");

                                        toastr.error('@localizer["IdIsExpriredAndYouNotAuth"]');
                                        return;
                                    }
                                    else if (check == "address") {
                                        $("#PrivateDriverRequired").text('').css("color", "");

                                        toastr.error('@localizer["AddressIsExpriredAndYouNotAuth"]');
                                        return
                                    }
                                    else if (check == "employeer") {
                                        $("#tenant-workplace").focus();
                                        $("#PrivateDriverRequired").text('').css("color", "");

                                        toastr.error('@localizer["EmployerIsExpriredAndYouNotAuth"]');
                                        return
                                    }
                                    else {
                                        $("#PrivateDriverRequired").text('').css("color", "");
                                        $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                        next_fs.show();
                                        current_fs.hide();
                                        tab++;
                                    }
                                }
                            });
                        }
                        else {
                            $("#PrivateDriverRequired").text('').css("color", "");
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.show();
                            current_fs.hide();
                            tab++;
                        }
                    }
                }
                else {
                    // Find the first invalid input field
                    focusFirstInvalidInput();
                }
            }
            else if (currentField === "car") {
                var driverRadio1 = document.getElementById("RenterIsdriver");
                var privateDriverRadio1 = document.getElementById("PrivateDriver");
                var privateDriverID = $("#Private-Driver-selectt").val();
                SerialNumberOfCar = $(this).find(".CarInfo").data("serial-number");
                PriceNumberOfCar = $(this).find(".CarInfo").data("price-number");
                $("#Contract_SerialNo").val(SerialNumberOfCar);
                $("#Contract_PriceNo").val(PriceNumberOfCar);
                GetDocsToCheckAboutDateToDetermineMaximumDays(SerialNumberOfCar);
                GetAdvantagesValue(PriceNumberOfCar);
                GetAdvantages(PriceNumberOfCar);
                enableAllInputsForDriver();
                EmptyDriverRequiredInputs();
                EmptyAddDriverRequiredInputs();
                clearPaymentData();
                // Use Promises to ensure data is available before proceeding
                Promise.all([getCarChoices(PriceNumberOfCar), getCarAdditional(PriceNumberOfCar), GetCarInfo(SerialNumberOfCar), GetCarInfoForContract(SerialNumberOfCar)])
                    .then(([choicesData, additionalsData, carInformation, carInfoForContract]) => {
                        IsThereAdditionalDriver();
                        console.log("carInformation", carInformation);
                        if (privateDriverRadio1.checked) {
                            console.log("privateDriverRadio2222", privateDriverRadio1.checked)
                            console.log("privateDriverID3333", privateDriverID)
                            document.getElementById("addational-driver").checked = false;
                            if (CarAdditionals.count == 0 && CarChoices.count == 0) {
                                currentField = "check";
                                NextField = "payment";
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs = $(this).closest("fieldset").next().next();
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs = $(this).closest("fieldset").next().next().next();
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs = $(this).closest("fieldset").next().next().next().next();
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs.show();
                                current_fs.hide();
                            }
                            else {
                                currentField = "options";
                                NextField = "check";
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs = $(this).closest("fieldset").next().next();
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs = $(this).closest("fieldset").next().next().next();
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs.show();
                                current_fs.hide();
                            }
                        }
                        // This Check to If driverIsRenter Or not
                        else if (driverRadio1.checked) {
                            disableAllInputsForDriver();
                            SetRenterIsDriverInformation();
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.show();
                            current_fs.hide();
                            currentField = "driver";
                            NextField = "add-driver";
                        }
                        else {
                            document.getElementById("addational-driver").checked = false;
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.show();
                            current_fs.hide();
                            currentField = "driver";
                            NextField = "add-driver";
                            setTimeout(() => {
                                $("#Contract_DriverInfo_CrMasRenterInformationId").focus();
                            }, 500);
                        }
                    })
                    .catch((error) => {
                        console.error("Error loading data:", error);
                    });

                //////////////////////////////////////////
            }
            else if (currentField === "driver") {
                if ($("#msform").valid()) {
                    if (!CheckIfDriverIdChecked) {
                        toastr.error('@localizer["PleaseCheckYourID"]');
                        return;
                    }
                    if (!CheckIfDriverIdSameRenterId) {
                        $("#errorDriverMustNotRenterId").text("@localizer["DriverIdExistRenter"]")
                        return;
                    }
                    else {
                        $("#errorDriverMustNotRenterId").text("")
                    }
                    if (!listsIsTrueOrNotDriver) {
                        toastr.error('@localizer["PleaseCheckInputs"]');
                        return;
                    }
                    SetInformationForDriverIfNotExist();
                    var additionalDriver = document.getElementById("addational-driver");
                    var dateTimeNow = decodeHTMLEntities('@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffK")');
                    var BirthDateDriver = new Date($("#birth-date-driver").val());
                    var DriverAge = calculateAge(DriverInformation.day, DriverInformation.month, DriverInformation.year, DriverInformation.renterID)
                    var city = $("#Region-city-driver-code").val();
                    var licenseType = $("#licence-driver-type").val();
                    var licenseNo = $("#licence-driver-number").val();
                    var licenseDate = $("#ExpiryDrivingLicenseDate-driver").val();
                    var employerCode = $("#driver-workplace").val();

                    var minAge = CarInformation.carPrice.crCasPriceCarBasicMinAge;
                    var maxAge = CarInformation.carPrice.crCasPriceCarBasicMaxAge;
                    // All Values Bool to send it to backend to check auth user
                    var id = true;
                    var address = true;
                    var license = true;
                    var isAgeInRange = DriverAge >= minAge && DriverAge <= maxAge;
                    var employer = true;
                    console.log("minAge", minAge)
                    console.log("maxAge", maxAge)
                    console.log("DriverAge", DriverAge)
                    console.log("isAgeInRange", isAgeInRange)

                    // Driver Address
                    if (city == null || city == "") {
                        address = false;
                    }
                    // Driver license
                    if (licenseType === '2' || licenseType === '1' || licenseType == null || licenseType == "" || licenseNo == null || licenseNo == "" || licenseDate == "" || licenseDate == null) {
                        license = false;
                    }
                    // Driver employeer
                    if (employerCode == "" || employerCode == null) {
                        employer = false;
                    }
                    var check = "";
                    var Authrize = true;
                    if (!(id && address && license && isAgeInRange && employer)) {
                        if (id == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityId" == "False") {

                            toastr.error('@localizer["IdIsExpriredAndYouNotAuth"]');
                            return;
                        }
                        else if (address == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityRenterAddress" == "False") {

                            toastr.error('@localizer["AddressIsExpriredAndYouNotAuth"]');
                            return
                        }
                        else if (employer == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityEmployer" == "False") {
                            $("#driver-workplace").focus();

                            toastr.error('@localizer["EmployerIsExpriredAndYouNotAuth"]');
                            return
                        }
                        else if (license == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityDrivingLicense" == "False") {
                            $("#licence-driver-number").focus();

                            toastr.error('@localizer["LicenseIsExpriredAndYouNotAuth"]');
                            return
                        }
                        else if (isAgeInRange == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityAge" == "False") {

                            toastr.error('@localizer["AgeIsExpriredAndYouNotAuth"]');
                            return
                        }
                        else {
                            enableAllInputsForDriver();
                            if (additionalDriver.checked) {
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs.show();
                                current_fs.hide();
                                currentField = "add-driver";
                                NextField = "options";
                                setTimeout(() => {
                                    $("#Contract_AddDriverInfo_CrMasRenterInformationId").focus();
                                }, 500);
                            }
                            else {
                                EmptyAddDriverRequiredInputs();
                                if (CarChoices.count == 0 && CarAdditionals.count == 0) {
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs = $(this).closest("fieldset").next().next();
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs = $(this).closest("fieldset").next().next().next();
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs.show();
                                    current_fs.hide();
                                    currentField = "check";
                                    NextField = "payment";
                                }
                                else {
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs = $(this).closest("fieldset").next().next();
                                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                    next_fs.show();
                                    current_fs.hide();
                                    currentField = "options";
                                    NextField = "check";
                                }
                            }
                        }
                    }
                    else {
                        enableAllInputsForDriver();
                        if (additionalDriver.checked) {
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.show();
                            current_fs.hide();
                            currentField = "add-driver";
                            NextField = "options";
                            setTimeout(() => {
                                $("#Contract_AddDriverInfo_CrMasRenterInformationId").focus();
                            }, 500);
                        }
                        else {
                            EmptyAddDriverRequiredInputs();
                            if (CarChoices.count == 0 && CarAdditionals.count == 0) {
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs = $(this).closest("fieldset").next().next();
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs = $(this).closest("fieldset").next().next().next();
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs.show();
                                current_fs.hide();
                                currentField = "check";
                                NextField = "payment";
                            }
                            else {
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs = $(this).closest("fieldset").next().next();
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs.show();
                                current_fs.hide();
                                currentField = "options";
                                NextField = "check";
                            }
                        }
                    }
                }
                else {
                    // Find the first invalid input field
                    focusFirstInvalidInput();
                }
            }
            else if (currentField === "add-driver") {
                if ($("#msform").valid()) {

                    if (!CheckIfAddDriverIdChecked) {
                        toastr.error('@localizer["PleaseCheckYourID"]');
                        return;
                    }
                    if (!CheckIfAddDriverIdSameRenterOrDriverId) {
                        $("#errorDriverMustNotRenterId").text("@localizer["DriverIdExistRenter"]")
                        return;
                    }
                    if (!listsIsTrueOrNotAddDriver) {
                        toastr.error('@localizer["PleaseCheckInputs"]');
                        return;
                    }
                    SetInformationForAddDriverIfNotExist();
                    var dateTimeNow = decodeHTMLEntities('@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffK")');
                    var BirthDateAddDriver = new Date($("#birth-date-AddDriver").val());
                    var AddDriverAge = calculateAge(AddDriverInformation.day, AddDriverInformation.month, AddDriverInformation.year, AddDriverInformation.renterID)
                    var city = $("#Region-city-addDriver-code").val();
                    var licenseType = $("#licence-addDriver-type").val();
                    var licenseNo = $("#licence-addDriver-number").val();
                    var licenseDate = $("#ExpiryDrivingLicenseDate-addDriver").val();
                    var employerCode = $("#addDriver-workplace").val();
                    var minAge = CarInformation.carPrice.crCasPriceCarBasicMinAge;
                    var maxAge = CarInformation.carPrice.crCasPriceCarBasicMaxAge;
                    // All Values Bool to send it to backend to check auth user
                    var id = true;
                    var address = true;
                    var license = true;
                    var isAgeInRange = AddDriverAge >= minAge && AddDriverAge <= maxAge;
                    var employer = true;
                    console.log("minAge", minAge)
                    console.log("maxAge", maxAge)
                    console.log("DriverAge", DriverAge)
                    console.log("isAgeInRange", isAgeInRange)
                    // AddDriver Address
                    if (city == null || city == "") {
                        address = false;
                    }
                    // AddDriver license
                    // Driver license
                    if (licenseType === '2' || licenseType === '1' || licenseType == null || licenseType == "" || licenseNo == null || licenseNo == "" || licenseDate == "" || licenseDate == null) {
                        license = false;
                    }
                    // AddDriver employeer
                    if (employerCode == "" || employerCode == null) {
                        employer = false;
                    }

                    if (!(id && address && license && isAgeInRange && employer)) {


                        if (id == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityId" == "False") {

                            toastr.error('@localizer["IdIsExpriredAndYouNotAuth"]');
                            return;
                        }
                        else if (address == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityRenterAddress" == "False") {

                            toastr.error('@localizer["AddressIsExpriredAndYouNotAuth"]');
                            return
                        }
                        else if (employer == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityEmployer" == "False") {
                            $("#addDriver-workplace").focus();

                            toastr.error('@localizer["EmployerIsExpriredAndYouNotAuth"]');
                            return
                        }
                        else if (license == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityDrivingLicense" == "False") {
                            $("#licence-addDriver-number").focus();

                            toastr.error('@localizer["LicenseIsExpriredAndYouNotAuth"]');
                            return
                        }
                        else if (isAgeInRange == false && "@user.CrMasUserContractValidity.CrMasUserContractValidityAge" == "False") {

                            toastr.error('@localizer["AgeIsExpriredAndYouNotAuth"]');
                            return
                        }
                        else {
                            if (CarChoices.count == 0 && CarAdditionals.count == 0) {
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs = $(this).closest("fieldset").next().next();
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs.show();
                                current_fs.hide();
                                currentField = "check";
                                NextField = "payment"
                            }
                            else {
                                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                                next_fs.show();
                                current_fs.hide();
                                currentField = "options"
                                NextField = "check"
                            }
                        }


                    }
                    else if (CarChoices.count == 0 && CarAdditionals.count == 0) {
                        $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                        next_fs = $(this).closest("fieldset").next().next();
                        $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                        next_fs.show();
                        current_fs.hide();
                        currentField = "check";
                        NextField = "payment"
                    }
                    else {
                        $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                        next_fs.show();
                        current_fs.hide();
                        currentField = "options"
                        NextField = "check"
                    }
                }
                else {
                    // Find the first invalid input field
                    focusFirstInvalidInput();
                }
            }
            else if (currentField === "options") {
                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                next_fs.show();
                current_fs.hide();
                currentField = "check";
                NextField = "payment";
            }
            else if (currentField === "check") {
                // Initialize variables
                var saveContractBtn = document.getElementById("SaveContractBtn");
                IfCarChangeBranchReceiving();
                clearPaymentData();
                var allChecked = true;
                var currentMeter = true;
                var imgs = true;
                // Check checkboxes
                var checkboxes = document.querySelectorAll(".CheckUp");
                checkboxes.forEach(function (checkbox) {
                    if (!checkbox.checked) {
                        allChecked = false;
                    }
                });

                // Check currentMeterSpan
                var currentMeterSpan = $("#requird_field_CurrentMeter");
                if (currentMeterSpan.text().trim() === "") {
                } else {
                    currentMeter = false;
                }

                // Check if the div contains at least one img element
                if ($('.upload__img-box img').length > 0) {
                } else {
                    imgs = false;
                }

                // Final check
                if (imgs && currentMeter && allChecked) {
                    //Get RenterBalance
                    if (RenterInformation != null) {
                        RenterBalance = RenterInformation.availableBalance;
                        if (RenterBalance != null && RenterBalance != "" && RenterBalance != 0 && RenterBalance != undefined) {
                            document.getElementById("Balance").textContent = RenterBalance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                        }
                    }
                    else {
                        document.getElementById("Balance").textContent = "0.00";
                        RenterBalance = 0;
                    }
                    $("#checkUpMessageRequired").text('')
                    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                    next_fs.show();
                    current_fs.hide();
                    currentField = "payment"
                    setTimeout(() => {
                        $("#dayNo").focus();
                    }, 500);
                } else {
                    $("#checkUpMessageRequired").text('@localizer["checkUpMessageRequired"]')
                }
            }
        });
        $(".previous").click(function () {
            current_fs = $(this).closest("fieldset");
            previous_fs = $(this).closest("fieldset").prev();
            var additionalDriver = document.getElementById("addational-driver");
            var privateDriverRadio1 = document.getElementById("PrivateDriver");
            var RenterIsdriver = document.getElementById("RenterIsdriver");

            if (currentField === "options") {

                // This Check to If Renter Need Private Driver Or not
                if (privateDriverRadio1.checked) {
                    // Clear previous data and style
                    EmptyDriverRequiredInputs();
                    EmptyAddDriverRequiredInputs();
                    $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                    $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                    previous_fs = $(this).closest("fieldset").prev().prev();
                    $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                    previous_fs = $(this).closest("fieldset").prev().prev().prev();
                    previous_fs.show();
                    current_fs.hide();
                    currentField = "car";
                    PreviousField = "tenant"
                }
                else if (additionalDriver.checked) {
                    enableAllInputsForDriver();
                    console.log("disableAllInputsForDriver", 00000000)
                    $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                    previous_fs.show();
                    current_fs.hide();
                    currentField = "add-driver"
                }
                else {
                    if (RenterIsdriver.checked) {
                        disableAllInputsForDriver();
                    }
                    $(".hidden-input-row-Driver").show();
                    $("#CheckDriver").hide();
                    $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                    previous_fs = $(this).closest("fieldset").prev().prev();
                    $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                    previous_fs.show();
                    currentField = "driver"
                    current_fs.hide();
                }
            }
            else if (currentField === "check") {
                if (privateDriverRadio1.checked) {
                    EmptyDriverRequiredInputs();
                    EmptyAddDriverRequiredInputs();
                    if (CarAdditionals.count == 0 && CarChoices.count == 0) {
                        $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                        $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                        previous_fs = $(this).closest("fieldset").prev().prev();
                        $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                        previous_fs = $(this).closest("fieldset").prev().prev().prev();
                        $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                        previous_fs = $(this).closest("fieldset").prev().prev().prev().prev();
                        previous_fs.show();
                        current_fs.hide();
                        currentField = "car";
                        PreviousField = "tenant"
                    }
                    else {
                        $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                        previous_fs.show();
                        current_fs.hide();
                        currentField = "options";
                        PreviousField = "car"
                    }
                }
                else if (additionalDriver.checked && CarAdditionals.count == 0 && CarChoices.count == 0) {
                    $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                    $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                    previous_fs = $(this).closest("fieldset").prev().prev();
                    previous_fs.show();
                    current_fs.hide();
                    currentField = "add-driver";
                    PreviousField = "driver";
                }
                else {
                    if (CarAdditionals.count == 0 && CarChoices.count == 0) {
                        if (RenterIsdriver.checked) {
                            disableAllInputsForDriver();
                        }
                        $(".hidden-input-row-Driver").show();
                        $("#CheckDriver").hide();
                        $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                        $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                        previous_fs = $(this).closest("fieldset").prev().prev();
                        $("#progressbar li").eq($("fieldset").index(previous_fs)).removeClass("active");
                        previous_fs = $(this).closest("fieldset").prev().prev().prev();
                        previous_fs.show();
                        current_fs.hide();
                        currentField = "driver";
                        PreviousField = "car";
                    }
                    else {
                        $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                        previous_fs.show();
                        current_fs.hide();
                        currentField = "options";
                        PreviousField = "driver";
                    }

                }
            }
            else if (currentField === "payment") {
                $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                previous_fs.show();
                current_fs.hide();
                currentField = "check"
            }
            else {
                if (RenterIsdriver.checked) {
                    disableAllInputsForDriver();
                }
                $(".hidden-input-row-Driver").show();
                $("#CheckDriver").hide();
                $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");
                previous_fs.show();
                current_fs.hide();
            }
        });
        //Check Renter
        function SetRenterBalance() {
            //Get RenterBalance
            if (RenterInformation != null) {
                RenterBalance = RenterInformation.availableBalance;
                if (RenterBalance != null && RenterBalance != "" && RenterBalance != 0 && RenterBalance != undefined) {
                    document.getElementById("Balance").textContent = RenterBalance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                }
            }
            else {
                document.getElementById("Balance").textContent = "0.00";
                RenterBalance = 0;
            }
        }
        // Check If Input Required And Focus about it
        function focusFirstInvalidInput() {
            const errorInputs = [];
            document.querySelectorAll('.field-validation-error').forEach(error => {
                // Ensure that closest element exists
                const closestCol = error.closest('.requird-inputs-col');
                if (closestCol) {
                    const input = error.closest('.requird-inputs-col')?.querySelector('input, select');
                    if (input) {
                        errorInputs.push(input);
                    }
                }
            });

            // If there are invalid inputs, focus on the first one
            if (errorInputs.length > 0) {
                setTimeout(() => {
                    errorInputs[0].focus();
                }, 100);
            }
        }
        function IsThereAdditionalDriver() {
            var additionalDriver = CarInformation.carPrice.crCasPriceCarBasicIsAdditionalDriver;
            console.log("additionalDriver", additionalDriver);
            if (additionalDriver == false) {
                $("#additionalDriverDiv").hide();
            }
            else {
                $("#additionalDriverDiv").show();
            }
        }
        function GetCodeCategory(categoryCode) {
            var selectedBranch = "@Model.SelectedBranch";
            $.ajax({
                url: "/BS/Contract/GetCarsByCategory", // Replace YourController with your actual controller name
                type: "GET",
                data: { selectedCategory: categoryCode, selectedBranch: selectedBranch },
                success: function (data) {
                    $('#ListCars tbody').html(data);
                },
                error: function () {
                    alert("Error loading data.");
                }
            });
        }
        function GetCarInfo(serialNumber) {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: "/BS/Contract/GetCarInformation",
                    type: "GET",
                    data: { serialNumber: serialNumber },
                    cache: false,
                    success: function (data) {
                        resolve(data);
                        CarInformation = data;
                        $("#Contract_CurrentMeter").val(CarInformation.carInformation.crCasCarInformationCurrentMeter);
                        handleCurrentMeterInput();

                    },
                    error: function (xhr, textStatus, errorThrown) {
                        reject(errorThrown);
                    }
                });
            });
        }
        function GetDocsToCheckAboutDateToDetermineMaximumDays(serialNumber) {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: "/BS/Contract/GetDocsToCheckAboutDateForTaageer",
                    type: "GET",
                    data: { serialNumber: serialNumber },
                    cache: false,
                    success: function (data) {
                        resolve(data);
                        console.log("DateToDetermineMaximumDays:", data);
                        DateToDetermineMaximumDays = data;
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        reject(errorThrown);
                    }
                });
            });
        }
        function GetCarInfoForContract(serialNumber) {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: "/BS/Contract/GetCarInfoForContract",
                    type: "GET",
                    data: { serialNumber: serialNumber },
                    cache: false,
                    success: function (data) {
                        resolve(data);
                        CarInformationForContract = data;
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        reject(errorThrown);
                    }
                });
            });
        }
        function GetAdvantagesValue(priceNumber) {
            $.ajax({
                url: "/BS/Contract/GetAdvantagesValue",
                type: "GET",
                data: { priceNumber: priceNumber },
                success: function (data) {
                    AdvantagesValue = data;
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.error("Error loading data:", textStatus, errorThrown);
                }
            });
        }
        function GetAdvantages(priceNumber) {
            $.ajax({
                url: "/BS/Contract/GetAdvantages",
                type: "GET",
                data: { priceNumber: priceNumber },
                success: function (data) {
                    CarAdvantages = data;
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.error("Error loading data:", textStatus, errorThrown);
                }
            });
        }
        function handleCurrentMeterInput() {
            // Assuming currentMeterInput is the ID of your input field
            var currentMeterInput = $("#Contract_CurrentMeter");
            var currentMeterFromDB = CarInformation.carInformation.crCasCarInformationCurrentMeter;
            var currentMeterValue = parseFloat(currentMeterFromDB) || 0;

            currentMeterInput.on("input keyup", function () {
                var enteredValue = parseFloat($(this).val()) || 0;

                // Check if the entered value is lower than the current value
                if (enteredValue < currentMeterValue) {
                    $("#requird_field_CurrentMeter").text("@localizer["requirdfieldCurrentMeter"]" + " " + currentMeterValue);
                }
                else {
                    $("#requird_field_CurrentMeter").text("")
                }
            });
        }
        function updateOptionsTable(data) {
            // Assuming 'data' is an object with 'OptionsList' property
            var optionsList = data.optionsList;

            // Get the tbody container
            var tbodyContainer = $("#optionsBody");

            // Clear existing content
            tbodyContainer.empty();
            // Check if additionalList is empty
            if (optionsList.length === 0) {
                // If no data, hide the table
                $("#OptionsList").hide();
                return;
            } else {
                // If there is data, show the table
                $("#OptionsList").show();
            }
            // Populate the tbody with the received data
            optionsList.forEach(function (option) {
                var nameLabel = "@requestCulture?.RequestCulture.UICulture.Name" === "en-US" ? option.enName : option.arName;
                var row = $("<tr>");
                var valueCell = $("<td class='text-center' data-value='" + option.optionsValue + "'>" + option.optionsValue + "</td>");
                var optionsCol = $("<td>");
                var optionsDiv = $("<div class='options-col'>");
                optionsDiv.append("<label data-en='" + option.enName + "' data-ar='" + option.arName + "' for='checkbox-" + option.optionsCode + "'>" + nameLabel + "</label>");
                optionsDiv.append("<input class='ChkChoicesList' type='checkbox' name='Additions' value='" + option.optionsCode + "' data-val='" + option.optionsValue + "' id='checkbox-" + option.optionsCode + "'>");
                optionsCol.append(optionsDiv);
                row.append(valueCell);
                row.append(optionsCol);
                tbodyContainer.append(row);
            });

            // Add the total row
            var totalRow = $("<tr>");
            totalRow.append("<td class='text-center' id='TotalChoices'>0.00</td>");
            totalRow.append("<td class='text-center'>@localizer["Total"]</td>");
            tbodyContainer.append(totalRow);
        }
        function getCarChoices(priceNumber) {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: "/BS/Contract/GetCarChoices",
                    type: "GET",
                    data: { priceNumber: priceNumber },
                    cache: false,
                    success: function (data) {
                        CarChoices = data;
                        resolve(data);
                        if (data && data.optionsList) {
                            updateOptionsTable(data);
                            console.log("dataoptions:", data);
                            console.log("data.optionsList :", data.optionsList);
                        } else {
                            console.error("Invalid data format:", data.optionsList);
                        }
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        reject(errorThrown);
                    }
                });
            });
        }
        //For Contract Pdf
        var ChoiceItems = [];
        ////////////////////////
        $(document).ready(function () {
            // Use event delegation for dynamically generated checkboxes
            $(document).on("change", ".ChkChoicesList", function () {
                var checkedValue = $(this).val();

                if (checkedValue >= '5100000002' && checkedValue <= '5100000005') {
                    var isChecked = $(this).prop("checked");
                    if (isChecked) {
                        $(".ChkChoicesList[value='5100000002'], .ChkChoicesList[value='5100000003'], .ChkChoicesList[value='5100000004'], .ChkChoicesList[value='5100000005']").not(this).prop("checked", false).prop("disabled", true);
                    }
                    else {
                        $(".ChkChoicesList[value='5100000002'], .ChkChoicesList[value='5100000003'], .ChkChoicesList[value='5100000004'], .ChkChoicesList[value='5100000005']").not(this).prop("checked", false).prop("disabled", false);
                    }
                    // Uncheck and disable all checkboxes with values from 5100000002 to 5100000005
                }

                updateTotal();
            });

            function updateTotal() {
                var s = 0;
                var selectedChoices = [];
                var selectedChoiceItems = [];
                $(".ChkChoicesList:checked").each(function () {
                    var dataVal = $(this).attr('data-val');
                    selectedChoices.push($(this).val());
                    s += parseFloat(dataVal) || 0;
                    // For Contract Pdf
                    var label = $(this).parent().find('label'); // Get the label element
                    var dataEn = label.data('en'); // Get the data-en attribute
                    var dataAr = label.data('ar'); // Get the data-ar attribute
                    selectedChoiceItems.push({ value: dataVal, enName: dataEn, arName: dataAr }); // Push name, value, en, and ar as object
                    ChoiceItems = selectedChoiceItems;
                });
                $("#ChoicesList").val(selectedChoices.join(','));
                if (s > 0) {
                    $('#TotalChoices').text(s.toFixed(2));
                } else {
                    $('#TotalChoices').text("0.00");
                }
            }
        });
        function updateAdditionalTable(data) {
            // Assuming 'data' is an object with 'OptionsList' property
            var additionalList = data.addList;

            // Get the tbody container
            var tbodyContainer = $("#additionalBody");

            // Clear existing content
            tbodyContainer.empty();

            // Check if additionalList is empty
            if (additionalList.length === 0) {
                // If no data, hide the table
                $("#AdditionalList").hide();
                return;
            } else {
                // If there is data, show the table
                $("#AdditionalList").show();
            }
            // Populate the tbody with the received data
            additionalList.forEach(function (add) {
                var nameLabel = "@requestCulture?.RequestCulture.UICulture.Name" === "en-US" ? add.enName : add.arName;
                var row = $("<tr>");
                var valueCell = $("<td class='text-center'>" + add.addValue + "</td>");
                var optionsCol = $("<td>");
                var optionsDiv = $("<div class='options-col'>");
                optionsDiv.append("<label data-en='" + add.enName + "' data-ar='" + add.arName + "' for='checkbox-" + add.addCode + "'>" + nameLabel + "</label>");
                optionsDiv.append("<input class='ChkAddList' type='checkbox' name='Additions' value='" + add.addCode + "' data-val='" + add.addValue + "' id='checkbox-" + add.addCode + "'>");
                optionsCol.append(optionsDiv);
                row.append(valueCell);
                row.append(optionsCol);
                tbodyContainer.append(row);
            });

            // Add the total row
            var totalRow = $("<tr>");
            totalRow.append("<td class='text-center' id='TotalAdditionals'>0.00</td>");
            totalRow.append("<td class='text-center'>@localizer["Total"]</td>");
            tbodyContainer.append(totalRow);
        }
        // Function to get CarAdditional data
        function getCarAdditional(priceNumber) {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: "/BS/Contract/GetCarAdditional",
                    type: "GET",
                    data: { priceNumber: priceNumber },
                    cache: false,
                    success: function (data) {
                        CarAdditionals = data;
                        resolve(data);
                        if (data && data.addList) {
                            updateAdditionalTable(data);
                            console.log("dataoptions:", data);
                            console.log("data.optionsList :", data.addList);
                        } else {
                            console.error("Invalid data format:", data.addList);
                        }
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        reject(errorThrown);
                    }
                });
            });
        }
        //For Contract Pdf
        var AdditionalsItems = [];
        ////////////////////////
        $(document).ready(function () {
            // Use event delegation for dynamically generated checkboxes
            $(document).on("change", ".ChkAddList", function () {
                var checkedValue = $(this).val();

                if (checkedValue >= '5000000003' && checkedValue <= '5000000004') {
                    var isChecked = $(this).prop("checked");
                    if (isChecked) {
                        $(".ChkAddList[value='5000000003'], .ChkAddList[value='5000000004']").not(this).prop("checked", false).prop("disabled", true);
                    }
                    else {
                        $(".ChkAddList[value='5000000003'], .ChkAddList[value='5000000004']").not(this).prop("checked", false).prop("disabled", false);
                    }
                }
                console.log("1111111111");
                updateTotal();
            });

            function updateTotal() {
                var s = 0;
                var selectedAdditionals = [];
                var selectedAdditionalsItems = [];
                $(".ChkAddList:checked").each(function () {
                    var dataVal = $(this).attr('data-val');
                    var code = $(this).val();
                    selectedAdditionals.push($(this).val());
                    s += parseFloat(dataVal) || 0;
                    // For Contract Pdf
                    var label = $(this).parent().find('label'); // Get the label element
                    var dataEn = label.data('en'); // Get the data-en attribute
                    var dataAr = label.data('ar'); // Get the data-ar attribute
                    selectedAdditionalsItems.push({ value: dataVal, enName: dataEn, arName: dataAr, code: code }); // Push name, value, en, and ar as object
                    ////////////////////////
                });
                AdditionalsItems = selectedAdditionalsItems;
                $("#AdditionalsList").val(selectedAdditionals.join(','));
                if (s > 0) {
                    $('#TotalAdditionals').text(s.toFixed(2));
                } else {
                    $('#TotalAdditionals').text("0.00");
                }
                IfCarChangeBranchReceiving();
            }

        });
        function IfCarChangeBranchReceiving() {
            const hasCode = AdditionalsItems.some(item => item.code === "5000000003");
            console.log("ReceivingBranch should be shown:", hasCode);

            if (hasCode) {
                $("#ReceivingBranch").show(); // Show the element if the condition is met
            } else {
                document.getElementById("ReceivingBranch").setAttribute("style", "display: none !important;"); // Hide the element with important
                $("#Receiving-branch-dropdown").val(""); // Clear the dropdown value
            }
        }
        function GetCheckUp() {
            // Initialize an empty array to store the data
            var checkUpData = [];

            // Iterate over each table row
            $(".tabel-data-checkbox-td").each(function () {
                var $row = $(this).closest("tr"); // Get the closest <tr> element

                // Extract data from the row
                var notes = $row.find(".check-table-notes").val().trim();
                var $label = $row.find(".Tires");
                var dataEn = $label.data('en'); // Get the data-en attribute
                var dataAr = $label.data('ar'); // Get the data-ar attribute
                var isChecked = $row.find(".CheckUp").is(":checked");
                var selectedReasonCheckCode = $row.find(".form-select").data('code'); // Get the selected value from the <select>
                var selectedReasonCheckId = $row.find(".form-select").val(); // Get the selected value from the <select>
                var selectedReasonCheckName = $row.find(".form-select").text(); // Get the selected value from the <select>

                // Check if the checkbox is checked
                 if (isChecked) {
                    // Create an object to store the extracted data
                   var rowData = {
                        reason: notes,
                        code: selectedReasonCheckCode,
                        no: selectedReasonCheckId,
                        enName: dataEn,
                        arName: dataAr,
                        reasonCheckName: selectedReasonCheckName, // Add the selected value to the object
                        reasonCheckCode: selectedReasonCheckCode // Add the selected value to the object
                    };
                    console.log("rowData CheckUp",rowData)
                    // Push the object into the array
                    checkUpData.push(rowData);
                    CarCheckUp = checkUpData;
                }
            });
        }
        function convertGregorianToHijri(date) {
            const gregorianYear = date.getFullYear();
            const gregorianMonth = date.getMonth() + 1; // شهر 0-11
            const gregorianDay = date.getDate();

            // تقريب الحسابات
            const hijriYear = Math.floor((gregorianYear - 622) * 33 / 32); // تقريب تقويم هجري
            const hijriMonth = Math.floor(((gregorianYear - 622) * 354.367 + gregorianMonth * 30 + gregorianDay) % 354.367 / 30) + 1; // الشهر الهجري
            const hijriDay = Math.floor(((gregorianYear - 622) * 354.367 + gregorianMonth * 30 + gregorianDay) % 30); // اليوم الهجري

            return { year: hijriYear, month: hijriMonth, day: hijriDay };
        }
        function calculateAgeFromHijri(hijriDay, hijriMonth, hijriYear) {
            const today = new Date();
            // تحويل التاريخ الميلادي الحالي إلى هجري باستخدام معادلات دقيقة
            const currentHijriDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());
            const hijriDate = convertGregorianToHijri(currentHijriDate);
            // حساب السنة والشهر واليوم الهجري الحالي
            const currentHijriYear = hijriDate.year;
            const currentHijriMonth = hijriDate.month;
            const currentHijriDay = hijriDate.day;
            // حساب العمر
            let age = currentHijriYear - hijriYear;

            // التحقق إذا كانت عيد الميلاد قد حدث هذا العام
            if (
                currentHijriMonth < hijriMonth ||
                (currentHijriMonth === hijriMonth && currentHijriDay < hijriDay)
            ) {
                age--; // ناقص سنة إذا لم يحتفل بعيد الميلاد بعد
            }
            return age; // إرجاع العمر
        }
        function calculateAgeFromGregorian(day, month, year) {
            const today = new Date();
            const birthDate = new Date(year, month - 1, day); // JavaScript months are 0-based

            let age = today.getFullYear() - birthDate.getFullYear();
            const hasBirthdayOccurred =
                today.getMonth() < birthDate.getMonth() ||
                (today.getMonth() === birthDate.getMonth() && today.getDate() < birthDate.getDate());

            if (hasBirthdayOccurred) {
                age--; // إذا لم يكن عيد الميلاد قد حدث بعد هذا العام، نطرح سنة واحدة
            }

            return age; // إرجاع العمر
        }

        function calculateAge(day, month, year, personId) {
            if (personId.startsWith('1')) {
                // إذا كان renterId يبدأ بـ '1'، استخدم الدالة لحساب العمر من التاريخ الهجري
                return calculateAgeFromHijri(day, month, year);
            } else {
                // استخدم الدالة لحساب العمر من التاريخ الميلادي
                return calculateAgeFromGregorian(day, month, year);
            }
        }
        var rentValue = 0;
        var choicesValue = 0;
        var additionalValue = 0;
        var advantagesValueTotal = 0;
        var additionalDriverValue = 0;
        var privateDriverValue = 0;
        var FeesTammValue = 0;
        var contractValue = 0;
        var totalContract = 0;
        var discountValue = 0;
        var taxValue = 0;
        var TotalActualContract = 0;
        var TotalAmount = 0;
        var somethingIsNotOkay = true;
        //Calculate Contract
        function CalculateContract() {
            var price = 0;
            var daysNo = document.getElementById('dayNo').value;
            var dateTimeNow = decodeHTMLEntities('@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffK")');
            var today = new Date(dateTimeNow);
            var RentalDayPrice = CarInformation.carPrice.crCasPriceCarBasicDailyRent;
            if (parseInt(daysNo) > 0) {
                var options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' };
                var formattedstartDate = today.toLocaleDateString('ja-JP', options);
                document.getElementById('StartDate').textContent = formattedstartDate;
                today.setDate(today.getDate() + parseInt(daysNo));
                var formattedEndDate = today.toLocaleDateString('ja-JP', options);
                document.getElementById('EndDate').textContent = formattedEndDate;

                rentValue = parseInt(daysNo) * parseFloat(RentalDayPrice);
                document.getElementById('RentValue').textContent = rentValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

                var TotalChoices = $("#TotalChoices").text();
                if (TotalChoices != null && TotalChoices != 0 && TotalChoices != "" && TotalChoices != undefined) {
                    choicesValue = parseFloat(TotalChoices) * parseInt(daysNo);
                    document.getElementById('ChoicesValue').textContent = choicesValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                }
                else {
                    document.getElementById('ChoicesValue').textContent = "0.00";
                    choicesValue = 0;
                }
                $("#Contract_OptionTotal").val(choicesValue);

                var TotalAdditionals = $("#TotalAdditionals").text();
                if (TotalAdditionals != null && TotalAdditionals != 0 && TotalAdditionals != "" && TotalAdditionals != undefined) {
                    additionalValue = parseFloat(TotalAdditionals);
                    document.getElementById('AdditionalValue').textContent = additionalValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

                }
                else {
                    document.getElementById('AdditionalValue').textContent = "0.00";
                    additionalValue = 0;
                }
                $("#Contract_AdditionalTotal").val(additionalValue);
                var AdvatagesTotalValue = parseFloat(AdvantagesValue);
                if (AdvatagesTotalValue != null && AdvatagesTotalValue != "") {
                    advantagesValueTotal = AdvatagesTotalValue * parseInt(daysNo);
                    document.getElementById('AdvatagesValue').textContent = advantagesValueTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                }
                else {
                    document.getElementById('AdvatagesValue').textContent = "0.00";
                    advantagesValueTotal = 0;
                }
                $("#Contract_AdvantagesTotalValue").val(advantagesValueTotal);


                var additionalDriver = document.getElementById("addational-driver");
                if (additionalDriver.checked) {
                    var AddDriverValue = CarInformation.carPrice.crCasPriceCarBasicAdditionalDriverValue;
                    if (parseInt(AddDriverValue) != null) {
                        additionalDriverValue = parseFloat(AddDriverValue);
                        document.getElementById('AddDriverValue').textContent = additionalDriverValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                    }
                    else {
                        document.getElementById('AddDriverValue').textContent = "0.00";
                        additionalDriverValue = 0;
                    }
                }


                var privateDriverRadio1 = document.getElementById("PrivateDriver");
                var privateDriverID = $("#Private-Driver-selectt").val();

                if (privateDriverRadio1.checked && privateDriverID != null) {
                    var privateDriver = CarInformation.carPrice.crCasPriceCarBasicPrivateDriverValue;
                    console.log("privateDriverPrice", privateDriver);

                    if (privateDriver != null) {
                        privateDriverValue = parseFloat(privateDriver) * parseInt(daysNo);
                        document.getElementById('PrivateDriverValue').textContent = privateDriverValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                    }
                    else {
                        document.getElementById('PrivateDriverValue').textContent = "0.00";
                        privateDriverValue = 0;
                    }
                }
                else {
                    privateDriverValue = 0;
                    document.getElementById('PrivateDriverValue').textContent = "0.00";
                }
                //Get FeeTmm Out Or in value
                getFeeTmm();


                // Contract Value Total
                contractValue = rentValue + choicesValue + additionalValue + advantagesValueTotal + additionalDriverValue + privateDriverValue + FeesTammValue;
                document.getElementById('contractValue').textContent = contractValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                $("#Contract_ContractValueBeforeDiscount").val(contractValue);
                // get discount and totalContract Value
                CalculateDiscount();
                // Get Tax value from TotalActualContract and get value of TotalActualContract
                CalculateTax();
                CalculateTotalAmount();
                $("#payment-extra-details").show();
                $('#AmountPayed').prop('readonly', false);
            } else {
                clearPaymentData();
            }

        }
        function clearPaymentData() {
            $("#payment-extra-details").hide();
            $("#dropdown-content-payment").hide();
            document.getElementById('EndDate').textContent = "";
            document.getElementById('InFeesTammValue').textContent = "0.00";
            document.getElementById('contractValue').textContent = "0.00";
            document.getElementById('RentValue').textContent = "0.00";
            document.getElementById('PrivateDriverValue').textContent = "0.00";
            document.getElementById('AddDriverValue').textContent = "0.00";
            document.getElementById('AdvatagesValue').textContent = "0.00";
            document.getElementById('AdditionalValue').textContent = "0.00";
            document.getElementById('ChoicesValue').textContent = "0.00";
            document.getElementById("totalContract").textContent = "0.00";
            document.getElementById('Taxvalue').textContent = "0.00";
            document.getElementById('TotalActualContract').textContent = "0.00";
            document.getElementById("TotalAmount").textContent = "0.00";
            document.getElementById("dayNo").value = "";
            document.getElementById("Discount_Input").value = 0;
            document.getElementById("Delegate-out").checked = false;
            $('#AmountPayed').prop('readonly', true);
            $('#AmountPayed').val("");
            document.getElementById('Contract_PaymentMethod').disabled = true;
            document.getElementById('Contract_PaymentMethod').selectedIndex = 0;
            document.getElementById('Contract_SalesPoint').disabled = true;
            document.getElementById('Contract_SalesPoint').selectedIndex = 0;
            $("#Contract_SalesPoint").empty();
            rentValue = 0;
            choicesValue = 0;
            additionalValue = 0;
            advantagesValueTotal = 0;
            additionalDriverValue = 0;
            privateDriverValue = 0;
            FeesTammValue = 0;
            contractValue = 0;
            totalContract = 0;
            discountValue = 0;
            taxValue = 0;
            TotalActualContract = 0;
            TotalAmount = 0;
        }
        function validateDaysNo(input) {
            let maximumNoDays = 365;

            input.value = input.value.replace(/[^0-9]/g, '');
            let value = parseInt(input.value);

            if (isNaN(value)) {
                input.value = '';
            } else if (value > maximumNoDays) {
                input.value = maximumNoDays.toString();
            } else if (value < 1) {
                input.value = '1';
            }

            console.log("value Days", value);
        }
        //This Function Show if FeeTamm Is Out or In
        $(document).ready(
            function () {
                $("#Delegate-out").click(function () {
                    CalculateContract();
                })
            });
        function getFeeTmm() {
            var InFeesTamm = CarInformation.carPrice.crCasCarPriceBasicInFeesTamm;
            var OutFeesTamm = CarInformation.carPrice.crCasCarPriceBasicOutFeesTamm;
            var OutFeesTammInput = document.getElementById('Delegate-out');

            if (OutFeesTammInput.checked) {
                if (parseFloat(OutFeesTamm) != null && parseFloat(OutFeesTamm) != "") {
                    FeesTammValue = parseFloat(OutFeesTamm);
                    document.getElementById('InFeesTammValue').textContent = FeesTammValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                }
                else {
                    document.getElementById('InFeesTammValue').textContent = "0.00";
                    FeesTammValue = 0;
                }
                $("#Contract_OutFeesTmm").val("true");
                $("#Contract_FeesTmmValue").val(FeesTammValue);
            }
            else {
                if (parseFloat(InFeesTamm) != null) {
                    FeesTammValue = parseFloat(InFeesTamm);
                    document.getElementById('InFeesTammValue').textContent = FeesTammValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                }
                else {
                    document.getElementById('InFeesTammValue').textContent = "0.00";
                    FeesTammValue = 0;
                }
                $("#Contract_OutFeesTmm").val("false");
                $("#Contract_FeesTmmValue").val(FeesTammValue);
            }
        }
        function CalculateDiscount() {
            var DiscountInput = document.getElementById("Discount_Input").value;
            if (parseFloat(DiscountInput) != null && parseFloat(DiscountInput) != "" && parseFloat(DiscountInput) != 0 && parseFloat(DiscountInput) != undefined) {
                discountValue = (contractValue * (parseFloat(DiscountInput) / 100)).toFixed(2);
                totalContract = contractValue - discountValue;
            }
            else {
                totalContract = contractValue;
                discountValue = 0;

            }
            document.getElementById("totalContract").textContent = totalContract.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#Contract_ContractValueAfterDiscount").val(totalContract);
            $("#Contract_DiscountValue").val(discountValue);
            CalculateTax();
            CalculateTotalAmount();
        };
        function CalculateTax() {
            var TaxPercent = parseInt(CarInformation.carPrice.crCasPriceCarBasicRentalTaxRate);
            if (TaxPercent != null && TaxPercent != "" && TaxPercent != undefined && TaxPercent != 0) {
                taxValue = (totalContract * (TaxPercent / 100)).toFixed(2);
                TotalActualContract = parseFloat(taxValue) + parseFloat(totalContract);
            }
            else {
                taxValue = 0;
                TotalActualContract = parseFloat(totalContract);
            }
            document.getElementById('Taxvalue').textContent = taxValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            document.getElementById('TotalActualContract').textContent = TotalActualContract.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#Contract_TaxValue").val(taxValue);
        }
        function CalculateTotalAmount() {
            // Get Total Of amount Required
            if (parseFloat(TotalActualContract) <= parseFloat(RenterBalance)) {
                TotalAmount = "0.00";
            }
            else {
                TotalAmount = Math.abs(parseFloat(RenterBalance) - parseFloat(TotalActualContract));
            }
            document.getElementById("TotalAmount").textContent = TotalAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#Contract_TotalContractAmount").val(TotalAmount);
        }
    </script>

    <script>
        // Define the handleDiscountInput function
        function handleDiscountInput(input) {
            // Remove non-digit characters and additional decimal points
            input.value = input.value.replace(/[^0-9\.]/g, '');
            const decimalIndex = input.value.indexOf('.');

            // Limit to 9 digits before and after the decimal point
            if (decimalIndex !== -1) {
                const digitsBeforeDecimal = input.value.substring(0, decimalIndex);
                const digitsAfterDecimal = input.value.substring(decimalIndex + 1);

                // Limit to 2 digits after the decimal point
                input.value = digitsBeforeDecimal.substr(0, 9) + '.' + digitsAfterDecimal.substr(0, 2);

                // Remove additional decimal points
                if (input.value.indexOf('.', decimalIndex + 1) !== -1) {
                    const lastValidIndex = input.value.lastIndexOf('.');
                    input.value = input.value.substring(0, lastValidIndex) + input.value.substring(lastValidIndex + 1);
                }
            } else {
                // Limit to 2 digits before the decimal point
                input.value = input.value.substr(0, 3);
            }

            // Retrieve userDiscount from the model
            var userDiscount = @Html.Raw(Json.Serialize(userInfo?.CrMasUserContractValidity?.CrMasUserContractValidityDiscountRate));

            // Ensure the value is between 0 and 100
            const numericValue = parseFloat(input.value);
            if (isNaN(numericValue) || isNaN(userDiscount)) {
                input.value = '0';
            } else if (!isNaN(userDiscount) && parseFloat(input.value) > parseFloat(userDiscount)) {
                input.value = userDiscount.toFixed(2);
            }
        }
        function handleAdditionalHoursInput(inputElement) {
            inputElement.value = inputElement.value.replace(/[^0-9]/g, '');
            // Retrieve userDiscount from the model
            var userAdditionalHours = @Html.Raw(Json.Serialize(userInfo?.CrMasUserContractValidity?.CrMasUserContractValidityHour));
            // Ensure the value is between 0 and 100
            const numericValue = parseInt(inputElement.value);
            if (isNaN(numericValue) || isNaN(userAdditionalHours)) {
                inputElement.value = '0';
            } else {
                inputElement.value = Math.min(userAdditionalHours, Math.max(0, numericValue));
            }
        }
        function handleAdditionalKilosInput(inputElement) {
            inputElement.value = inputElement.value.replace(/[^0-9]/g, '');
            // Retrieve userDiscount from the model
            var userAdditionalKilos = @Html.Raw(Json.Serialize(userInfo?.CrMasUserContractValidity?.CrMasUserContractValidityKm));
            // Ensure the value is between 0 and 100
            const numericValue = parseInt(inputElement.value);
            if (isNaN(numericValue) || isNaN(userAdditionalKilos)) {
                inputElement.value = '0';
            } else {
                inputElement.value = Math.min(userAdditionalKilos, Math.max(0, numericValue));
            }
        }
        function handleAmountPayed(input) {
            // Remove non-digit characters and additional decimal points
            input.value = input.value.replace(/[^0-9\.]/g, '');
            const decimalIndex = input.value.indexOf('.');
            // Limit to 9 digits before and after the decimal point
            if (decimalIndex !== -1) {
                const digitsBeforeDecimal = input.value.substring(0, decimalIndex);
                const digitsAfterDecimal = input.value.substring(decimalIndex + 1);

                // Limit to 2 digits after the decimal point
                input.value = digitsBeforeDecimal.substr(0, 7) + '.' + digitsAfterDecimal.substr(0, 2);

                // Remove additional decimal points
                if (input.value.indexOf('.', decimalIndex + 1) !== -1) {
                    const lastValidIndex = input.value.lastIndexOf('.');
                    input.value = input.value.substring(0, lastValidIndex) + input.value.substring(lastValidIndex + 1);
                }
            } else {
                // Limit to 7 digits before the decimal point
                input.value = input.value.substr(0, 7);
            }
        }
        function CheckIfCanPayLessThanTotalAmount() {
            var userAuthAmount = @Html.Raw(Json.Serialize(userInfo?.CrMasUserContractValidity?.CrMasUserContractValidityLessContractValue));
            var AmountPayed = document.getElementById("AmountPayed").value;
            if (userAuthAmount == false && TotalAmount > AmountPayed) {

                toastr.error('@localizer["DontHaveAuthPayLessThanTotalAmount"]');
                $("#AmountPayed").css({ "border": "2px solid red" });    //This For last Check When i submit Form
                somethingIsNotOkay = false;
            }
            else {
                $("#AmountPayed").css({ "border": "1px solid #faa64d" }); //This For last Check When i submit Form
                somethingIsNotOkay = true;
            }
        }
    </script>

    <script>
        $(document).ready(function () {
            $("#AmountPayed").focusout(function () {
                var payed = document.getElementById('AmountPayed').value;
                CheckIfCanPayLessThanTotalAmount();
                if (parseFloat(payed) > 0 && somethingIsNotOkay) {
                    document.getElementById('Contract_PaymentMethod').disabled = false;
                    // document.getElementById('Contract_PaymentMethod').selectedIndex = 0;
                    document.getElementById('Contract_SalesPoint').disabled = false;
                    document.getElementById('Contract_SalesPoint').selectedIndex = 0;
                } else {
                    document.getElementById('Contract_PaymentMethod').disabled = true;
                    document.getElementById('Contract_PaymentMethod').selectedIndex = 0;
                    document.getElementById('Contract_SalesPoint').disabled = true;
                    document.getElementById('Contract_SalesPoint').selectedIndex = 0;
                    $("#Contract_SalesPoint").empty();
                }
            })
        });
    </script>

    <!--Create Receipt PDf-->
    <script>
        async function CreateReceiptPdf() {
                const accountReceiptNo = "@ViewBag.AccountReceiptNo";
                const canvas = document.getElementById("myCanvas");
                const dates = getFormattedDatesMiliadiAndHijri();
                var namesOfPaymentMethod = getSelectedOptionDataPaymentMethod();
                var getAfterAndBeforeDecimalAmountPayed =await getFormattedAmount();
                console.log("getAfterAndBeforeDecimalAmountPayed",getAfterAndBeforeDecimalAmountPayed);
                const contractNo = "@ViewBag.ContractNo";
                const dynamicData = {
                    DATE_AR:dates.hijriDate.ar,
                    DATE_EN: dates.miladiDate.en,
                    HIJRI_DATE_AR: dates.hijriDate.en,
                    HIJRI_DATE_EN: dates.miladiDate.ar ,
                    CONTRACT_NUMBER: accountReceiptNo,
                    AMOUNT: getAfterAndBeforeDecimalAmountPayed.beforeDecimal,
                    HALALAS: getAfterAndBeforeDecimalAmountPayed.afterDecimal,
                    TENANT_NAME_AR: RenterInformation.personalArName,
                    TENANT_NAME_EN: RenterInformation.personalEnName,
                    AMOUNT_AR: getAfterAndBeforeDecimalAmountPayed.arabicText,
                    AMOUNT_EN: getAfterAndBeforeDecimalAmountPayed.englishText,
                    PAYMENT_METHOD_AR: namesOfPaymentMethod.ar,
                    PAYMENT_METHOD_EN: namesOfPaymentMethod.en,
                    PAYMENT_DESC_AR: `${contractNo}  دفعة تحت الحساب لعقد ايجار السيارة لعقد`,
                    PAYMENT_DESC_EN: `Payment to extend the car rental contract ${contractNo}`,
                    NOTES_AR: document.getElementById("FormControl-last-Textarea").value,
                    APPROVER_NAME_AR: decodeHTMLEntities("@user.CrMasUserInformationArName"),
                    APPROVER_NAME_EN: decodeHTMLEntities("@user.CrMasUserInformationEnName"),
                    images: {
                        background: "@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageReceipt)",
                        signature: "@Url.Content(user?.CrMasUserInformationSignature)",
                        qr: "@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageQrCodeSite)",
                        stamp: "@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageStamp)",
                    },
                };
                const loadedImages = await loadDynamicImages(dynamicData.images);
                const dataWithImages = { ...dynamicData, images: loadedImages };
                console.log("dataWithImages",dataWithImages);
                await drawReceipt(canvas, dataWithImages);
                createPdf(accountReceiptNo, canvas, "SavePdfReceipt", "Contract_AccountReceiptNo");
        };
        function getSelectedOptionDataPaymentMethod() {
                var selectElement = document.getElementById("Contract_PaymentMethod");
                var selectedOption = selectElement.options[selectElement.selectedIndex];

                // Get the text of the selected option
                const selectedText = selectedOption.textContent || selectedOption.innerText;

                // Get the Arabic and English names from data attributes
                var selectedArabicName = selectedOption.dataset.ar;
                var selectedEnglishName = selectedOption.dataset.en;

                // Return the data as an object
                return {
                    ar: selectedArabicName,
                    en: selectedEnglishName,
                };
        }
        async function getFormattedAmount() {
                        // الحصول على قيمة الإدخال من العنصر
            var AmountPayedInput = document.getElementById("AmountPayed").value;

            // تحويل القيمة إلى رقم والتأكد من وجود خانتين عشريتين
            const rawAmountPayed = parseFloat(AmountPayedInput).toFixed(2);

            // تقسيم الرقم إلى جزأين: الجزء الصحيح والجزء العشري
            const [beforeDecimalll, afterDecimal] = rawAmountPayed.split(".");

            // تنسيق الجزء الصحيح ليشمل فاصلة الآلاف
                const beforeDecimal = parseInt(beforeDecimalll).toLocaleString('en-US');

                    // استدعاء البيانات لتغيير الرقم إلى نص
                        const numberToText = await dataChanged(rawAmountPayed);

                    // النص بالعربية والإنجليزية
                    const arabicText = numberToText.ar_concatenate;
                    const englishText = numberToText.en_concatenate;

                    // إرجاع النتيجة
                    return {
                        beforeDecimal,
                        afterDecimal,
                        arabicText,
                        englishText
                    };
            }
    </script>
    <!--Create invoice -->
    <script>
        async function CreateInvoicePdf() {
            const accountInvoiceNo = "@ViewBag.InvoiceAccount";
            const canvas = document.getElementById("myCanvas");
             const dates = getFormattedDatesMiliadiAndHijri();
            var rentDailyValue= GetRentDailyValue();
            var delegationValue= GetDelegationValue();
            var addDriverValue = GetAddDriverValue();
            var privateDriverValue = GetPrivateDriverValue();
            var choicesValue = GetChoicesValue();
            var additionalsValue = GetAdditionalsValue();

            var discountInput = parseFloat(document.getElementById("Discount_Input").value) || 0;
            var daysNo =parseInt(document.getElementById('dayNo').value) || 0;
            var taxPercent = parseFloat(CarInformation.carPrice.crCasPriceCarBasicRentalTaxRate) || 0;
            var advantagesValue = parseFloat(AdvantagesValue) || 0;

            const itemsData = [
                {
                    arabic: "الإيجار",
                    english: "Rent",
                    value: rentDailyValue,
                    number: daysNo,
                    discount: discountInput,
                    vat: taxPercent,
                },
                {
                    arabic: "التفويض",
                    english: "Delegation",
                    value: delegationValue,
                    number: 1,
                    discount: discountInput,
                    vat: taxPercent,
                },
                {
                    arabic: "المميزات",
                    english: "Features",
                    value: advantagesValue,
                    number: daysNo,
                    discount: discountInput,
                    vat: taxPercent,
                },
                {
                    arabic: "السائق الاضافي",
                    english: "Add Driver",
                    value: addDriverValue,
                    number: 1,
                    discount: discountInput,
                    vat: taxPercent,
                },
                {
                    arabic: "الخيارات",
                    english: "Choices",
                    value: choicesValue,
                    number: daysNo,
                    discount: discountInput,
                    vat: taxPercent,
                },
                {
                    arabic: "الاضافات",
                    english: "Additionals",
                    value: additionalsValue,
                    number: 1,
                    discount: discountInput,
                    vat: taxPercent,
                }
            ];

            const processedData = generateInvoiceItems(itemsData);

            const dynamicData = {
                CONTRACT_NUMBER: accountInvoiceNo,
                DATE_AR:dates.hijriDate.ar,
                DATE_EN: dates.miladiDate.en,
                DATE_EN_LONG: dates.hijriDate.en,
                CONTRACT_CREATE_AR: "إنشاء عقد",
                CONTRACT_CREATE_EN: "Create Contract",
                TENANT_NAME_AR: RenterInformation.personalArName,
                TENANT_NAME_EN: RenterInformation.personalEnName,
                CAR_DESCRIPTION_AR: CarInformation.carInformation.crCasCarInformationConcatenateArName,
                CAR_DESCRIPTION_EN: CarInformation.carInformation.crCasCarInformationConcatenateEnName,
                EMPLOYEE_AR: decodeHTMLEntities("@user.CrMasUserInformationArName"),
                EMPLOYEE_EN:decodeHTMLEntities("@user.CrMasUserInformationEnName"),
                images: {
                    background: "@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageTaxInvoice)",
                    signature: "@Url.Content(user?.CrMasUserInformationSignature)",
                    qr: "@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageQrCodeSite)",
                    stamp: "@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageStamp)",
                },
                Serviceitems: processedData.Serviceitems,
                Valueitems: processedData.Valueitems,
                Numberitems: processedData.Numberitems,
                Amountitems: processedData.Amountitems,
                Discountitems: processedData.Discountitems,
                AfterDiscountitems: processedData.AfterDiscountitems,
                VATitems: processedData.VATitems,
                Totalitems: processedData.Totalitems,
            };

            const loadedImages = await loadDynamicImagesInvoice(dynamicData.images);
            const dataWithImages = { ...dynamicData, images: loadedImages };
            console.log("dataWithImages", dataWithImages);
            await drawInvoice(canvas, dataWithImages);
            createPdfInvoice(accountInvoiceNo, canvas, "SavePdfInvoice", "Contract_InitialInvoiceNo");
        }
        function generateInvoiceItems(itemsData) {
            const processedItems = itemsData
                .filter(item => item.value > 0 && item.number > 0) // تصفية القيم الصفرية
                .map(item => {
                    const totalBeforeDiscount = item.value * item.number; // إجمالي السعر قبل الخصم
                    const discountAmount = (item.discount / 100) * totalBeforeDiscount; // قيمة الخصم
                    const afterDiscount = totalBeforeDiscount - discountAmount; // القيمة بعد الخصم
                    const vatAmount = (item.vat / 100) * afterDiscount; // الضريبة
                    const totalAfterVAT = afterDiscount + vatAmount; // الإجمالي بعد الضريبة

                    return {
                        arabic: item.arabic,
                        english: item.english,
                        value: item.value.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), // قيمة الوحدة
                        number: item.number, // العدد
                        amount: totalBeforeDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), // إجمالي السعر قبل الخصم
                        discount: discountAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), // قيمة الخصم
                        afterDiscount: afterDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), // القيمة بعد الخصم
                        vat: vatAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), // الضريبة
                        total: totalAfterVAT.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }), // الإجمالي بعد الضريبة
                    };
                });

            // حساب المجموع لكل عمود
            const sumColumn = (key) =>
                processedItems.reduce((sum, item) => sum + parseFloat(item[key]), 0).toFixed(2);

            return {
                Serviceitems: [
                    ...processedItems.map(item => ({
                        arabic: item.arabic,
                        english: item.english,
                        textAlign: "center",
                    }))
                ],
                Valueitems: [
                    ...processedItems.map(item => ({ content: item.value })),
                    { sum: sumColumn("value") }
                ],
                Numberitems: [
                    ...processedItems.map(item => ({ content: item.number })),
                    { sum: "-" }
                ],
                Amountitems: [
                    ...processedItems.map(item => ({ content: item.amount })),
                    { sum: sumColumn("amount") }
                ],
                Discountitems: [
                    ...processedItems.map(item => ({ content: item.discount })),
                    { sum: sumColumn("discount") }
                ],
                AfterDiscountitems: [
                    ...processedItems.map(item => ({ content: item.afterDiscount })),
                    { sum: sumColumn("afterDiscount") }
                ],
                VATitems: [
                    ...processedItems.map(item => ({ content: item.vat })),
                    { sum: sumColumn("vat") }
                ],
                Totalitems: [
                    ...processedItems.map(item => ({ content: item.total })),
                    { sum: sumColumn("total") }
                ],
            };
        }
        function GetDelegationValue(){
             var InFeesTamm = CarInformation.carPrice.crCasCarPriceBasicInFeesTamm;
             var OutFeesTamm = CarInformation.carPrice.crCasCarPriceBasicOutFeesTamm;
             var OutFeesTammInput = document.getElementById('Delegate-out');
             var FeesTammValue = 0;
             if (OutFeesTammInput.checked) {
                 if (parseFloat(OutFeesTamm) != null) {
                     FeesTammValue = parseFloat(OutFeesTamm);
                 }
                 else {
                     FeesTammValue = 0;
                 }
             }
             else {
                 if (parseFloat(InFeesTamm) != null) {
                     FeesTammValue = parseFloat(InFeesTamm);
                 }
                 else {
                     FeesTammValue = 0;
                 }
             }
             return FeesTammValue;
        }
        function GetRentDailyValue(){
            return parseFloat(CarInformation.carPrice.crCasPriceCarBasicDailyRent) ||0;
        }
        function GetAddDriverValue(){
            var additionalDriver = document.getElementById("addational-driver");
            var additionalDriverValue = 0;
            if (additionalDriver.checked) {
                var AddDriverValue = CarInformation.carPrice.crCasPriceCarBasicAdditionalDriverValue;
                if (parseInt(AddDriverValue) != null) {
                    additionalDriverValue = parseFloat(AddDriverValue);
                }
                else {
                    additionalDriverValue = 0;
                }
            }
            return additionalDriverValue;
        }
        function GetPrivateDriverValue(){
            var privateDriverRadio1 = document.getElementById("PrivateDriver");
            var privateDriverID = $("#Private-Driver-selectt").val();
            var privateDriverValue = 0;
            if (privateDriverRadio1.checked && privateDriverID != null) {
                var privateDriver = CarInformation.carPrice.crCasPriceCarBasicPrivateDriverValue;
                if (privateDriver != null) {
                    privateDriverValue = parseFloat(privateDriver);
                }
                else {
                    privateDriverValue = 0;
                }
            }
            else {
                privateDriverValue = 0;
            }
            return privateDriverValue;
        }
        function GetChoicesValue(){
             var TotalChoices = $("#TotalChoices").text();
             var choicesValue = 0;
             if (TotalChoices != null && TotalChoices != 0 && TotalChoices != "" && TotalChoices != undefined) {
                 choicesValue = parseFloat(TotalChoices);
             }
             else {
                 choicesValue = 0;
             }
             return choicesValue;
        }
        function GetAdditionalsValue(){
            var TotalAdditionals = $("#TotalAdditionals").text();
            var additionalValue = 0;
            if (TotalAdditionals != null && TotalAdditionals != 0 && TotalAdditionals != "" && TotalAdditionals != undefined) {
                additionalValue = parseFloat(TotalAdditionals);
            }
            else {
                additionalValue = 0;
            }
            return additionalValue;
        }
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('msform');
            const submitButton = document.getElementById('SaveContractBtn');

            submitButton.addEventListener('click', async function (event) {

                event.preventDefault();

                if ($("#msform").valid()) {
                    const AmountPayed = document.getElementById("AmountPayed").value;
                    CheckIfCanPayLessThanTotalAmount();
                    if (somethingIsNotOkay) {
                        await handleContractProcessing();
                    } else {
                        CheckIfCanPayLessThanTotalAmount();
                    }
                }
            });
        });
        async function handleContractProcessing() {
            const form = document.getElementById('msform');
            const AmountPayed = document.getElementById("AmountPayed").value;
            try {
                // Show loader
                $("#ContainerLoader").show();

                if (parseFloat(AmountPayed) > 0) {
                     await CreateReceiptPdf();
                     console.log("receipt sent successfully.");
                }

                await CreateInvoicePdf();
                console.log("Invoice sent successfully.");

                await delay(2000);
                $("#ContainerLoader").hide();
                form.submit();
            } catch (error) {
                console.error("Error during contract processing:", error);
            }
        }
        function delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        };
    </script>

    <script>
        $(document).ready(function () {
            $("#Contract_PaymentMethod").change(function () {
                var PaymentMethod = $("#Contract_PaymentMethod").val();
                var BranchCode = $("#SelectedBranch").val();
                $.get("/BS/Contract/GetSalesPoint", { PaymentMethod: PaymentMethod, BranchCode: BranchCode }, function (data) {
                    $("#Contract_SalesPoint").empty();
                    if (data.type == "1" && data.salesPoints != null) {
                        $.each(data.salesPoints, function (index, row) {
                            if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                                $("#Contract_SalesPoint").append("<option  value= '" + row.crCasAccountSalesPointCode + "'>" + row.crCasAccountSalesPointEnName + "</option>")
                            }
                            else {
                                $("#Contract_SalesPoint").append("<option class='text-right' value= '" + row.crCasAccountSalesPointCode + "'>" + row.crCasAccountSalesPointArName + "</option>")
                            }
                        });
                    }
                    else if (data.type == "2" && data.accountBank != null) {
                        $.each(data.accountBank, function (index, row) {
                            if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {

                                $("#Contract_SalesPoint").append("<option value= '" + row.crCasAccountBankCode + "'>" + row.crCasAccountBankEnName + "</option>")
                            }
                            else {
                                $("#Contract_SalesPoint").append("<option class='text-right' value= '" + row.crCasAccountBankCode + "'>" + row.crCasAccountBankArName + "</option>")
                            }
                        });
                    }

                });
            })
        });
    </script>
    <script>
        $(document).ready(function () {
            /////////////////////////////////////////////////////////////////////////search-icon-renter///////////////////////////////////////////////////////////////////
            const imagePayRenter = document.getElementById("seacrh_icon_Renter");
            const dropdownPayRenter = document.getElementById("dropdown_content_Renter");
            imagePayRenter.addEventListener('click', function () {
                if (dropdownPayRenter.style.display === 'block') {
                    dropdownPayRenter.style.display = 'none';
                } else {
                    dropdownPayRenter.style.display = 'block';
                }
            });

            /////////////////////////////////////////////////////////////////////////search-icon-driver///////////////////////////////////////////////////////////////////
            const imagePayDriver = document.getElementById("seacrh_icon_Driver");
            const dropdownPayDriver = document.getElementById("dropdown_content_Driver");
            imagePayDriver.addEventListener('click', function () {
                if (dropdownPayDriver.style.display === 'block') {
                    dropdownPayDriver.style.display = 'none';
                } else {
                    dropdownPayDriver.style.display = 'block';
                }
            });
            /////////////////////////////////////////////////////////////////////////search-icon-AddDriver///////////////////////////////////////////////////////////////////
            const imagePayAddDriver = document.getElementById("seacrh_icon_AddDriver");
            const dropdownPayAddDriver = document.getElementById("dropdown_content_AddDriver");
            imagePayAddDriver.addEventListener('click', function () {
                if (dropdownPayAddDriver.style.display === 'block') {
                    dropdownPayAddDriver.style.display = 'none';
                } else {
                    dropdownPayAddDriver.style.display = 'block';
                }
            });
            /////////////////////////////////////////////////////////////////////////search-ContractINfo///////////////////////////////////////////////////////////////////
            const imagePaymentDetails = document.getElementById("payment-extra-details");
            const dropdownPaymentInfo = document.getElementById("dropdown-content-payment");
            imagePaymentDetails.addEventListener('click', function () {
                if (dropdownPaymentInfo.style.display === 'block') {
                    dropdownPaymentInfo.style.display = 'none';
                } else {
                    dropdownPaymentInfo.style.display = 'block';
                }
            });


        });
        // To decode some string
        function decodeHTMLEntities(text) {
            var textArea = document.createElement("textarea");
            textArea.innerHTML = text;
            return textArea.value;
        }
        // Function to format Hijri date
        function formatHijriDate(date, language) {
            const parsedDate = new Date(date);
            const options = { weekday: 'long', day: 'numeric', year: 'numeric', month: 'long', calendar: 'islamic-umalqura' };
            if (language === 'ar') {
                return parsedDate.toLocaleDateString('ar-SA', options).replace(/هـ/g, ''); // إزالة "هـ" من التاريخ العربي
            } else {
                return parsedDate.toLocaleDateString('en-US-u-ca-islamic-umalqura', options).replace(/AH/g, ''); // إزالة "AH" من التاريخ الإنجليزي
            }
        }
        function formatHijriEnDate(date) {
            const parsedDate = new Date(date);
            const options = { weekday: 'long', day: 'numeric', year: 'numeric', month: 'long', calendar: 'islamic-umalqura' };
            return parsedDate.toLocaleDateString('en-US-u-ca-islamic-umalqura', options).replace(/AH/g, ''); // Remove "AH" suffix
        }
        function getFormatDate(date) {
            const parsedDate = new Date(date);
            if (!isNaN(parsedDate) && parsedDate != null && parsedDate != "") {
                var dateFormat = parsedDate.getFullYear() + '/' +
                    (parsedDate.getMonth() + 1).toString().padStart(2, '0') + '/' +
                    parsedDate.getDate().toString().padStart(2, '0') + ' ' +
                    parsedDate.getHours().toString().padStart(2, '0') + ':' +
                    parsedDate.getMinutes().toString().padStart(2, '0') + ':' +
                    parsedDate.getSeconds().toString().padStart(2, '0');
                return dateFormat;
            }
            return "";
        }
        function formatDateOnly(dateString) {
            var date = new Date(dateString);
            return date.getFullYear() + '/' + (date.getMonth() + 1).toString().padStart(2, '0') + '/' + date.getDate().toString().padStart(2, '0');
        }
        function splitTextInHalf(text) {
            // Check if text is null, empty, or less than or equal to 100 characters
            if (text == null || text === "") {
                return ["", ""];
            }

            if (text.length <= 100) {
                return [text, ""];
            }

            // Find the middle of the text
            const middleIndex = Math.floor(text.length / 2);

            // Find the closest space to the middle to avoid splitting words
            const beforeMiddle = text.lastIndexOf(' ', middleIndex);
            const afterMiddle = text.indexOf(' ', middleIndex + 1);

            // Determine the best split point
            const splitIndex = (middleIndex - beforeMiddle < afterMiddle - middleIndex)
                ? beforeMiddle
                : afterMiddle;

            // Split the text into two parts
            const firstHalf = text.slice(0, splitIndex).trim();
            const secondHalf = text.slice(splitIndex).trim();

            return [firstHalf, secondHalf];
        }
        function splitNumberBeforeAndAfterDecimal(number) {
            let cleanedValueString = number.replace(/,/g, "");
            let parts = cleanedValueString.split('.');
            let beforeDecimal = parts[0];
            let afterDecimal = parts.length > 1 ? parts[1] : "00";
            afterDecimal = afterDecimal.padEnd(2, '0');
            // Add thousands separators to the before decimal part
            beforeDecimal = beforeDecimal.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            return [beforeDecimal, afterDecimal];
        }
    </script>
    <script>
        async function dataChanged(number) {
            try {
                const response = await $.ajax({
                    url: "/BS/Contract/Get_ConvertedNumber_Action",
                    type: "GET",
                    data: { our_No: number },
                });
                return response;
            } catch (error) {
                console.error("Error occurred: ", error);
            }
        }
    </script>
    <script>
        function showSpinner(button) {
            button.dataset.originalContent = button.innerHTML;
            const spinner = document.createElement('div');
            spinner.classList.add('spinner-border', 'spinner-border-sm', 'text-warning');
            spinner.setAttribute('role', 'status');
            const checkIcon = document.createElement('i');
            checkIcon.classList.add('fa-solid', 'fa-check');
            button.innerHTML = '';
            button.appendChild(spinner);
            button.classList.add('spinner-payment-check');
        }

        function removeSpinnerAndChangeColor(button, type) {
            var innerString = "";
            if (type == "signature") {
                innerString = originalContentBtnSignture;
            }
            else if (type == "unified") {
                innerString = originalContentUnifiedContractBtn;
            }
            button.innerHTML = innerString;
            const checkDiv = button.querySelector('.row .col-auto .systems-check');
            if (checkDiv) {
                checkDiv.style.backgroundColor = 'green';
            }
            button.classList.remove('spinner-payment-check');
        }
        // function calculateAge(birthDate) {
        //     // Parse the birthdate
        //     var birthdate = new Date(birthDate);

        //     // Get today's date
        //     var dateTimeNow = decodeHTMLEntities('@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffK")');
        //     var today = new Date(dateTimeNow);

        //     // Calculate the age
        //     var age = today.getFullYear() - birthdate.getFullYear();
        //     var monthDiff = today.getMonth() - birthdate.getMonth();
        //     var dayDiff = today.getDate() - birthdate.getDate();

        //     // Adjust if the birthday hasn't occurred yet this year
        //     if (monthDiff < 0 || (monthDiff === 0 && dayDiff < 0)) {
        //         age--;
        //     }

        //     return age;
        // }

                function getFormattedDatesMiliadiAndHijri() {
            // الحصول على التاريخ الميلادي الحالي من الخادم
            var dateTimeNow = decodeHTMLEntities('@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffK")');
            const miladiDate = new Date(dateTimeNow);

            // تنسيق التاريخ الميلادي
            const miladiOptions = { year: 'numeric', month: '2-digit', day: '2-digit' };
            const miladiDateString = miladiDate.toLocaleDateString('en-US', miladiOptions).split('/').join('/');

            // تنسيق التاريخ الهجري
            const hijriDateStringAr = formatHijriDate(miladiDate, 'ar');
            const hijriDateStringEn = formatHijriDate(miladiDate, 'en');

            return {
                miladiDate: {
                    en: miladiDateString,
                    ar: miladiDateString // يمكن تنسيق التاريخ الميلادي بالعربية إذا أردت
                },
                hijriDate: {
                    ar: hijriDateStringAr,
                    en: hijriDateStringEn
                }
            };
        }
    </script>
    <!--Controller to inputs-->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Get today's date in the format yyyy-mm-dd
            var today = new Date().toISOString().split('T')[0];
            // Set the min attribute of the date input to today's date
            document.getElementById('ExpiryDrivingLicenseDate-driver').setAttribute('min', today);
            document.getElementById('ExpiryDrivingLicenseDate-addDriver').setAttribute('min', today);
        });
    </script>
    <script>
        document.querySelectorAll('.email-input').forEach(function (emailInput) {
            emailInput.addEventListener('input', function (e) {
                const emailValue = emailInput.value;
                const validEmailPattern = /^[a-zA-Z0-9@@._-]*$/;
                if (!validEmailPattern.test(emailValue)) {
                    emailInput.value = emailValue.replace(/[^a-zA-Z0-9@@._-]/g, '');
                }
            });
        });
    </script>
}