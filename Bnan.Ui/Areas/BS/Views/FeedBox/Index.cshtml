@using Bnan.Core.Extensions
@using Bnan.Ui.ViewModels.BS;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;
@model BSLayoutVM
@inject UserManager<CrMasUserInformation> userManager
@inject SignInManager<CrMasUserInformation> signinManager
@inject IViewLocalizer localizer
@{
    var user = await userManager.GetUserAsync(User);
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    ViewData["returnUrl"] = string.IsNullOrEmpty(Context.Request.Path) ? "~/" : $"~{Context.Request.Path.Value}";
    var userInfo = await userManager.Users
          .Include(l => l.CrMasUserMainValidations)
          .Include(l => l.CrMasUserSubValidations)
          .Include(l => l.CrMasUserInformationLessorNavigation)
          .Include(l => l.CrMasUserContractValidity)
          .FirstOrDefaultAsync(l => l.UserName == user.UserName);
    var lessorInfo = await userManager.Users.Include(l => l.CrMasUserInformationLessorNavigation).ThenInclude(l => l.CrMasLessorImage).FirstOrDefaultAsync(x => x.UserName == user.UserName);
}

<link href="~/BranchSys/Pages/css/style.css" rel="styleSheet">
@if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
{
    <link href="~/BranchSys/Pages/css/English_style.css" rel="styleSheet">
}

<style>
    .sec-loader-container {
        position: fixed !important;
        height: 100% !important;
    }
</style>


<div class="container-fluid">
    <section class="section-mainCard">
        <div class="row justify-content-center w-100 h-100">
            <div class="col-11 col-sm-10 col-md-11 col-lg-11 col-xl-10 text-center p-0 ">
                <div class="card main-card ">
                    <div class="row pt-2">
                        <a style="width: fit-content;" asp-action="Index" asp-area="BS" asp-controller="Home">
                            <div>
                                <img src="~/BranchSys/Pages/img/Close.svg" alt="close-icon" class="close-icon" style="margin-left:10px">
                            </div>

                        </a>
                    </div>
                    <div class="row layout-row">

                        <div class="row" style="flex-direction: row-reverse;">
                            <div class="col justify-content-center d-flex title-row">
                                <h1 class="card-title">
                                    @localizer["Feedbox"]
                                </h1>
                            </div>

                        </div>
                        <div class="row justify-content-center h-100 content-row">

                            <div class="col-md-11 mx-0 h-100">
                                <form id="msform" asp-action="AcceptOrNot" asp-controller="FeedBox" asp-area="BS">
                                    <input hidden name="AdministrativeNo" asp-for="@Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresNo">
                                    <input hidden id="status" name="status">
                                    <input hidden id="SavePdfArReceipt" name="SavePdfArReceipt">
                                    <input hidden id="SavePdfEnReceipt" name="SavePdfEnReceipt">
                                    <input hidden id="AccountReceiptNo" name="AccountReceiptNo">
                                    <input hidden id="branch" name="branch">
                                    <fieldset>
                                        <div class="form-card  px-lg-5 py-lg-5 feed-card">
                                            <div class="row data-row">
                                                <div class="col-auto">
                                                    <p id="feed-number"> @localizer["FeedNo"] </p>

                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p>@Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresNo</p>
                                                </div>
                                            </div>
                                            <div class="row data-row">
                                                <div class="col-auto">
                                                    <p id="feed-number"> @localizer["Feeder"]</p>

                                                </div>
                                                <div class="col-auto personal-data">
                                                    @if (requestCulture?.RequestCulture.UICulture.Name == "en-US")
                                                    {
                                                        <p>@userManager.FindByIdAsync(Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresUserInsert).Result.CrMasUserInformationEnName</p>
                                                    }
                                                    else
                                                    {
                                                        <p>@userManager.FindByIdAsync(Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresUserInsert).Result.CrMasUserInformationArName</p>
                                                    }
                                                </div>
                                            </div>
                                            <div class="row data-row">
                                                <div class="col-auto">
                                                    <p id="feed-number">@localizer["Date"]</p>

                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p>@Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresDate?.ToString("yyyy/MM/dd", CultureInfo.InvariantCulture)</p>
                                                </div>
                                            </div>
                                            <div class="row data-row">
                                                <div class="col-auto">
                                                    <p id="feed-number">@localizer["FeedBoxAmount"]</p>

                                                </div>
                                                <div class="col-auto personal-data">
                                                    <p>@Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresDebit?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                </div>
                                            </div>
                                            <div class="row data-row ">
                                                <div class="col-auto">
                                                    <p id="notes">@localizer["reasons"]</p>
                                                </div>
                                                <div class="col-sm-5 col-md-6 col-lg-6">
                                                    <textarea class="form-control textarea-inputs @(requestCulture?.RequestCulture.UICulture.Name != "ar-EG" ? "text-start" : "text-end")" id="reasons" maxlength="100" name="reasons" asp-for="CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresReasons"></textarea>
                                                </div>

                                            </div>
                                            <div class="row data-row text-end">
                                                <div class="col-md-6">
                                                    <p style="color:#D92626;text-align: end;">@localizer["HintFeedBox"]</p>
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row  g-3" style=" justify-content:center;">
                                            <div class="button-card gap-4">
                                                <a class="btn btn-secondary px-5" onclick="AcceptOrNot('Z')"> @localizer["Reject"]</a>
                                                <a class="btn feed-acceptt-btn px-5" onclick="AcceptOrNot('Q')">@localizer["Accept"]</a>
                                            </div>
                                        </div>
                                    </fieldset>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>
<!-- Footer -->
<footer class="fixed-bottom-xl">
    <div class="before-footer-widget">
        <svg width: 100%; height:auto viewbox="0 0 2444 132">
            <path fill="rgba(254, 248, 232, 1)" fill-rule="evenodd"
                  d="M1222 0h1222c-444.13 88-852.127 132-1223.993 132C849.253 132 442.585 88.263 0 .789V0h1222z">
            </path>
        </svg>
    </div>
</footer>
<!-- Footer-->
@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.3/jspdf.umd.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.min.js"></script>
    <script>
        const ArReceipt = async () => {
            try {
                const imageLessor = "@lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageArExternalCatchReceipt";
                console.log("imageLessor", imageLessor)

                const imagePath = imageLessor.replace('~', '');
                const dates = getFormattedDatesMiliadiAndHijri("ar");
                const miladiDateString = dates.miladiDate;
                const hijriDateString = dates.hijriDate;
                // First In Page
                var arBranch = decodeHTMLEntities("@Model.CrCasBranchInformation?.CrCasBranchInformationArShortName");
                const AccountCatchReceiptNo = "@ViewBag.AccountReceiptNo";
                console.log("AccountCatchReceiptNo", AccountCatchReceiptNo)

                const ReferenceNo = '@ViewBag.ReferenceNo';
                var reverseReferenceNo = reverseParts(ReferenceNo);
                var selectedArabicName = "نقدا";
                //get Data Director lessor and branch and get renter and user
                var userName = decodeHTMLEntities("@user.CrMasUserInformationArName");
                var directorOfLessor = decodeHTMLEntities("@user.CrMasUserInformationLessorNavigation?.CrMasLessorInformationDirectorArName");
                var directorOfBranch = decodeHTMLEntities("@Model.CrCasBranchInformation?.CrCasBranchInformationDirectorArName");
                var reasonPayment = document.getElementById("reasons").value;
                var AmountPayedInput = '@Html.Raw(Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresDebit)';
                const AmountPayed = parseFloat(AmountPayedInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

                const [beforeDecimal, afterDecimal] = splitNumberbeforeAndafterDecimal(AmountPayed);
                const numberToText = await dataChanged(AmountPayed);
                const [firstHalf, secondHalf] = splitTextInHalf(numberToText.ar_concatenate)
                var phaseFor = `تغذية صندوق فرع ${arBranch} , رقم المرجع ${reverseReferenceNo} `;
                // Signture Image
                var namesAndSignatures = await loadArSignatures();

                //////////////////////////////////////////////////////////////////////////////////////////////////////////
                let canvas_width = 2481;
                let texts = [
                    { content: AccountCatchReceiptNo, x: canvas_width - 1860, y: 624 },
                    { content: hijriDateString, x: canvas_width - 300, y: 624 },
                    { content: miladiDateString, x: canvas_width - 305, y: 685 },
                    { content: beforeDecimal, x: canvas_width - 2005, y: 720 },
                    { content: afterDecimal, x: canvas_width - 1940, y: 720 },
                    { content: namesAndSignatures.UserNameSendCustody, x: canvas_width - 480, y: 905 },
                    { content: firstHalf, x: canvas_width - 380, y: 1005 },
                    { content: secondHalf, x: canvas_width - 380, y: 1070 },
                    { content: selectedArabicName, x: canvas_width - 400, y: 1185 },
                    { content: phaseFor, x: canvas_width - 390, y: 1285 },
                    { content: reasonPayment, x: canvas_width - 350, y: 1385 },

                    { content: namesAndSignatures.directorOfLessor, x: canvas_width - 320, y: 1568 },
                    { content: namesAndSignatures.UserNameSendCustody, x: canvas_width - 1120, y: 1568 },
                    { content: namesAndSignatures.directorOfBranch, x: canvas_width - 290, y: 1705 },
                    { content: namesAndSignatures.userName, x: canvas_width - 1120, y: 1705 },

                ];
                let signatures = [
                    { content: namesAndSignatures.signatureImg1, x: canvas_width - 400, y: 1495, width: 200, height: 100 },
                    { content: namesAndSignatures.signatureImg4, x: canvas_width - 1170, y: 1495, width: 200, height: 100 },
                    { content: namesAndSignatures.signatureImg3, x: canvas_width - 400, y: 1630, width: 200, height: 100 },
                    { content: namesAndSignatures.signatureImg2, x: canvas_width - 1170, y: 1630, width: 200, height: 100 },
                ];
                let textStyleOptions = {
                    fontWeight: "bold",
                    fontSize: 37,
                    fontFamily: "serif",
                    textColor: "rgba(0, 0, 0)",
                    textAlign: "right"
                };
                const responseImage = await fetch(imagePath);
                const blob = await responseImage.blob();
                let canvas = document.createElement("canvas");
                var ctx = canvas.getContext("2d");
                var img = new Image();
                img.crossOrigin = "Anonymous";
                img.onload = function () {
                    let loadedImageWidth = img.width;
                    let loadedImageHeight = img.height;

                    canvas.width = loadedImageWidth;
                    canvas_width = loadedImageWidth;
                    canvas.height = loadedImageHeight;

                    ctx.drawImage(img, 0, 0);

                    texts.forEach(text => {
                        ctx.font = `${textStyleOptions.fontWeight} ${textStyleOptions.fontSize}px ${textStyleOptions.fontFamily}`;
                        ctx.fillStyle = textStyleOptions.textColor;

                        let textWidth = ctx.measureText(text.content).width;

                        let x = text.x;
                        if (textStyleOptions.textAlign === "right") {
                            x -= textWidth;
                        } else if (textStyleOptions.textAlign === "center") {
                            x -= textWidth / 2;
                        }

                        ctx.fillText(text.content, x, text.y);

                    });

                    signatures.forEach(signature => {
                        let signatureWidth = ctx.measureText(signature.content).width;
                        let x = signature.x;
                        if (textStyleOptions.textAlign === "right") {
                            x -= signatureWidth;
                        } else if (textStyleOptions.textAlign === "center") {
                            x -= signatureWidth / 2;
                        }
                        if (signature.content) {
                            ctx.drawImage(signature.content, x, signature.y, signature.width, signature.height);
                        }
                    });

                    canvas.toBlob(async function (blob) {
                        createPdf(AccountCatchReceiptNo, blob, "SavePdfArReceipt", "ar");
                    }, 'image/png');
                };
                img.src = URL.createObjectURL(blob);
            } catch (error) {
                console.error("Error creating Arabic Receipt:", error);
            }
        };
        const EnReceipt = async () => {
            try {
                const imageLessor = "@lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageEnExternalCatchReceipt";
                console.log("imageLessor", imageLessor)

                const imagePath = imageLessor.replace('~', '');

                const dates = getFormattedDatesMiliadiAndHijri("en");
                const miladiDateString = dates.miladiDate;
                const hijriDateString = dates.hijriDate;
                var enBranch = decodeHTMLEntities("@Model.CrCasBranchInformation?.CrCasBranchInformationEnShortName");
                const AccountCatchReceiptNo = "@ViewBag.AccountReceiptNo";
                console.log("AccountCatchReceiptNo", AccountCatchReceiptNo)
                const ReferenceNo = '@Html.Raw(@Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresNo)';
                var EnNamePayment = "Cash";
                var userName = decodeHTMLEntities("@user.CrMasUserInformationEnName");
                var directorOfLessor = decodeHTMLEntities("@user.CrMasUserInformationLessorNavigation.CrMasLessorInformationDirectorEnName");
                var directorOfBranch = decodeHTMLEntities("@Model.CrCasBranchInformation.CrCasBranchInformationDirectorEnName");
                var reasonPayment = document.getElementById("reasons").value;
                var AmountPayedInput = '@Html.Raw(Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresDebit)';
                const AmountPayed = parseFloat(AmountPayedInput).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                const [beforeDecimal, afterDecimal] = splitNumberbeforeAndafterDecimal(AmountPayed);
                const numberToText = await dataChanged(AmountPayed);
                const [firstHalf, secondHalf] = splitTextInHalf(numberToText.en_concatenate)
                var phaseFor = `Feed box for ${enBranch} Branch ,Reference No. ${ReferenceNo}`;
                // Signture Image
                var namesAndSignatures = await loadEnSignatures();

                // Get Image And Text On
                // Read the image file as a Blob
                const responseImage = await fetch(imagePath);
                const blob = await responseImage.blob();
                var canvas = document.createElement("canvas");
                var ctx = canvas.getContext("2d");
                var img = new Image();
                img.crossOrigin = "Anonymous";
                img.onload = function () {
                    canvas.width = img.width;
                    canvas.height = img.height;

                    ctx.drawImage(img, 0, 0);
                    ctx.font = "bold 33px serif";
                    ctx.textAlign = "left";
                    ctx.fillStyle = "black";


                    ctx.fillText(miladiDateString, canvas.width - 2200, 700);
                    ctx.fillText(hijriDateString, canvas.width - 2220, 630);
                    ctx.font = "bold 37px serif";
                    ctx.fillText(AccountCatchReceiptNo, canvas.width - 620, 625);
                    ctx.fillText(beforeDecimal, canvas.width - 450, 720);
                    ctx.fillText(afterDecimal, canvas.width - 270, 720);
                    ctx.fillText(namesAndSignatures.UserNameSendCustody, canvas.width - 2050, 900);
                    ctx.fillText(firstHalf, canvas.width - 2100, 1013);
                    ctx.fillText(secondHalf, canvas.width - 2100, 1085);
                    ctx.fillText(EnNamePayment, canvas.width - 2000, 1200);
                    ctx.fillText(phaseFor, canvas.width - 2250, 1310);
                    ctx.fillText(reasonPayment, canvas.width - 2050, 1420);
                    ctx.font = "bold 37px serif";

                    ctx.fillText(namesAndSignatures.directorOfLessor, canvas.width - 1990, 1560);
                    if (namesAndSignatures.signatureImg1) {
                        ctx.drawImage(namesAndSignatures.signatureImg1, canvas.width - 1700, 1505, 200, 100);
                    }

                    // Draw user
                    ctx.fillText(namesAndSignatures.userName, canvas.width - 1300, 1560);
                    if (namesAndSignatures.signatureImg2) {
                        ctx.drawImage(namesAndSignatures.signatureImg2, canvas.width - 900, 1505, 200, 100);
                    }

                    // Draw director of branch
                    ctx.fillText(namesAndSignatures.directorOfBranch, canvas.width - 2020, 1690);
                    if (namesAndSignatures.signatureImg3) {
                        ctx.drawImage(namesAndSignatures.signatureImg3, canvas.width - 1700, 1630, 200, 100);
                    }

                    // Draw renter
                    ctx.fillText(namesAndSignatures.renterName, canvas.width - 1300, 1690);
                    if (namesAndSignatures.signatureImg4) {
                        ctx.drawImage(namesAndSignatures.signatureImg4, canvas.width - 900, 1630, 200, 100);
                    }



                    canvas.toBlob(async function (blob) {
                        createPdf(AccountCatchReceiptNo, blob, "SavePdfEnReceipt", "en");
                    }, 'image/png');
                };
                img.src = URL.createObjectURL(blob);
            }
            catch (error) {
                console.error("Error creating Arabic Receipt:", error);
            }
        };
        async function AcceptOrNot(status) {
            var form = document.getElementById('msform');
            // Set the value of the hidden input field
            document.getElementById('status').value = status;
            document.getElementById('branch').value = '@Model.SelectedBranch';
            $("#ContainerLoader").show();
            if (status == "@Status.Accept") {
                await ArReceipt();
                await EnReceipt();
            }
            // Submit the form
            setTimeout(function () {
                form.submit();
            }, 5000);
        }
    </script>


    <script>
        function loadImage(src) {
            return new Promise((resolve) => {
                const img = new Image();
                img.onload = () => resolve(img); // Resolve with the loaded image
                img.onerror = () => resolve(); // Resolve with an empty string if loading fails
                img.src = src;
            });
        }
        async function loadArSignatures() {

            const UserNameSendCustody = '@Html.Raw(userManager.FindByIdAsync(Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresUserInsert).Result.CrMasUserInformationArName)';
            var UserNameSendCustodySignture = '@Html.Raw(userManager.FindByIdAsync(Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresUserInsert).Result.CrMasUserInformationSignature)';
            UserNameSendCustodySignture = UserNameSendCustodySignture.replace('~', '');
            var userName = decodeHTMLEntities("@user.CrMasUserInformationArName");
            var userSignature = decodeHTMLEntities("@user.CrMasUserInformationSignature").replace('~', '');
            var directorOfLessor = decodeHTMLEntities("@user.CrMasUserInformationLessorNavigation.CrMasLessorInformationDirectorArName");
            var directorOfLessorSignature = decodeHTMLEntities("@lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageSignatureDirector").replace('~', '');
            var directorOfBranch = decodeHTMLEntities("@Model.CrCasBranchInformation.CrCasBranchInformationDirectorArName");
            var directorOfBranchSignature = decodeHTMLEntities("@Model.CrCasBranchInformation.CrCasBranchInformationDirectorSignature").replace('~', '');

            const promises = [];

            // Check each signature and push to promises if it exists
            if (directorOfLessorSignature) {
                promises.push(loadImage(directorOfLessorSignature));
            }

            if (userSignature) {
                promises.push(loadImage(userSignature));
            }

            if (directorOfBranchSignature) {
                promises.push(loadImage(directorOfBranchSignature));
            }

            if (UserNameSendCustodySignture) {
                promises.push(loadImage(UserNameSendCustodySignture));
            }

            // Wait for all valid signatures to load
            const signatureImages = await Promise.all(promises);

            return {
                UserNameSendCustody: UserNameSendCustody,
                userName: userName,
                directorOfLessor: directorOfLessor,
                directorOfBranch: directorOfBranch,
                signatureImg1: signatureImages[0] || '', // Use an empty string if not a valid image
                signatureImg2: signatureImages[1] || '',
                signatureImg3: signatureImages[2] || '',
                signatureImg4: signatureImages[3] || ''
            };
        }
        async function loadEnSignatures() {
            const UserNameSendCustody = '@Html.Raw(userManager.FindByIdAsync(Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresUserInsert).Result.CrMasUserInformationEnName)';
            var UserNameSendCustodySignture = '@Html.Raw(userManager.FindByIdAsync(Model.CrCasSysAdministrativeProcedure.CrCasSysAdministrativeProceduresUserInsert).Result.CrMasUserInformationSignature)';
            UserNameSendCustodySignture = UserNameSendCustodySignture.replace('~', '');
            var userName = decodeHTMLEntities("@user.CrMasUserInformationEnName");
            var userSignature = decodeHTMLEntities("@user.CrMasUserInformationSignature").replace('~', '');
            var directorOfLessor = decodeHTMLEntities("@user.CrMasUserInformationLessorNavigation.CrMasLessorInformationDirectorEnName");
            var directorOfLessorSignature = decodeHTMLEntities("@lessorInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageSignatureDirector").replace('~', '');
            var directorOfBranch = decodeHTMLEntities("@Model.CrCasBranchInformation.CrCasBranchInformationDirectorEnName");
            var directorOfBranchSignature = decodeHTMLEntities("@Model.CrCasBranchInformation.CrCasBranchInformationDirectorSignature").replace('~', '');
            // Adding console logs for debugging
            console.log("Loading signatures...");
            const promises = [];

            // Check each signature and push to promises if it exists
            if (directorOfLessorSignature) {
                promises.push(loadImage(directorOfLessorSignature));
            }

            if (userSignature) {
                promises.push(loadImage(userSignature));
            }

            if (directorOfBranchSignature) {
                promises.push(loadImage(directorOfBranchSignature));
            }

            if (UserNameSendCustodySignture) {
                promises.push(loadImage(UserNameSendCustodySignture));
            }

            // Wait for all valid signatures to load
            const signatureImages = await Promise.all(promises);

            return {
                UserNameSendCustody: UserNameSendCustody,
                userName: userName,
                directorOfLessor: directorOfLessor,
                directorOfBranch: directorOfBranch,
                signatureImg1: signatureImages[0] || '', // Use an empty string if not a valid image
                signatureImg2: signatureImages[1] || '',
                signatureImg3: signatureImages[2] || '',
                signatureImg4: signatureImages[3] || ''
            };
        }
    </script>

    <script>
        function createPdf(receiptNo, imageBlob, InputPdf, language) {
            var doc = new jsPDF('p', 'pt', 'a4', true);
            const pageWidth = doc.internal.pageSize.getWidth();
            const pageHeight = doc.internal.pageSize.getHeight();
            try {
                // Convert the image blob to a base64 DataURL
                const reader = new FileReader();
                reader.onload = function () {
                    const imageDataUrl = reader.result;
                    // Add the image to the PDF
                    const imgWidth = pageWidth; // Width of the image in the PDF
                    const imgHeight = pageHeight; // Height of the image in the PDF
                    const imgXPos = 0; // X position of the image (left edge)
                    const imgYPos = 0; // Y position of the image (top edge)
                    doc.addImage(imageDataUrl, 'PNG', imgXPos, imgYPos, imgWidth, imgHeight, '', 'FAST');
                    // Convert the PDF to a blob
                    const pdfBlob = doc.output('blob');
                    const blobUrl = URL.createObjectURL(pdfBlob);
                    const pdfBase64 = doc.output('datauristring');
                    // Set the base64-encoded PDF to the hidden input field
                    document.getElementById(InputPdf).value = pdfBase64;
                    document.getElementById('AccountReceiptNo').value = receiptNo;
                };
                reader.readAsDataURL(imageBlob); // Start reading the image blob
            } catch (error) {
                console.error('Error adding image to PDF:', error);
            }
        }
    </script>
    <script>
        // Function to format Hijri date
        function formatHijriDate(date) {
            const options = { weekday: 'long', day: 'numeric', year: 'numeric', month: 'long', calendar: 'islamic-umalqura' };
            return date.toLocaleDateString('ar-SA', options).replace(/هـ/g, ''); // Remove "هـ" suffix
        }
        // To decode some string
        function decodeHTMLEntities(text) {
            var textArea = document.createElement("textarea");
            textArea.innerHTML = text;
            return textArea.value;
        }
        function formatHijriEnDate(date) {
            const options = { weekday: 'long', day: 'numeric', year: 'numeric', month: 'long', calendar: 'islamic-umalqura' };
            return date.toLocaleDateString('en-US-u-ca-islamic-umalqura', options).replace(/AH/g, ''); // Remove "AH" suffix
        }
        function reverseParts(input) {
            let parts = input.split('-');
            parts.reverse();
            return parts.join("-");
        }
        function getFormattedDatesMiliadiAndHijri(language) {
            // Get the current Miladi date from the server (assuming server provides the date in a specific format)
            var dateTimeNow = decodeHTMLEntities('@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffK")'); // or "@DateTime.Now" if you prefer local server time
            const miladiDate = new Date(dateTimeNow);

            // Format the Miladi date
            const miladiOptions = { year: 'numeric', month: '2-digit', day: '2-digit' };
            const miladiDateString = miladiDate.toLocaleDateString('en-US', miladiOptions).split('/').join('/');

            // Initialize hijriDateString
            let hijriDateString;

            // Format the Hijri date based on the language
            if (language === "ar") {
                hijriDateString = formatHijriDate(miladiDate);
            } else {
                hijriDateString = formatHijriEnDate(miladiDate);
            }

            return {
                miladiDate: miladiDateString,
                hijriDate: hijriDateString
            };
        }
        function splitTextInHalf(text) {
            // Check if text is null, empty, or less than or equal to 100 characters
            if (text == null || text === "") {
                return ["", ""];
            }

            if (text.length <= 100) {
                return [text, ""];
            }

            // Find the middle of the text
            const middleIndex = Math.floor(text.length / 2);

            // Find the closest space to the middle to avoid splitting words
            const beforeMiddle = text.lastIndexOf(' ', middleIndex);
            const afterMiddle = text.indexOf(' ', middleIndex + 1);

            // Determine the best split point
            const splitIndex = (middleIndex - beforeMiddle < afterMiddle - middleIndex)
                ? beforeMiddle
                : afterMiddle;

            // Split the text into two parts
            const firstHalf = text.slice(0, splitIndex).trim();
            const secondHalf = text.slice(splitIndex).trim();

            return [firstHalf, secondHalf];
        }
        function splitNumberbeforeAndafterDecimal(number) {
            let cleanedValueString = number.replace(/,/g, "");
            let parts = cleanedValueString.split('.');
            let beforeDecimal = parts[0];
            let afterDecimal = parts.length > 1 ? parts[1] : "00";
            afterDecimal = afterDecimal.padEnd(2, '0');
            // Add thousands separators to the before decimal part
            beforeDecimal = beforeDecimal.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            return [beforeDecimal, afterDecimal];
        }
        async function dataChanged(number) {
            try {
                const response = await $.ajax({
                    url: "/BS/Contract/Get_ConvertedNumber_Action",
                    type: "GET",
                    data: { our_No: number },
                });
                return response;
            } catch (error) {
                console.error("Error occurred: ", error);
            }
        }
    </script>
}