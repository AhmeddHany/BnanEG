@using Bnan.Ui.ViewModels.BS;
@using Microsoft.AspNetCore.Identity
@model BSLayoutVM
@inject IViewLocalizer localizer
@using Microsoft.EntityFrameworkCore;
@inject UserManager<CrMasUserInformation> userManager
@inject SignInManager<CrMasUserInformation> signinManager
@{
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    ViewData["returnUrl"] = string.IsNullOrEmpty(Context.Request.Path) ? "~/" : $"~{Context.Request.Path.Value}";
    var user = await userManager.GetUserAsync(User);
    var userInfo = await userManager.Users
        .Include(l => l.CrMasUserMainValidations)
        .Include(l => l.CrMasUserSubValidations)
        .Include(l => l.CrMasUserInformationLessorNavigation)
        .ThenInclude(l => l.CrMasLessorImage) // دمج استعلام المؤجر
        .Include(l => l.CrMasUserContractValidity)
        .FirstOrDefaultAsync(l => l.UserName == user.UserName);
}
<link href="~/BranchSys/Pages/css/style.css" rel="styleSheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<!--Pdf-->
<link rel="stylesheet" href="@Url.Content("~/PdfJS/style/style/style.css")">
<!--Pdf-->
@if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
{
    <link href="~/BranchSys/Pages/css/English_style.css" rel="styleSheet">
}
<style>
    *:disabled {
        background-color: white !important;
    }
</style>
<!-- MultiStep Form -->
<div class="container-fluid" id="grad1">
    <section class="section-mainCard">
        <div class="row justify-content-center w-100 h-100">
            <div class="col-11 col-sm-10 col-md-11 col-lg-11 col-xl-10 text-center p-0 ">
                <div class="card main-card ">
                    <div class="row p-2 align-items-center">
                        <a asp-action="Index" asp-area="BS" asp-controller="Home" style="width: fit-content;">
                            <div>
                                <img src="~/BranchSys/Pages/img/Close.svg" alt="close_icon" class="close-icon" style="margin-left:10px;">
                            </div>
                        </a>
                        <a asp-action="Index" asp-area="BS" asp-controller="ContractSettlement" style="width: fit-content;">
                            <div>
                                <img src="~/BranchSys/Pages/img/Arrow_Left.svg" alt="back_icon" class="back-icon">
                            </div>
                        </a>
                    </div>

                    <div class="row flex-row-reverse">
                        <div class="col justify-content-center d-flex title-row">
                            <span class="card-title">
                                @localizer["ContractSettlement"]
                            </span>
                        </div>

                    </div>
                    <div class="row justify-content-center content-row h-100">

                        <div class="col-md-11 mx-0 h-100 pb-2">

                            <form id="SettlementForm" asp-area="BS" asp-controller="ContractSettlement" asp-action="Create" method="post" enctype="multipart/form-data" class="needs-validation" novalidate>
                                <input hidden asp-for="ContractSettlement.CrCasRenterContractBasicNo" />
                                <input hidden asp-for="SelectedBranch" />
                                <input hidden asp-for="ContractSettlement.ActualDaysNo" />
                                <input hidden asp-for="ContractSettlement.AdditionalKm" />
                                <input hidden asp-for="ContractSettlement.TaxValue" />
                                <input hidden asp-for="ContractSettlement.DiscountValue" />
                                <input hidden asp-for="ContractSettlement.ContractValueAfterDiscount" />
                                <input hidden asp-for="ContractSettlement.TotalContract" />
                                <input hidden asp-for="ContractSettlement.ContractValue" />
                                <input hidden asp-for="ContractSettlement.MaxHours" />
                                <input hidden asp-for="ContractSettlement.MaxMinutes" />
                                <input hidden asp-for="ContractSettlement.ExtraHoursValue" />
                                <input hidden asp-for="ContractSettlement.ChoicesValueTotal" />
                                <input hidden asp-for="ContractSettlement.PrivateDriverValueTotal" />
                                <input hidden asp-for="ContractSettlement.PreviousBalance" />
                                <input hidden asp-for="ContractSettlement.AmountRequired" />
                                <input hidden asp-for="ContractSettlement.AdvantagesValueTotal" />
                                <input hidden asp-for="ContractSettlement.CompensationValue" />
                                <input hidden asp-for="ContractSettlement.ExpensesValue" />
                                <input hidden id="StaticContractCardImg" name="StaticContractCardImg" />
                                <input hidden id="SavePdfInvoice" name="SavePdfInvoice" />
                                <input hidden id="SavePdfReceipt" name="SavePdfReceipt" />
                                <input hidden id="SavePdfContract" name="SavePdfContract" />
                                <input hidden asp-for="ContractSettlement.AccountReceiptNo" />
                                <input hidden asp-for="ContractSettlement.InitialInvoiceNo" />
                                <input hidden id="language" name="language" />
                                <div class=" ">
                                    <!-- progressbar -->
                                    <ul id="progressbar">
                                        <li class="active" id="Rental_terms">@localizer["TermsRented"]</li>
                                        <li id="Expenses">@localizer["Expenses"]</li>
                                        <li id="compensation">@localizer["Compensations"]</li>
                                        <li id="check">@localizer["VirtualInspection"]</li>
                                        <li id="payment">@localizer["Payment"]</li>
                                    </ul>
                                </div>
                                <fieldset id="firstFieldset">
                                    <div class="form-card SettlementCard1 ">
                                        <div class="d-flex mb-3 gap-3">
                                            <a href="@Url.Content(Model.ContractSettlement?.CrCasRenterContractBasicPdfFile?.ToString())" target="_blank" class="pdf-anchor"><img src="~/BranchSys/Pages/img/contract.svg" alt="pdf" class="pdf_img"></a>
                                            <a href="@Url.Content(Model.ContractSettlement?.InvoicePdfPath?.ToString())" target="_blank" class="pdf-anchor2"><img src="~/BranchSys/Pages/img/Invoice.svg" alt="pdf" class="pdf_img2"></a>
                                            <a href="@Url.Content(Model.ContractSettlement?.CrCasRenterContractBasicPdfTga?.ToString())" target="_blank" class="pdf-anchor2"><img src="~/BranchSys/Pages/img/naql.svg" alt="pdf" class="pdf_img3"></a>
                                        </div>
                                        <div class="row data-row-Settl ">
                                            <div class=" col-md-12 col-lg-7 data-col-Settl flex-wrap ">
                                                <div class="col-auto ">
                                                    <P>@localizer["ContractNo"]</P>
                                                </div>
                                                <div class="col-auto personal-data ">
                                                    <P>@Model.ContractSettlement.CrCasRenterContractBasicNo</P>
                                                </div>
                                                <div class="col-md-auto  seacrh-icon-col">
                                                    <div class="col-sm-12  d-flex justify-content-end">
                                                        <img src="~/BranchSys/Pages/img/Rectangle 129.svg" alt="seacrh-icon Image" id="hover-image-Settlement">
                                                    </div>
                                                    <div class="dropdown-content dropdown-content-extension" id="dropdown-content-Settlement">
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-12 col-md-auto">
                                                                <p>: @localizer["Renterr"] </p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                @if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
                                                                {
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation.CrMasRenterInformationEnName</p>
                                                                }
                                                                else
                                                                {
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation.CrMasRenterInformationArName</p>
                                                                }
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-12 col-md-auto">
                                                                <p>: @localizer["Car"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                @if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
                                                                {
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationConcatenateEnName</p>
                                                                }
                                                                else
                                                                {
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationConcatenateArName</p>
                                                                }
                                                            </div>

                                                        </div>

                                                        <div class="row dropdown-content-row">
                                                            <div class="col-12 col-md-auto ">
                                                                <p>: @localizer["StartContract"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement.CrCasRenterContractBasicExpectedStartDate?.ToString("yyyy/MM/dd HH:mm", CultureInfo.InvariantCulture)</p>
                                                            </div>

                                                        </div>

                                                        <div class="row dropdown-content-row">
                                                            <div class="col-12 col-md-auto ">
                                                                <p>: @localizer["ExpectedEndContract"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement.CrCasRenterContractBasicExpectedEndDate?.ToString("yyyy/MM/dd HH:mm", CultureInfo.InvariantCulture)</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-12 col-md-auto ">
                                                                <p> : @localizer["ExpectedDaysNo"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement.CrCasRenterContractBasicExpectedRentalDays</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-12 col-md-auto ">
                                                                <p> : @localizer["FreeAdditionalHours"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>
                                                                    <span>@Model.ContractSettlement.CrCasRenterContractBasicUserFreeHours?.ToString() + @Model.ContractSettlement.CrCasRenterContractBasicFreeHours?.ToString()</span>
                                                                </p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-12 col-md-auto ">
                                                                <p> : @localizer["HourMax"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement.CrCasRenterContractBasicHourMax</p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-12 col-md-auto ">
                                                                <p> : @localizer["DailyFreeKm"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>
                                                                    <span>@Model.ContractSettlement.CrCasRenterContractBasicDailyFreeKmUser?.ToString() + @Model.ContractSettlement.CrCasRenterContractBasicTotalDailyFreeKm?.ToString()  </span>
                                                                </p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            @* <div class=" col-md-auto col-lg-6 data-col-Settl flex-wrap Settlement-date ">
                                            <div class="col-auto ">
                                            <P>@localizer["SettlementDate"]</P>
                                            </div>
                                            <div class="col-auto personal-data ">
                                            <P>@DateTime.Now.ToString("yyyy/MM/dd", CultureInfo.InvariantCulture)</P>
                                            </div>
                                            </div> *@
                                        </div>
                                        <div class="row data-row-Settl">
                                            <div class="col-md-12  col-lg-6 col-xl-4 data-col-Settl flex-wrap ">
                                                <div class="col-auto ">
                                                    <P>@localizer["ContractValue"]</P>
                                                </div>
                                                <div class="col-auto personal-data ">
                                                    <P>@Model.ContractSettlement.CrCasRenterContractBasicExpectedTotal?.ToString("N2", CultureInfo.InvariantCulture)</P>
                                                </div>
                                                <div class="col-md-5 col-lg-5 col-xl-4  seacrh-icon-col">
                                                    <div class="col-sm-12  d-flex justify-content-end">
                                                        <img src="~/BranchSys/Pages/img/Rectangle 129.svg" alt="seacrh-icon Image" id="contract-value-Settlement2">
                                                    </div>
                                                    <div class="dropdown-content dropdown-content-extension" id="dropdown-content-Settlement2">
                                                        @if (Model?.ContractSettlement?.CrCasRenterContractBasicExpectedRentValue != null && Model.ContractSettlement.CrCasRenterContractBasicExpectedRentValue != 0)
                                                        {
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-md-auto">
                                                                    <p>: @localizer["Rent"]</p>
                                                                </div>
                                                                <div class="col personal-data">
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasicExpectedRentValue?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                                </div>
                                                            </div>
                                                        }

                                                        @if (Model?.ContractSettlement?.CrCasRenterContractBasicAuthorizationValue != null && Model.ContractSettlement.CrCasRenterContractBasicAuthorizationValue != 0)
                                                        {
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-md-auto">
                                                                    <p>: @localizer["Delegationn"]</p>
                                                                </div>
                                                                <div class="col personal-data">
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasicAuthorizationValue?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                                </div>
                                                            </div>
                                                        }

                                                        @if (decimal.TryParse(Model?.ContractSettlement?.AdvantagesValueTotal, out var advantagesValue) && advantagesValue != 0)
                                                        {
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-md-auto">
                                                                    <p>: @localizer["Features"]</p>
                                                                </div>
                                                                <div class="col personal-data">
                                                                    <p>@Model.ContractSettlement.AdvantagesValueTotal</p>
                                                                </div>
                                                            </div>
                                                        }

                                                        @if (Model?.ContractSettlement?.CrCasRenterContractBasicAdditionalDriverValue != null && Model.ContractSettlement.CrCasRenterContractBasicAdditionalDriverValue != 0)
                                                        {
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-md-auto">
                                                                    <p>: @localizer["AdditionalDriverr"]</p>
                                                                </div>
                                                                <div class="col personal-data">
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasicAdditionalDriverValue?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                                </div>
                                                            </div>
                                                        }

                                                        @if (Model?.ContractSettlement?.CrCasRenterContractBasicExpectedPrivateDriverValue != null && Model.ContractSettlement.CrCasRenterContractBasicExpectedPrivateDriverValue != 0)
                                                        {
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-md-auto">
                                                                    <p>: @localizer["PrivateDriver"]</p>
                                                                </div>
                                                                <div class="col personal-data">
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasicExpectedPrivateDriverValue?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                                </div>
                                                            </div>
                                                        }

                                                        @if (Model?.ContractSettlement?.CrCasRenterContractBasicExpectedOptionsValue != null && Model.ContractSettlement.CrCasRenterContractBasicExpectedOptionsValue != 0)
                                                        {
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-md-auto">
                                                                    <p>: @localizer["Choicess"]</p>
                                                                </div>
                                                                <div class="col personal-data">
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasicExpectedOptionsValue?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                                </div>
                                                            </div>
                                                        }

                                                        @if (Model?.ContractSettlement?.CrCasRenterContractBasicAdditionalValue != null && Model.ContractSettlement.CrCasRenterContractBasicAdditionalValue != 0)
                                                        {
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-md-auto">
                                                                    <p>: @localizer["Additionalss"]</p>
                                                                </div>
                                                                <div class="col personal-data">
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasicAdditionalValue?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                                </div>
                                                            </div>
                                                        }

                                                        @if (Model?.ContractSettlement?.CrCasRenterContractBasicExpectedDiscountValue != null && Model.ContractSettlement.CrCasRenterContractBasicExpectedDiscountValue != 0)
                                                        {
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-md-auto">
                                                                    <p>: @localizer["Discount"]</p>
                                                                </div>
                                                                <div class="col personal-data">
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasicExpectedDiscountValue?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                                </div>
                                                            </div>
                                                        }

                                                        @if (Model?.ContractSettlement?.CrCasRenterContractBasicExpectedTaxValue != null && Model.ContractSettlement.CrCasRenterContractBasicExpectedTaxValue != 0)
                                                        {
                                                            <div class="row dropdown-content-row">
                                                                <div class="col-md-auto">
                                                                    <p>: @localizer["Tax"]</p>
                                                                </div>
                                                                <div class="col personal-data">
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasicExpectedTaxValue?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                        <div class="row data-row-Settl">
                                            <div class="col-md-10 col-lg-6   data-col-Settl flex-wrap align-items-start">
                                                <div class="col-auto">
                                                    <label for="Settlement-type">
                                                        @localizer["TypeOfSettlement"]
                                                    </label>
                                                </div>
                                                <div class="col-12 col-md-7 col-lg-5">
                                                    <select class="form-select form-select-settel" id="Settlement-type" asp-for="ContractSettlement.CrCasRenterContractBasicCloseStatus">
                                                        <option selected disabled>
                                                        </option>
                                                        @foreach (var item in Model.ContractCloseSuspensions)
                                                        {
                                                            <option value="@item.CrMasSupContractCloseSuspensionCode"
                                                                    data-type="@item.CrMasSupContractCloseSuspensionType"
                                                                    data-naqlMain="@item.CrMasSupContractCloseSuspensionNaqlMain"
                                                                    data-naqlSub="@item.CrMasSupContractCloseSuspensionNaqlSub">
                                                                @(requestCulture?.RequestCulture.UICulture.Name != "ar-EG" ? item.CrMasSupContractCloseSuspensionEnName : item.CrMasSupContractCloseSuspensionArName)
                                                            </option>
                                                        }
                                                    </select>
                                                    <div class="row requird-field-row-last">
                                                        <span class="requird-field" asp-validation-for="@Model.ContractSettlement.CrCasRenterContractBasicCloseStatus"></span>
                                                    </div>

                                                </div>
                                                <div class="col-md-auto  seacrh-icon-col">
                                                    <div class="col-sm-12 d-flex justify-content-end ">
                                                        <img src="~/BranchSys/Pages/img/Rectangle 129.svg" alt="seacrh-icon Image" id="Settlement-type-Data" style="cursor: pointer;">
                                                    </div>
                                                    <!-- edited -->
                                                    <div class="dropdown-content dropdown-content-extension"
                                                         id="dropdown-content-Settlement5">
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-12 col-md-auto ">
                                                                <p> نوع التسوية </p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>نوع التسوية</p>
                                                            </div>

                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-5 data-col-Settl ">
                                                <div class="col-auto  d-flex align-items-end gap-1">
                                                    <label class="form-check-label" for="expenses">@localizer["Expense"]</label>
                                                    <input class="form-check-input Settlement-input-checkbox" type="checkbox" value="checked" id="expenses-check" name="checked-expenses">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row data-row-Settl g-3">
                                            <div class=" col-lg-6  data-col-Settl flex-wrap align-items-baseline">
                                                <div class="col-auto">
                                                    <label for="contract_real_endTime">
                                                        @localizer["EndOfSettlement"]
                                                    </label>
                                                </div>
                                                <div class="col-md-5">
                                                    <input type="date" id="contract_real_endTime" class="form-control inputs" asp-for="ContractSettlement.ActualEndContractDate" aria-describedby="inputGroupPrepend" required>
                                                    <div class="row requird-field-row-last">
                                                        <span class="requird-field" asp-validation-for="@Model.ContractSettlement.ActualEndContractDate"></span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=" col-lg-5  data-col-Settl flex-wrap">
                                                <div class="col-auto">
                                                    <p>@localizer["ActualNumberOfDays"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <P id="daysNo">0</P>
                                                </div>

                                            </div>
                                        </div>
                                        <div class="row data-row-Settl">
                                            <div class="col-md-6 data-col-Settl" id="divLateHours" style="display:none">
                                                <div class="col-auto">
                                                    <p id="AddOrLateHoursText">@localizer["FreeHourss"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    <span id="diffHours">00</span><span id="diffMinutes">00</span>
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-lg-5  data-col-Settl flex-wrap " id="mechanismSettlement" style="display:none">
                                                <div class="col-auto">
                                                    <label for="Settlement-mechanism">
                                                        @localizer["SettlementMechanism"]
                                                    </label>
                                                </div>
                                                <div class="col-12 col-md-7 col-lg-6">
                                                    <select class="form-select form-select-settel" id="Settlement-mechanism" asp-for="ContractSettlement.SettlementMechanism">
                                                        <option selected disabled>
                                                        </option>
                                                        <option value="0">@localizer["Without"]</option>
                                                        <option value="2">@localizer["CompanyPolicy"]</option>
                                                        <option value="1">@localizer["Day"]</option>
                                                        <option value=".5">@localizer["DayHalf"]</option>
                                                    </select>
                                                    <div class="row requird-field-row-last">
                                                        <span class="requird-field" id="requird_field_SettlementMechanism" asp-validation-for="@Model.ContractSettlement.SettlementMechanism"></span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row data-row-Settl">
                                            <div class=" col-lg-6  data-col-Settl flex-wrap">
                                                <div class="col-auto">
                                                    <p>@localizer["ReceivingBranch"] </p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    @if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
                                                    {
                                                        <P>@Model.ContractSettlement?.CrCasRenterContractBasic1?.CrCasBranchInformationEnShortName</P>
                                                    }
                                                    else
                                                    {
                                                        <P>@Model.ContractSettlement?.CrCasRenterContractBasic1?.CrCasBranchInformationArShortName</P>
                                                    }
                                                </div>

                                            </div>
                                            <div class="col-md-5 data-col-Settl ">
                                                <div class="col-auto">
                                                    <p>@localizer["DeliveryBranch"]</p>
                                                </div>
                                                <div class="col-auto personal-data">
                                                    @if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
                                                    {
                                                        <P>@Model.CrCasBranchInformation?.CrCasBranchInformationEnShortName</P>
                                                    }
                                                    else
                                                    {
                                                        <P>@Model.CrCasBranchInformation?.CrCasBranchInformationArShortName</P>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        @* <div class="row data-row-Settl ">
                                            <div class=" col-lg-5  data-col-Settl flex-wrap">
                                                <div class="col-auto ">
                                                    <label class="form-check-label" for="expenses-check">@localizer["Expense"]</label>
                                                    <input class="form-check-input Settlement-input-checkbox" type="checkbox" value="checked" id="expenses-check" name="checked-expenses">
                                                </div>
                                            </div>
                                            <div class="col-md-5 data-col-Settl mb-4 ">
                                                <div class="col-auto ">
                                                    <label class="form-check-label" for="compensation-check">@localizer["Compensation"]</label>
                                                    <input class="form-check-input Settlement-input-checkbox" type="checkbox" value="checked" id="compensation-check" name="checked-compensation">
                                                </div>
                                            </div>
                                        </div> *@
                                        <div class="row p-2" style="flex-direction:row-reverse">
                                            <div class="col-auto">
                                                <label id="notes" for="FormControl-last-Textarea">@localizer["reasons"]</label>
                                            </div>
                                            <div class="col-lg-7">
                                                <textarea class="form-control textarea-inputs @(requestCulture?.RequestCulture.UICulture.Name != "ar-EG" ? "text-start" : "text-end")" rows="1" maxlength="100" asp-for="ContractSettlement.CrCasRenterContractBasicReasons"></textarea>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row button-row">
                                        <div class="button-card">
                                            <img src="~/BranchSys/Pages/img/Group.png" alt="Button Image"
                                                 class="next action-button"
                                                 style="vertical-align: middle; ">
                                            <input type="button" name="next" class="next action-button"
                                                   value="@localizer["Next"]" />
                                        </div>
                                        <div class="button-card">
                                        </div>
                                    </div>


                                </fieldset>
                                <fieldset id="SecondFieldset">
                                    <div class="form-card form-card1">

                                        <div class="row expensesRow flex-lg-row-reverse flex-column-reverse g-2 ">
                                            <div class="col-lg-6">
                                                <div class="TablesReferenceDiv">
                                                    <div>
                                                        <table class="table Expenses-compensation-Table" id="Expenses-Data-Table">
                                                            <thead>
                                                                <tr>
                                                                    <th style="min-width: 250px;"> @localizer["Statement"] </th>
                                                                    <th style="width: 110px;min-width: 110px;"> @localizer["TheValue"]</th>
                                                                    <th> @localizer["Service"] </th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                <tr>
                                                                    <td><textarea class="check-table-notes" id="Expenses1" maxlength="100" name="Expenses1"></textarea> </td>
                                                                    <td><input type="text" class="Table-inputs" name="ChangeOil" oninput="handleAmountPayed(this)"></td>
                                                                    <td>@localizer["ChangeOilValue"]</td>
                                                                </tr>
                                                                <tr>
                                                                    <td><textarea class="check-table-notes" id="Expenses2" maxlength="100" name="Expenses2"></textarea></td>
                                                                    <td><input type="text" class="Table-inputs" name="TiresExpenses" oninput="handleAmountPayed(this)"></td>
                                                                    <td>@localizer["TiresValue"]</td>
                                                                </tr>
                                                                <tr>
                                                                    <td> <textarea class="check-table-notes" id="Expenses3" maxlength="100" name="Expenses3"></textarea> </td>
                                                                    <td> <input type="text" class="Table-inputs" name="Transportation" oninput="handleAmountPayed(this)"> </td>
                                                                    <td> @localizer["TransportValue"]</td>
                                                                </tr>
                                                                <tr>
                                                                    <td> <textarea class="check-table-notes" id="Expenses4" maxlength="100" name="Expenses4"></textarea></td>
                                                                    <td><input type="text" class="Table-inputs" name="otherExpenses" oninput="handleAmountPayed(this)"></td>
                                                                    <td> @localizer["OthersValue"] </td>
                                                                </tr>
                                                                <tr>
                                                                    <td><textarea class="check-table-notes" id="Expenses5" maxlength="100" name="Expenses5" disabled></textarea></td>
                                                                    <td></td>
                                                                    <td></td>
                                                                </tr>
                                                                <tr class="total">
                                                                    <td colspan="2"><p id="TotalExpenses"></p></td>
                                                                    <td scope="row"><p>@localizer["Total"]</p></td>
                                                                </tr>
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-5">
                                                <div class="TablesReferenceDiv">
                                                    <table class="table Expenses-compensation-Table attatchments-table " id="Expenses-Attatchments-Table">
                                                        <thead>
                                                            <tr> <th colspan="2" class="text-center"> @localizer["Attachments"] </th></tr>
                                                        </thead>
                                                        <tbody>
                                                            <tr>
                                                                <td>
                                                                    <div class="upload__box  upload__box2 d-flex ">
                                                                        <div class="upload_img-wrap_inner">
                                                                            <div class="upload__btn-box" id="Expenses-upload-box">
                                                                                <label class="upload__btn">
                                                                                    <div class="upload-container-checking Expenses-compensation-Upload">
                                                                                        <img class="upload-icon" src="~/BranchSys/Pages/img/Add.svg" alt="Upload Icon" id="addImage">
                                                                                        <input type="file" multiple accept="image/*" id="Expenses-images" class="upload__inputfile ">
                                                                                    </div>
                                                                                </label>
                                                                            </div>
                                                                        </div>

                                                                    </div>

                                                                </td>

                                                                <td>
                                                                </td>



                                                            </tr>
                                                            <tr>

                                                                <td>
                                                                </td>
                                                                <td>
                                                                </td>

                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>

                                        </div>
                                        @* <div class="row flex-row-reverse">
                                            <div class="row">
                                                <div class="expensesDiv align-items-baseline ">
                                                    <div class="col-auto">
                                                        <label id="expensesValue" for="expensesValue-input">@localizer["ExpenseValue"]</label>
                                                    </div>
                                                    <div class="col-auto">
                                                        <input type="tel" class="form-control form-control1" style="width: 130px;" id="expensesValue-input" asp-for="ContractSettlement.ExpensesValue" oninput="handleAmountPayed(this)" aria-describedby="inputGroupPrepend" autocomplete="off" required>
                                                        <div class="row requird-field-row-last">
                                                            <span class="requird-field" id="requird_field_ExpensesValue" asp-validation-for="@Model.ContractSettlement.ExpensesValue"></span>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>
                                        </div>
                                        <div class="row flex-row-reverse expensesRow g-5">
                                            <div class="col-lg-5">

                                                <div class="row expensesDiv expensesDiv-textarea ">
                                                    <div class="col-auto">
                                                        <label id="Expense-statement" for="Expense-statement-input">@localizer["ExpenseStatement"]</label>
                                                    </div>
                                                    <div class="col-lg-9" style="height: 100%;">
                                                        <textarea class="form-control textarea-inputs h-100 @(requestCulture?.RequestCulture.UICulture.Name != "ar-EG" ? "text-start" : "text-end")" cols="25" asp-for="ContractSettlement.ExpensesReasons" id="Expense-statement-input" aria-describedby="inputGroupPrepend" maxlength="200"></textarea>
                                                        <div class="row requird-field-row-last">
                                                            <span class="requird-field" id="requird_field_ExpensesReasons" asp-validation-for="@Model.ContractSettlement.ExpensesReasons"></span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-6">
                                                <div class="upload__box d-flex gap-3">
                                                    <div class="upload_img-wrap_inner" style="display: flex;
                                                                  flex-wrap: wrap;
                                                                  gap: 10px ">
                                                        <div class="upload__img-box " id="FirstUpload-img">
                                                        </div>
                                                        <div class="upload__btn-box" id="upload__btn-box">
                                                            <label class="upload__btn">
                                                                <div class="upload-container-checking" id="btn_expense">
                                                                    <img class="upload-icon" src="~/BranchSys/Pages/img/Group (1).png" alt="Upload Icon" id="addImage">
                                                                    <input type="file" multiple accept="image/*" id="Expenses-images" class="upload__inputfile ">
                                                                </div>
                                                            </label>
                                                        </div>
                                                    </div>
                                                    <span class="@(requestCulture?.RequestCulture.UICulture.Name == "ar-EG" ? "ms-3" : "me-3") ">@localizer["Attachments"]</span>
                                                </div>
                                                <div class="row">
                                                    <p style="color: red;" id="ExpensesError">  </p>
                                                </div>
                                            </div>

                                        </div>
 *@
                                    </div>
                                    <div class="row button-row">
                                        <div class="button-card">
                                            <img src="~/BranchSys/Pages/img/Group.png" alt="Button Image"
                                                 class="next action-button"
                                                 style="vertical-align: middle; ">
                                            <input type="button" name="next" class="next action-button"
                                                   value="@localizer["Next"]" />
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous"
                                                   class="previous action-button-previous"
                                                   value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/Pages/img/Vector.png" alt="Button Image"
                                                 class="previous action-button-previous"
                                                 style="vertical-align: middle; ">
                                        </div>
                                    </div>


                                </fieldset>
                                <fieldset id="ThirdFieldset">
                                    <div class="form-card form-card1">
                                        <div class="row expensesRow flex-lg-row-reverse flex-column-reverse g-2 ">
                                            <div class="col-lg-6">
                                                <div class="TablesReferenceDiv">
                                                    <div>
                                                        <table class="table Expenses-compensation-Table " id="compensation-Data-Table">
                                                            <thead>
                                                                <tr>
                                                                    <th style="min-width: 250px;"> @localizer["Statement"] </th>
                                                                    <th style="width: 110px;min-width: 110px;"> @localizer["TheValue"]</th>
                                                                    <th> @localizer["Service"] </th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                <tr>
                                                                    <td>  <textarea class="check-table-notes" id="compensation1" maxlength="100" name="compensation1"></textarea> </td>
                                                                    <td> <input type="text" class="Table-inputs" name="SpareParts" oninput="handleAmountPayed(this)"> </td>
                                                                    <td> @localizer["SpareParts"] </td>
                                                                </tr>
                                                                <tr>
                                                                    <td><textarea class="check-table-notes" id="compensation2" maxlength="100" name="compensation2"></textarea></td>
                                                                    <td> <input type="text" class="Table-inputs" name="HandFare" oninput="handleAmountPayed(this)"> </td>
                                                                    <td>  @localizer["FareOfTheHand"]</td>
                                                                </tr>
                                                                <tr>
                                                                    <td> <textarea class="check-table-notes" id="compensation3" maxlength="100" name="compensation3"></textarea> </td>
                                                                    <td> <input type="text" class="Table-inputs" name="Transportation" oninput="handleAmountPayed(this)"> </td>
                                                                    <td> @localizer["TransportValue"]</td>
                                                                </tr>
                                                                <tr>
                                                                    <td><textarea class="check-table-notes" id="compensation4" maxlength="100" name="compensation4"></textarea></td>
                                                                    <td> <input type="text" class="Table-inputs " name="AdministrativeFees" oninput="handleAmountPayed(this)"></td>
                                                                    <td> @localizer["AdministrativeFees"] </td>
                                                                </tr>
                                                                <tr>
                                                                    <td> <textarea class="check-table-notes" id="compensation5" maxlength="100" name="compensation5"></textarea></td>
                                                                    <td> <input type="text" class="Table-inputs" name="otherCompensation" oninput="handleAmountPayed(this)"> </td>
                                                                    <td> @localizer["OthersValue"] </td>
                                                                </tr>
                                                                <tr class="total">
                                                                    <td colspan="2"><p id="TotalCompensation"></p></td>
                                                                    <td scope="row"> <p>@localizer["Total"]</p></td>
                                                                </tr>
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-5">
                                                <div class="TablesReferenceDiv">
                                                    <table class="table Expenses-compensation-Table attatchments-table " id="compensation-Attatchments-Table">
                                                        <thead>
                                                            <tr> <th colspan="2" class="text-center"> @localizer["Attachments"] </th> </tr>
                                                        </thead>
                                                        <tbody>
                                                            <tr>
                                                                <td>
                                                                    <div class="upload__box  upload__box2 d-flex ">
                                                                        <div class="upload_img-wrap_inner">
                                                                            <div class="upload__btn-box" id="compensation-upload-box">
                                                                                <label class="upload__btn">
                                                                                    <div class="upload-container-checking Expenses-compensation-Upload">
                                                                                        <img class="upload-icon" src="~/BranchSys/Pages/img/Add.svg" alt="Upload Icon" id="addImage">
                                                                                        <input type="file" multiple accept="image/*" id="compensation-images" class="upload__inputfile ">
                                                                                    </div>
                                                                                </label>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </td>
                                                                <td>
                                                                </td>
                                                            </tr>
                                                            <tr> <td> </td> <td> </td> </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row justify-content-end">
                                            <div class="col-md-auto">
                                                <p style="color:#D92626;margin: 0;">
                                                    @{
                                                        var choice = Model.ContractSettlement.ContractChoices?
                                                        .FirstOrDefault(x => x.CrCasRenterContractChoiceCode == "5100000003" || x.CrCasRenterContractChoiceCode == "5100000004");

                                                        string titleString = (choice?.CrCasRenterContractChoiceCodeNavigation != null)
                                                        ? (requestCulture?.RequestCulture.UICulture.Name == "en-US"
                                                        ? choice.CrCasRenterContractChoiceCodeNavigation.CrMasSupContractOptionsEnName
                                                        : choice.CrCasRenterContractChoiceCodeNavigation.CrMasSupContractOptionsArName)
                                                        : localizer["AgainstOthers"].Value;
                                                    }
                                                    @titleString
                                                </p>
                                            </div>
                                        </div>

                                        @*   <div class="row flex-row-reverse">
                                            <div class="row">
                                                <div class="expensesDiv align-items-baseline ">
                                                    <div class="col-auto">
                                                        <p> @localizer["CrMasUserContractValidityInsurance"] </p>
                                                    </div>

                                                    <div class="col-auto personal-data">
                                                        @if (Model.ContractSettlement.ContractChoices.Find(x => x.CrCasRenterContractChoiceCode == "5100000003") != null)
                                                        {
                                                            if (requestCulture?.RequestCulture.UICulture.Name == "ar-EG")
                                                            {
                                                                <p>@Model.ContractSettlement.ContractChoices?.Find(x => x.CrCasRenterContractChoiceCode == "5100000003").CrCasRenterContractChoiceCodeNavigation.CrMasSupContractOptionsArName</p>

                                                            }
                                                            else
                                                            {
                                                                <p>@Model.ContractSettlement.ContractChoices?.Find(x => x.CrCasRenterContractChoiceCode == "5100000003").CrCasRenterContractChoiceCodeNavigation.CrMasSupContractOptionsEnName</p>

                                                            }
                                                        }
                                                        else if (Model.ContractSettlement.ContractChoices.Find(x => x.CrCasRenterContractChoiceCode == "5100000004") != null)
                                                        {
                                                            // Code to execute if the list contains "5100000004"
                                                            if (requestCulture?.RequestCulture.UICulture.Name == "ar-EG")
                                                            {
                                                                <p>@Model.ContractSettlement.ContractChoices?.Find(x => x.CrCasRenterContractChoiceCode == "5100000004").CrCasRenterContractChoiceCodeNavigation.CrMasSupContractOptionsArName</p>

                                                            }
                                                            else
                                                            {
                                                                <p>@Model.ContractSettlement.ContractChoices?.Find(x => x.CrCasRenterContractChoiceCode == "5100000004").CrCasRenterContractChoiceCodeNavigation.CrMasSupContractOptionsEnName</p>

                                                            }
                                                        }
                                                        else
                                                        {
                                                            <p>@localizer["AgainstOthers"]</p>
                                                        }

                                                    </div>
                                                </div>

                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="compensation-Div align-items-baseline ">
                                                <div class="col-auto">
                                                    <label for="compensation-input">@localizer["CompensationValue"]</label>
                                                </div>
                                                <div class="col-auto">
                                                    <input type="tel" class="form-control form-control1" style="width: 130px;" id="compensation-input" asp-for="ContractSettlement.CompensationValue" oninput="handleAmountPayed(this)" aria-describedby="inputGroupPrepend" autocomplete="off" required>
                                                    <div class="row requird-field-row-last">
                                                        <span class="requird-field" id="requird_field_CompensationValue" asp-validation-for="@Model.ContractSettlement.CompensationValue"></span>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row flex-row-reverse compensation-Row  g-5">
                                            <div class="col-lg-5">

                                                <div class="row compensation-Div compensation-Div-textarea ">
                                                    <div class="col-auto">
                                                        <label for="compensation-statement-input">@localizer["CompensationStatement"]</label>
                                                    </div>
                                                    <div class="col-lg-9" style="height: 100%;">
                                                        <textarea class="form-control textarea-inputs h-100 @(requestCulture?.RequestCulture.UICulture.Name != "ar-EG" ? "text-start" : "text-end")" cols="25" asp-for="ContractSettlement.CompensationReasons" id="compensation-statement-input" aria-describedby="inputGroupPrepend" maxlength="200"></textarea>
                                                        <div class="row requird-field-row-last">
                                                            <span class="requird-field" id="requird_field_CompensationReasons" asp-validation-for="@Model.ContractSettlement.CompensationReasons"></span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-lg-6">
                                                <div class="upload__box d-flex">
                                                    <div class="upload_img-wrap_inner" style="display: flex;flex-wrap: wrap; gap: 10px ">
                                                        <div class="upload__img-box " id="FirstUpload-img2">
                                                        </div>
                                                        <div class="upload__btn-box">
                                                            <label class="upload__btn">
                                                                <div class="upload-container-checking" id="btn_compensation">
                                                                    <img class="upload-icon" src="~/BranchSys/Pages/img/Group (1).png" alt="Upload Icon" id="AddImageCompensation">
                                                                    <input type="file" multiple accept="image/*" id="compensation-images" class="upload__inputfile ">
                                                                </div>
                                                            </label>
                                                        </div>
                                                    </div>
                                                    <span class="@(requestCulture?.RequestCulture.UICulture.Name == "ar-EG" ? "ms-3" : "me-3")">@localizer["Attachments"]</span>
                                                </div>
                                                <div class="row">
                                                    <p style="color: red;" id='compensationError'> </p>
                                                </div>
                                            </div>

                                        </div>
 *@
                                    </div>
                                    <div class="row button-row">
                                        <div class="button-card">
                                            <img src="~/BranchSys/Pages/img/Group.png" alt="Button Image"
                                                 class="next action-button"
                                                 style="vertical-align: middle; ">
                                            <input type="button" name="next" class="next action-button"
                                                   value="@localizer["Next"]" />
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous"
                                                   class="previous action-button-previous"
                                                   value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/Pages/img/Vector.png" alt="Button Image"
                                                 class="previous action-button-previous"
                                                 style="vertical-align: middle; ">
                                        </div>
                                    </div>


                                </fieldset>
                                <fieldset id="FourthFieldset">
                                    <div class="form-card">
                                        <div class="row">
                                            <div class="col-xl-6 virtual-check-data">
                                                <div class="row CurrentReadingg_row flex-row-reverse">
                                                    <div class="col-md-6 sett_checkField">
                                                        <div class="col-auto ">
                                                            <p> @localizer["ReadingBefore"]</p>
                                                        </div>
                                                        <div class="col personal-data">
                                                            <p id="PreviousKM">@Model.ContractSettlement.CrCasRenterContractBasicCurrentReadingMeter?.ToString("N0")</p>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-auto sett_checkField">
                                                        <div class="col-auto ">
                                                            <p> @localizer["DailyFreeKm"] </p>
                                                        </div>
                                                        <div class="col personal-data">
                                                            <p id="FreeKM">0.00</p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row CurrentReadingg_row flex-row-reverse g-3">
                                                    <div class="col-md-6 sett_checkField flex-nowrap">
                                                        <div class="col-auto">
                                                            <label id="CurrentReadingg"
                                                                   for="CurrentReadingg-input">
                                                                @localizer["CurrentMeter"]
                                                            </label>
                                                        </div>
                                                        <div class="col-lg-auto  d-flex flex-column align-items-end">
                                                            <input type="text" class="form-control form-control1" style="width: 130px;" id="CurrentMeter" asp-for="ContractSettlement.CurrentMeter" aria-describedby="inputGroupPrepend" oninput="this.value=this.value.replace(/[^0-9]/g,'')" autocomplete="off" maxlength="6">
                                                            <div class="row requird-field-row-last mb-2" style="height: 52px;">
                                                                <div class="col-12">
                                                                    <span class="requird-field" style="font-size: .625rem;" id="requird_field_CurrentMeter" asp-validation-for="@Model.ContractSettlement.CurrentMeter"></span>
                                                                    <div>
                                                                        <span class="requird-field" id="Error_CurrentMeter" style="font-size: .625rem; color: red;"></span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6 sett_checkField">
                                                        <div class="col-auto ">
                                                            <p> @localizer["AdditionalKm"] </p>
                                                        </div>
                                                        <div class="col personal-data">
                                                            <p id="AdditionalKM">0</p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row mb-3 justify-content-end">
                                                    <div class="col-md-5 d-flex justify-content-end">
                                                        <!-- إضافة فئة text-end هنا -->
                                                        <div class="col-md-auto">
                                                            <button type="button" class="btn check-btn d-flex align-items-center gap-2" data-bs-toggle="modal" href="#TechnicalCheckUp">
                                                                <img src="~/BranchSys/Pages/img/icon (2).svg">
                                                                @localizer["TechnicalInspection"]
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="upload__box d-flex">
                                                    <div class="upload_img-wrap_inner" style="display: flex; flex-wrap: wrap; gap: 10px ">
                                                        <div class="upload__img-box " id="FirstUpload-img3">
                                                        </div>
                                                        <div class="upload__btn-box">
                                                            <label class="upload__btn">
                                                                <div class="upload-container-checking upload__img-box" id="btn_checkup">
                                                                    <img class="upload-icon" src="~/BranchSys/Pages/img/Group (1).png" alt="Upload Icon" id="">
                                                                    <input type="file" multiple accept="image/*" id="examination-images" class="upload__inputfile ">
                                                                </div>
                                                            </label>
                                                        </div>
                                                    </div>

                                                </div>
                                                <div class="row">
                                                    <p style="color: red;" id="examinationError"> </p>
                                                </div>
                                            </div>
                                            <div class="col-xl-6 virtual-check-table">
                                                <div id="referenceDiv">
                                                    <div class="table-scroll" id="tableContainer">
                                                        <table class="table table-bordered  table-hover Checkup-table ">
                                                            <thead>
                                                                <tr>
                                                                    <th scope="col"
                                                                        class="value-tabel-header">
                                                                        @localizer["reasons"]
                                                                    </th>
                                                                    <th scope="col">
                                                                        @localizer["TheCheck"]
                                                                    </th>
                                                                    <th scope="col">
                                                                        <div class="d-flex justify-content-center gap-3">
                                                                            <div class="col">
                                                                                @localizer["CheckUpNames"]
                                                                            </div>
                                                                            <div class="col-auto p-0">
                                                                                <input type="checkbox" id="CheckAll" />
                                                                            </div>
                                                                        </div>
                                                                    </th>
                                                                </tr>
                                                            </thead>
                                                            <tbody id="CheckBody">
                                                                <partial name="_CheckUpListSettlement" />
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="row button-row">
                                        <div class="button-card">
                                            <img src="~/BranchSys/Pages/img/Group.png" alt="Button Image"
                                                 class="next action-button"
                                                 style="vertical-align: middle; ">
                                            <input type="button" name="next" class="next action-button"
                                                   value="@localizer["Next"]" />
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous"
                                                   class="previous action-button-previous"
                                                   value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/Pages/img/Vector.png" alt="Button Image"
                                                 class="previous action-button-previous"
                                                 style="vertical-align: middle; ">
                                        </div>
                                    </div>

                                </fieldset>
                                <fieldset id="FifthFieldset">
                                    <div class="form-card form-card5-settl">
                                        <div class="row data-col-Settl g-3">
                                            <div class="col-xl-8 data-col-Settl contract-Settl-row ">
                                                <div class="col-auto ">
                                                    <P>@localizer["ContractNo"]  </P>
                                                </div>
                                                <div class="col-auto personal-data ">
                                                    <P>@Model.ContractSettlement.CrCasRenterContractBasicNo</P>
                                                </div>
                                                <div class="col-md-5 col-lg-5 col-xl-4 seacrh-icon-col1">
                                                    <div>
                                                        <img src="~/BranchSys/Pages/img/seacrh-icon.png" alt="seacrh-icon Image" id="contract-value-Settlement3">
                                                    </div>
                                                    <div class="dropdown-content dropdown-content-extension" id="dropdown-content-Settlement3">
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-12 col-md-auto  ">
                                                                <p>  : @localizer["Renterr"] </p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                @if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
                                                                {
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation.CrMasRenterInformationEnName</p>
                                                                }
                                                                else
                                                                {
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation.CrMasRenterInformationArName</p>
                                                                }
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["Car"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                @if (requestCulture?.RequestCulture.UICulture.Name != "ar-EG")
                                                                {
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationConcatenateEnName</p>
                                                                }
                                                                else
                                                                {
                                                                    <p>@Model.ContractSettlement.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationConcatenateArName</p>
                                                                }
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["DaysNo"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="DaysNoContract"></p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["AmountReserved"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorReservedBalance?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["DiscountRate"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>%@Model.ContractSettlement?.CrCasRenterContractBasicUserDiscountRate?.ToString("N2", CultureInfo.InvariantCulture)</p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>: @localizer["TaxRate"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>%@Model.ContractSettlement?.CrCasRenterContractBasicTaxRate?.ToString("N2", CultureInfo.InvariantCulture) </p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> : @localizer["ExtraHours"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>
                                                                    @(Model.ContractSettlement?.CrCasRenterContractBasicHourMax != null
                                                                        ? $"{(int)Model.ContractSettlement.CrCasRenterContractBasicHourMax}:00"
                                                                        : "0:00")
                                                                </p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> : @localizer["ExtraHourValue"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement?.CrCasRenterContractBasicHourValue?.ToString("N2", CultureInfo.InvariantCulture) </p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> : @localizer["ExcessKilos"]  </p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="ExcessKilos">0</p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> : @localizer["AdditionalKmValue"]  </p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement?.CrCasRenterContractBasicKmValue?.ToString("N2", CultureInfo.InvariantCulture) </p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> : @localizer["FuelValue"]  </p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@Model.ContractSettlement?.CrCasRenterContractBasicFuelValue?.ToString("N2", CultureInfo.InvariantCulture) </p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> : @localizer["TankStatus"]  </p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p>@(requestCulture?.RequestCulture.UICulture.Name == "en-US" ?
                                                                    Model.ContractSettlement?.CarCheckUpFuel?.CrCasRenterContractCarCheckupC?.CrMasSupContractCarCheckupDetailsEnName : 
                                                                    Model.ContractSettlement?.CarCheckUpFuel?.CrCasRenterContractCarCheckupC?.CrMasSupContractCarCheckupDetailsArName)
                                                                </p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> : @localizer["LateDays"]  </p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="LateDays">0</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row data-col-Settl g-3">
                                            <div class=" col-xl-4 data-col-Settl flex-wrap ">
                                                <div class="col-auto ">
                                                    <P>@localizer["ContractValue"]</P>
                                                </div>
                                                <div class="col-auto personal-data ">
                                                    <P id="ContractValue">0.00</P>
                                                </div>
                                                <div class="col-md-5 col-lg-5 col-xl-4  seacrh-icon-col">
                                                    <div class="col-sm-12  d-flex justify-content-end">
                                                        <img src="~/BranchSys/Pages/img/Rectangle 129.svg" alt="seacrh-icon Image" id="contract-value-Settlement4">
                                                    </div>
                                                    <div class="dropdown-content  dropdown-content-extension" id="dropdown-content-Settlement4">
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["Rent"] </p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="RentalValue">0.00</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>:@localizer["Delegationn"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="DelegationValue">0.00</p>
                                                            </div>

                                                        </div>

                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p>:@localizer["Features"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="Features">0.00</p>
                                                            </div>

                                                        </div>

                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["AdditionalDriverr"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="AdditionalDriver">0.00</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["PrivateDriver"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="PrivateDriver">0.00</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["Choicess"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="Choices">0.00</p>
                                                            </div>

                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["Additionalss"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="Additionals">0.00</p>
                                                            </div>

                                                        </div>
                                                        @* <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["ExtraHours"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="ExtraHoursValue">0.00</p>
                                                            </div>

                                                        </div> *@
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["ExcessKilos"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="ExtraKMsValue">0.00</p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["FuelValue"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="FuelValue">0.00</p>
                                                            </div>
                                                        </div>
                                                        <div class="row dropdown-content-row">
                                                            <div class="col-auto ">
                                                                <p> :@localizer["LateSettlement"]</p>
                                                            </div>
                                                            <div class="col personal-data">
                                                                <p id="LateSettlement">0.00</p>
                                                            </div>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-xl-4 data-col-Settl flex-wrap Settlement-date">
                                                <div class="col-auto ">
                                                    <P>@localizer["SettlementDate"]</P>
                                                </div>
                                                <div class="col-auto personal-data ">
                                                    <P>@DateTime.Now.ToString("yyyy/MM/dd", CultureInfo.InvariantCulture)</P>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row data-col-Settl g-3">

                                            <div class="col-md-auto col-lg-4">
                                                <div class="data-col-Settl">
                                                    <div class="col-auto "><p>@localizer["ContractValueAfterDiscount"]</p></div>
                                                    <div class="col-auto personal-data p-0"><p id="ContractValueAfterDiscount">0.00</p></div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="data-col-Settl">
                                                    <div class="col-auto "><p>@localizer["TaxValue"] </p></div>
                                                    <div class="col-auto personal-data p-0"><p id="TaxValue">0.00</p></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row data-col-Settl g-3">
                                            <div class="col-lg-4">
                                                <div class="data-col-Settl">
                                                    <div class="col-auto "><p>@localizer["TotalContract"]</p></div>
                                                    <div class="col-auto personal-data p-0"><p id="TotalContract">0.00</p></div>
                                                </div>

                                            </div>
                                            <div class="col-lg-4">
                                                <div class="data-col-Settl">
                                                    <div class="col-auto "><p>@localizer["TotalExpenseValue"]</p></div>
                                                    <div class="col-auto personal-data p-0"><p id="TotalExpenseValue">0.00</p></div>
                                                </div>
                                            </div>
                                            <div class="col-lg-4">
                                                <div class="data-col-Settl">
                                                    <div class="col-auto "><p>@localizer["TotalCompensationValue"]</p></div>
                                                    <div class="col-auto personal-data p-0"><p id="TotalCompensationValue">0.00</p></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row data-col-Settl g-3">
                                            <div class="col-lg-4">
                                                <div class="data-col-Settl">
                                                    <div class="col-auto "><p>@localizer["AvailableBalance"]</p></div>
                                                    <div class="col-auto personal-data p-0"><p>@Model.ContractSettlement.CrCasRenterContractBasic5.CrCasRenterLessorAvailableBalance?.ToString("N2", CultureInfo.InvariantCulture)</p></div>
                                                </div>

                                            </div>
                                            <div class="col-lg-4">
                                                <div class="data-col-Settl">
                                                    <div class="col-auto "><p id="RenterMoneyText">@localizer["AmountRequired"]</p></div>
                                                    <div class="col-auto personal-data p-0"><p id="AmountRequired">0.00</p></div>
                                                </div>
                                            </div>
                                            @* <div class="col-md-auto">
                                            <div class="data-col-Settl">
                                            <div class="col-auto "><p id="RenterMoneyText">@localizer["RenterMoneyText1"]</p></div>
                                            <div class="col-auto personal-data p-0"><p id="RenterMoneyValue">0.00</p></div>
                                            </div>
                                            </div> *@
                                        </div>
                                        <div class="row data-col-Settl g-3">
                                            <div class=" col-lg-4 data-col-Settl flex-md-nowrap">
                                                <div class="col-auto">
                                                    <label id="amount-paid" for="amount-paid-input">
                                                        @localizer["AmountPaid"]
                                                    </label>
                                                </div>
                                                <div class="col-auto">
                                                    <input type="text" class="form-control form-control2" asp-for="ContractSettlement.AmountPayed" id="AmountPayed" oninput="handleAmountPayed(this)" autocomplete="off" autofocus>
                                                    <div class="row requird-field-row-last">
                                                        <p class="requird_field_AmountPayed"></p>
                                                    </div>
                                                </div>

                                            </div>
                                            @{
                                                if (Model?.AccountBanks?.FindAll(x => x.CrCasAccountBankNo != "00").Count() == 0)
                                                {
                                                    Model.PaymentMethods = Model?.PaymentMethods?.FindAll(x => x.CrMasSupAccountPaymentMethodClassification == "1");
                                                }
                                                else if (Model?.AccountBanks?.FindAll(x => x.CrCasAccountBankNo != "00").Count() > 0 && Model?.SalesPoint?.FindAll(x => x.CrCasAccountSalesPointBank != "00").Count() == 0)
                                                {
                                                    Model.PaymentMethods = Model?.PaymentMethods?.FindAll(x => x.CrMasSupAccountPaymentMethodClassification == "3" || x.CrMasSupAccountPaymentMethodClassification == "1");
                                                }
                                                else if (Model?.AccountBanks?.FindAll(x => x.CrCasAccountBankNo != "00").Count() > 0 && Model?.SalesPoint?.FindAll(x => x.CrCasAccountSalesPointBank != "00").Count() > 0)
                                                {
                                                    Model.PaymentMethods = Model?.PaymentMethods?.FindAll(x => x.CrMasSupAccountPaymentMethodClassification == "2" || x.CrMasSupAccountPaymentMethodClassification == "3" || x.CrMasSupAccountPaymentMethodClassification == "1");
                                                }
                                            }
                                            <div class=" col-lg-4 d-flex flex-md-nowrap data-col-Settl">
                                                <div class="col-auto d-flex ">
                                                    <label id="payment-method" for="payment-method-select">@localizer["PaymentMethod"]</label>

                                                </div>
                                                <div class="col-12 col-md-8 ">
                                                    <div class="offset">
                                                        <select class="form-select form-select-last" asp-for="ContractSettlement.PaymentMethod" disabled>
                                                            <option selected disabled></option>
                                                            @foreach (var payment in Model.PaymentMethods)
                                                            {
                                                                @if (requestCulture?.RequestCulture.UICulture.Name != "en-US")
                                                                {
                                                                    <option value="@payment.CrMasSupAccountPaymentMethodCode" data-ar="@payment.CrMasSupAccountPaymentMethodArName" data-en="@payment.CrMasSupAccountPaymentMethodEnName" class="text-right">@payment.CrMasSupAccountPaymentMethodArName</option>
                                                                }
                                                                else
                                                                {
                                                                    <option value="@payment.CrMasSupAccountPaymentMethodCode" data-ar="@payment.CrMasSupAccountPaymentMethodArName" data-en="@payment.CrMasSupAccountPaymentMethodEnName">@payment.CrMasSupAccountPaymentMethodEnName</option>
                                                                }
                                                            }
                                                        </select>
                                                        <div class="row requird-field-row-last">
                                                            <span class="requird-field" id="requird_field_PaymentMethod" asp-validation-for="@Model.ContractSettlement.PaymentMethod"></span>
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                            <div class=" col-lg-6 col-xl-4 data-col-Settl flex-md-nowrap">
                                                <div class="col-auto d-flex  ">
                                                    <label id="selling-point" for="selling-point-dropdown">@localizer["SalesPoint"]</label>
                                                </div>
                                                <div class="col-12 col-md-8 ">
                                                    <div class="offset">
                                                        <select class="form-select form-select-last " asp-for="ContractSettlement.SalesPoint" required>
                                                        </select>
                                                        <div class="row requird-field-row-last">
                                                            <span class="requird-field" id="requird_field_SalesPoint" asp-validation-for="@Model.ContractSettlement.SalesPoint"></span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row p-2" style="flex-direction:row-reverse">
                                            <div class="col-auto">
                                                <label id="notes" for="FormControl-last-Textarea ">@localizer["reasons"]</label>
                                            </div>
                                            <div class="col-sm-10 col-md-7 col-lg-7">
                                                <textarea class="form-control textarea-inputs @(requestCulture?.RequestCulture.UICulture.Name != "ar-EG" ? "text-start" : "text-end")" rows="1" maxlength="100" asp-for="ContractSettlement.ReasonsPayment"></textarea>
                                            </div>

                                        </div>
                                    </div>

                                    <div class="row button-row align-items-center" style="padding: 6px 7px 0px 20px;">
                                        <div class="payment-button-card button-card   gap-2">
                                            <button id="submitForm" class="btn check-btn payment-button next">@localizer["Save"]</button>
                                            <button type="button" class="btn check-btn btn-custom check-btn-load payment-button signature-button" id="check_btn_load_Signture" data-bs-toggle="modal" href="#PicsignatureModal">
                                                <div class="row align-items-center">
                                                    <div class="col-auto">
                                                        <div class="systems-check">
                                                            <i class="fa-solid fa-check text-white"></i>
                                                        </div>
                                                    </div>
                                                    <div class="col">@localizer["SignatureTenant"]</div>
                                                </div>
                                            </button>
                                        </div>
                                        <div class="button-card">
                                            <input type="button" name="previous"
                                                   class="previous action-button-previous" value="@localizer["Previous"]" />
                                            <img src="~/BranchSys/Pages/img/Vector.png" alt="Button Image"
                                                 class="previous action-button-previous"
                                                 style="vertical-align: middle; margin-right: 10px;">
                                        </div>
                                    </div>

                                </fieldset>
                            </form>
                        </div>
                    </div>
                </div>
                <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%% TechnicalCheckUp %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
                <div class="modal fade" id="TechnicalCheckUp" aria-hidden="true"
                     aria-labelledby="TechnicalCheckUpLabel" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable "
                         style="max-width: 800px !important;">
                        <div class="modal-content">
                            <div class="modal-header text-center">
                                <p class="modal-title w-100"></p>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"
                                        aria-label="Close"></button>

                            </div>
                            <div class="modal-body">
                                <div class="container">
                                    <div class="row flex-column">
                                        <div class="col-12 text-center">
                                            <div class="row g-3 justify-content-center "
                                                 id="TechnicalCheckUp-container">
                                                <div class="col-auto">
                                                    <button id="bend-in-body-btn"
                                                            class="TechnicalCheckUp-Btn p-2">
                                                        <img src="~/BranchSys/CreateContract/img/bend-in-body.svg">@localizer["CurvatureStructure"]
                                                    </button>
                                                </div>
                                                <div class="col-auto">
                                                    <button id="very-deep-scratch-btn"
                                                            class="TechnicalCheckUp-Btn p-2">
                                                        <img src="~/BranchSys/CreateContract/img/very-deep-scratch.svg">@localizer["VeryDeepScratch"]
                                                    </button>

                                                </div>
                                                <div class="col-auto">
                                                    <button id="deep-scratch-btn"
                                                            class="TechnicalCheckUp-Btn p-2">
                                                        <img src="~/BranchSys/CreateContract/img/deep-scratch.svg"> @localizer["DeepScratch"]
                                                    </button>

                                                </div>
                                                <div class="col-auto">
                                                    <button id="small-scratch-btn"
                                                            class="TechnicalCheckUp-Btn p-2">
                                                        <img src="~/BranchSys/CreateContract/img/small-scratch.svg"> @localizer["SimpleScratch"]
                                                    </button>

                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-12 d-flex justify-content-center">
                                            <div class="car-container mt-3">
                                                <canvas id="shape-canvas"></canvas>
                                            </div>
                                        </div>
                                        <div class="col-12">
                                            <div class="row g-3">
                                                <div class="col d-flex justify-content-center ">
                                                    <button id="undo-btn" class=" undo-redo-btn">
                                                        <img src="~/BranchSys/CreateContract/img/undo.svg">
                                                    </button>


                                                    <button id="redo-btn" class="undo-redo-btn mx-2 ">
                                                        <img src="~/BranchSys/CreateContract/img/undo (2).svg">
                                                    </button>

                                                </div>
                                                <div class="col">
                                                    <button id="save-btn" class="check-btn ">@localizer["Save"] </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
                <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% TechnicalCheckUp %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->
                <!--Signture-->
                <div class="modal fade" id="PicsignatureModal" tabindex="-1" aria-labelledby="PicignaturPopupModalLabel" aria-hidden="true" data-bs-backdrop="true">
                    <div class="modal-dialog modal-dialog-centered d-flex justify-content-center">
                        <div class="modal-content signature-modal-content p-3">
                            <div class="modal-body Signature-modal-body">
                                <div class="SignatureCard">
                                    <div class="main-container" id="removeSignatureImg"></div>
                                    <div class="upload-container">
                                    </div>
                                </div>
                                <br>
                                <div class="row">
                                    <div class="col-4">
                                        <div class="sinature-Btn-Card p-2" id="UploadSigntaurePic">
                                            <img src="~/BranchSys/img/Pic.svg" class="w-100">
                                            <input type="file" id="imageUpload" accept="image/*" style="display: none;">
                                        </div>
                                    </div>
                                    <div class="col-4" id="WriteSignature">
                                        <div class="sinature-Btn-Card p-2">
                                            <img src="~/BranchSys/img/file-signature_9795523 1.svg" class="w-100">
                                        </div>
                                    </div>
                                    @* <div class="col-3" id="clear">
                                    <div class="sinature-Btn-Card p-2">
                                    <img src="~/BranchSys/img/Frame.svg" class="w-100">
                                    </div>
                                    </div> *@
                                    <div class="col-4" id="Save_Btn">
                                        <div class="sinature-Btn-Card p-2">
                                            <img src="~/BranchSys/img/save.svg" class="w-100" id="save">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!--Signture-->
            </div>
        </div>
    </section>
</div>
<canvas id="myCanvasReceipt" hidden></canvas>
<canvas id="myCanvasInvoice" hidden></canvas>
<canvas id="myCanvasCard" hidden></canvas>
<footer class="fixed-bottom-xl">
    <div class="before-footer-widget">
        <svg width: 100%; height:auto viewbox="0 0 2444 132">
            <path fill="rgba(254, 248, 232, 1)" fill-rule="evenodd"
                  d="M1222 0h1222c-444.13 88-852.127 132-1223.993 132C849.253 132 442.585 88.263 0 .789V0h1222z">
            </path>
        </svg>
    </div>

</footer>
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/BranchSys/js/javascript/LoaderByPercent.js"></script>
    <script src="~/BranchSys/Pages/js/settlement/Settlement.js"></script>
    <script src="~/BranchSys/CreateContract/js/TechnicalCheckUp.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/js/all.min.js" integrity="sha512-u3fPA7V8qQmhBPNT5quvaXVa1mnnLSXUep5PS1qo5NRzHwG19aHmNJnj1Q8hpA/nBWZtZD4r4AX6YOt5ynLN2g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="~/js/toastr.js"></script>
    <!--Pdf-->
    <script src="~/PdfJS/Receipts/Receipt.js"></script>
    <script src="~/PdfJS/Invoices/ProformaInvoice.js"></script>
    <script src="~/PdfJS/Card/Card.js"></script>
    <script src="~/PdfJS/PdfAndImages.js"></script>
    <!--Contract-->
    @* <script src="~/PdfJS/Contract/page1.js"></script>
    <script src="~/PdfJS/Contract/page2.js"></script>
    <script src="~/PdfJS/Contract/page3.js"></script>
    <script src="~/PdfJS/Contract/page4.js"></script>
    <script src="~/PdfJS/Contract/page5.js"></script>
    <script src="~/PdfJS/Contract/page6.js"></script>
    <script src="~/PdfJS/Contract/conditions.js"></script> *@
    <!--Contract-->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.min.js"></script>
    <script src="https://mozilla.github.io/pdf.js/build/pdf.js"></script>
    <!--Pdf-->
    <script>
        $(document).ready(function () {
            // "Check All" checkbox functionality
            $('#CheckAll').on('change', function () {
                // Set all checkboxes with the class 'CheckUp' to the same state as "Check All"
                console.log("111111")
                $('.CheckUp').prop('checked', $(this).prop('checked'));
            });

            // Uncheck the "Check All" checkbox if any individual checkbox is unchecked
            $(document).on('change', '.CheckUp', function () {
                console.log("00000")
                if (!$(this).prop('checked')) {
                    $('#CheckAll').prop('checked', false);
                }
            });
        });
    </script>
    <!--Upload Signture-->
    <script>
        //variables//
        let saveSignatureBtn = null;
        var imgeURL;
        document.getElementById("UploadSigntaurePic").addEventListener("click", function () { saveSignatureBtn = "UploadSigntaurePic"; });
        document.getElementById("WriteSignature").addEventListener("click", function () { saveSignatureBtn = "WriteSignature"; });
        var renterSignature = "@Model.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationSignature";
        const uploadContainer = document.querySelector(".upload-container");
        const mainContainer = document.querySelector(".main-container");
        const UploadSigntaurePic = document.getElementById("UploadSigntaurePic");
        const imageUpload = document.getElementById("imageUpload");
        var btnSignture = document.getElementById('check_btn_load_Signture');
        var imgeURL;
        const uploadedImg = null;
        //

        UploadSigntaurePic.addEventListener("click", function () {
            imageUpload.click();
        });

        imageUpload.addEventListener("change", function () {
            const file = imageUpload.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const imageURL = e.target.result;
                    const previewImage = document.createElement("img");
                    previewImage.classList.add("preview-image");
                    previewImage.src = imageURL;
                    previewImage.id = "signatureImage";
                    imgeURL = imageURL;
                    mainContainer.innerHTML =
                        '<i class="fa-regular fa-circle-xmark"  style="cursor: pointer;"></i>';
                    uploadContainer.innerHTML = "";
                    uploadContainer.appendChild(previewImage);
                    uploadContainer.classList.add("previewing");
                };
                reader.readAsDataURL(file);
            }
        });

        removeSignatureImg.addEventListener("click", function (event) {
            event.preventDefault();
            if (uploadContainer.firstChild) {
                uploadContainer.innerHTML = "";
                mainContainer.innerHTML = "";
                uploadContainer.classList.remove("previewing");
                uploadContainer.innerHTML =
                    '<img class="upload-icon" src="/BranchSys/CreateContract/img/Rectangle 144.png" alt="Upload Icon"><p>' + '@localizer["UploadSignture"]' + '</p>';
            }
        });

        function CheckSigntureImgForRenter() {
            if (renterSignature) {
                const checkDiv = document.querySelector('.row .col-auto .systems-check');
                if (checkDiv) {
                    checkDiv.style.backgroundColor = 'green';
                }
                renterSignature = renterSignature.replace("~", "");
                uploadContainer.innerHTML = ''; // Clear existing content
                uploadContainer.innerHTML = '<img class="preview-image" src="' + renterSignature + '">';
                uploadContainer.classList.add('previewing');
            } else {
                uploadContainer.innerHTML = '<img class="upload-icon" src="/BranchSys/CreateContract/img/Rectangle 144.png" alt="Upload Icon"><p>' + '@localizer["UploadSignture"]' + '</p>';
                uploadContainer.classList.remove('previewing');
            }
        }
        btnSignture.addEventListener('click', function (event) {
            event.preventDefault();
            CheckSigntureImgForRenter();
        });
        document.addEventListener("DOMContentLoaded", function () {
            CheckSigntureImgForRenter();
        });
    </script>
    <!--Write Signture-->
    <script>
        const WriteSignature = document.getElementById("WriteSignature");
        WriteSignature.addEventListener("click", function () {
            uploadContainer.innerHTML = "";
            mainContainer.innerHTML = "";
            uploadContainer.innerHTML =
                '<canvas id="canvas" width="200" height="200" class="mb-2"></canvas>';
            var canvas = document.getElementById("canvas");
            var ctx = canvas.getContext("2d");
            ctx.lineWidth = 4;

            var drawing = false;
            var prevX = 0;
            var prevY = 0;
            var currX = 0;
            var currY = 0;

            function drawLine(x0, y0, x1, y1) {
                ctx.beginPath();
                ctx.moveTo(x0, y0);
                ctx.lineTo(x1, y1);
                ctx.stroke();
                ctx.closePath();
            }

            canvas.addEventListener("mousedown", handleMouseDown, false);
            canvas.addEventListener("mousemove", handleMouseMove, false);
            canvas.addEventListener("mouseup", handleMouseUp, false);

            canvas.addEventListener("touchstart", handleTouchStart, false);
            canvas.addEventListener("touchmove", handleTouchMove, false);
            canvas.addEventListener("touchend", handleTouchEnd, false);

            function handleMouseDown(e) {
                drawing = true;
                prevX = e.clientX - canvas.getBoundingClientRect().left;
                prevY = e.clientY - canvas.getBoundingClientRect().top;
            }

            function handleMouseMove(e) {
                if (!drawing) return;
                currX = e.clientX - canvas.getBoundingClientRect().left;
                currY = e.clientY - canvas.getBoundingClientRect().top;

                drawLine(prevX, prevY, currX, currY);
                prevX = currX;
                prevY = currY;
            }

            function handleMouseUp() {
                drawing = false;
            }

            function handleTouchStart(e) {
                drawing = true;
                prevX = e.touches[0].clientX - canvas.getBoundingClientRect().left;
                prevY = e.touches[0].clientY - canvas.getBoundingClientRect().top;
            }

            function handleTouchMove(e) {
                if (!drawing) return;
                currX = e.touches[0].clientX - canvas.getBoundingClientRect().left;
                currY = e.touches[0].clientY - canvas.getBoundingClientRect().top;

                drawLine(prevX, prevY, currX, currY);
                prevX = currX;
                prevY = currY;
            }

            function handleTouchEnd() {
                drawing = false;
            }
            // Clear the canvas
            // function clearCanvas() {
            //     ctx.clearRect(0, 0, canvas.width, canvas.height);
            // }

            // document.getElementById("clear").addEventListener("click", function () {
            //     clearCanvas();
            // });

        });
        // Save the written signature as an image
        function SaveWrittenSignature() {
            var canvas = document.getElementById("canvas");
            if (canvas) {
                var dataURL = canvas.toDataURL();
                var link = document.createElement("a");
                link.href = dataURL;
                var imgeURL = dataURL;
                $("#PicsignatureModal").modal("hide");
                return imgeURL;
            } else {
                return null;
            }
        }

        // Save the uploaded signature image
        function SaveUploadedSignature() {
            const img = document.getElementById("signatureImage");
            if (img) {
                const canvas = document.createElement("canvas");
                canvas.width = img.width;
                canvas.height = img.height;
                const context = canvas.getContext("2d");
                context.drawImage(img, 0, 0, canvas.width, canvas.height);
                const base64 = canvas.toDataURL("image/jpeg");
                $("#PicsignatureModal").modal("hide");
                return base64;
            } else {
                return null;
            }
        }
    </script>
    <script>
        const imageSubmitBtn = document.getElementById('Save_Btn');
        imageSubmitBtn.addEventListener('click', function (event) {
            event.preventDefault();
            var renterId = decodeHTMLEntities("@Model.ContractSettlement.CrCasRenterContractBasicRenterId");
            imgeURL = null;
            if (saveSignatureBtn === "UploadSigntaurePic") {
                imgeURL = SaveUploadedSignature();
            } else if (saveSignatureBtn === "WriteSignature") {
                imgeURL = SaveWrittenSignature();
            }
            if (!imgeURL) {
                $('#PicsignatureModal').modal('hide');
                // toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                // toastr.error('@localizer["PleaseEnterPictureToast"]');
                return;
            }
            if (uploadContainer.firstChild) {
                uploadContainer.innerHTML = '';
                uploadContainer.classList.remove('previewing');
                uploadContainer.innerHTML = '<img class="upload-icon" src="/BranchSys/CreateContract/img/Rectangle 144.png" alt="Upload Icon"><p>' + '@localizer["UploadSignture"]' + '</p>';
            }

            $('#PicsignatureModal').modal('hide');
            // Show the spinner
            showSpinner(btnSignture);
            var CheckUpdateSigntureForRenter = updaterenterSignature(imgeURL, renterId);
            setTimeout(function () {
                $('#thirdPopupModal').modal('hide');
                if (CheckUpdateSigntureForRenter) {
                    removeSpinnerAndChangeColor(btnSignture); // Remove spinner and change color
                }
                else {
                    toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                    toastr.error('@localizer["SomethingWrongPleaseCallAdmin"]');
                }
            }, 2000);
        });
        async function updaterenterSignature(img, renterId) {
            try {
                var data = await $.ajax({
                    url: "/BS/Contract/UpdateSigntureForRenter",
                    type: "POST",
                    data: { img: img, renterId: renterId },
                });
                if (data) {
                    renterSignature = data;
                    return true; // Renter Updated Successfully
                }
            } catch (error) {
                return false; // Error occurred or Renter doesn't exist
            }
            return false; // Renter doesn't exist
        }
    </script>

    <script>
        function customizeDate() {
            // الحصول على الوقت الحالي
            var dateTimeNow = decodeHTMLEntities('@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffK")');
            const now = new Date(dateTimeNow);

            // تحويل تاريخ انتهاء العقد إلى كائن تاريخ
            const endDateString = "@Model.ContractSettlement.CrCasRenterContractBasicExpectedEndDate?.ToString("yyyy/MM/dd HH:mm:ss", CultureInfo.InvariantCulture)";
            let endDate = new Date(endDateString);
            const startDateString = "@Model.ContractSettlement.CrCasRenterContractBasicExpectedStartDate?.ToString("yyyy/MM/dd HH:mm:ss", CultureInfo.InvariantCulture)";
            let startDate = new Date(startDateString);
            // التحقق من أن endDate تاريخ صحيح
            if (!isNaN(endDate.getTime())) {
                if (endDate < now) {
                    // إذا كان تاريخ النهاية أقل من الآن، نضع الآن كقيمة
                    const dateValue = now.toISOString().split('T')[0];  // yyyy-MM-dd
                    document.getElementById("contract_real_endTime").value = dateValue;
                    document.getElementById("contract_real_endTime").min = now.toISOString().split('T')[0];  // الحد الأدنى هو الآن
                    document.getElementById("contract_real_endTime").max = now.toISOString().split('T')[0];  // الحد الأقصى هو endDate + 1

                } else {
                    // إذا كان تاريخ النهاية أكبر من الآن، نضع endDate كقيمة
                    const dateValue = now.toISOString().split('T')[0];  // yyyy-MM-dd
                    document.getElementById("contract_real_endTime").min = now.toISOString().split('T')[0];  // الحد الأدنى هو الآن
                    document.getElementById("contract_real_endTime").max = endDate.toISOString().split('T')[0];  // الحد الأقصى هو endDate + 1
                    document.getElementById("contract_real_endTime").value = dateValue;
                }
            } else {
                console.error("Invalid end date provided.");
            }
        }
        var diffDays = 0;
        var diffMinutes = 0;
        var diffHours = 0;
        var diff = 0;
        var totalDaysNo = 0;
        var settlementDay = 0;
        var roundedHours = 0;
        var roundedLateAddHours = 0;
        var roundedLateSettelmentHours = 0;
        var caseSettelement=0;
        document.addEventListener("DOMContentLoaded", function () {
            customizeDate();
            const elementToHide = document.getElementById("mechanismSettlement");
            var SettelmentAuth = "@userInfo?.CrMasUserContractValidity?.CrMasUserContractValidityEnd";
            const startContractDateString = "@Model.ContractSettlement.CrCasRenterContractBasicExpectedStartDate?.ToString("yyyy-MM-ddTHH:mm:ss", CultureInfo.InvariantCulture)";
            const endContractDateString = "@Model.ContractSettlement.CrCasRenterContractBasicExpectedEndDate?.ToString("yyyy-MM-ddTHH:mm:ss", CultureInfo.InvariantCulture)";
            const expectedDays = "@Model.ContractSettlement.CrCasRenterContractBasicExpectedRentalDays";
            const TotalFreeHours = "@Model.ContractSettlement.CrCasRenterContractBasicTotalFreeHours";
            const MaxHours = "@Model.ContractSettlement.CrCasRenterContractBasicHourMax";
            const startContractDate = new Date(startContractDateString);
            const endContractDate = new Date(endContractDateString);
            var dateTimeNow = decodeHTMLEntities('@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffK")'); // or "@DateTime.Now" if you prefer local server time
            const now = new Date(dateTimeNow);
            const currentHour = now.getHours();
            const currentMinute = now.getMinutes();
            const currentSecond = now.getSeconds();
            // Convert hour, minute, and second to strings if needed
            const hourString = currentHour.toString().padStart(2, '0'); // Pad with zero if single digit
            const minuteString = currentMinute.toString().padStart(2, '0'); // Pad with zero if single digit
            const secondString = currentSecond.toString().padStart(2, '0'); // Pad with zero if single digit
            const timeString = `${hourString}:${minuteString}:${secondString}`;

            function calculateDifference() {
                const settlementDateString = document.getElementById("contract_real_endTime").value;

                const settlementDateTimeString = settlementDateString + "T" + timeString;
                const settlementDateTime = new Date(settlementDateTimeString);

                const timeDiff = Math.abs(settlementDateTime.getTime() - startContractDate.getTime());
                diffDays = Math.floor(timeDiff / (1000 * 3600 * 24)); // Difference in days
                const remainingTime = timeDiff % (1000 * 3600 * 24);
                let diffHours = Math.ceil(remainingTime / (1000 * 3600)); // احتساب الساعات مع أي ثانية كساعة كاملة

                if (settlementDateTime > endContractDate) {
                    // إذا تجاوزت تاريخ النهاية المتوقع
                    console.log("نهاية العقد تجاوزت الوقت المتوقع.");
                    const maxAllowedHours = parseInt(TotalFreeHours) + parseInt(MaxHours);
                    const overtime = settlementDateTime.getTime() - endContractDate.getTime(); // الوقت بعد نهاية العقد
                    const overtimeHours = Math.ceil(overtime / (1000 * 3600)); // الساعات الإضافية مع احتساب أول ثانية كساعة
                    console.log("الساعات الزيادة:", overtimeHours);
                    if(diffDays == parseInt(expectedDays)){
                        console.log("نهاية العقد تجاوزت الوقت المتوقع بس لسه عدد الايام المتوقع وعدد الايام الفعلية متساويين.");
                        // إذا تجاوزت ساعات التأخير الساعات المجانية والحد الاعلي للساعات
                        if (overtimeHours > maxAllowedHours) {
                            console.log("تعدي عدد الساعات المسموح به");
                            diffDays += 1;
                        } else {
                            diffHours = overtimeHours; 
                            console.log("لم يتعدي عدد الساعات المسموح به");
                        }
                    }
                    else{
                        console.log("نهاية العقد تجاوزت الوقت المتوقع و عدد الايام المتوقع ولذلك اي ثانية زيادة تحسب يوم كامل .");
                        if(remainingTime > 0) {
                        console.log("تم اضافة يوم اضافي لتعدي الوقت المحدد له .");
                            diffDays += 1;
                        }
                    }
                    
                } 
                else 
                { 
                    console.log("نهاية العقد لم تتجاوز الوقت المتوقع.");
                    if (remainingTime > 0) {
                        console.log("تم اضافة يوم اضافي لتعدي الوقت المحدد له .");
                        diffDays += 1;
                    }
                }
                console.log("diffDays", diffDays)
                console.log("diffHours", diffHours)
                // diff = parseInt(diffHours) - parseInt(TotalFreeHours);
                $("#daysNo").text(diffDays);
                totalDaysNo = diffDays;
                //In PaymentPage
                var actualEndContractDate = new Date(startContractDate);
                actualEndContractDate.setDate(startContractDate.getDate() + diffDays);
                // Formatting endContractDate as "yyyy/MM/dd HH:MM"
                var formattedEndContractDate = actualEndContractDate.getFullYear() + '/' + ('0' + (actualEndContractDate.getMonth() + 1)).slice(-2) + '/' + ('0' + actualEndContractDate.getDate()).slice(-2) + ' ' +
                    ('0' + actualEndContractDate.getHours()).slice(-2) + ':' + ('0' + actualEndContractDate.getMinutes()).slice(-2) + ':00';
                $("#DaysNoContract").text(diffDays);
                $("#EndContract").text(formattedEndContractDate);
                console.log("totalDaysNo", totalDaysNo)
                const isSettlementAuthValid = SettelmentAuth && SettelmentAuth.toLowerCase() !== "false";
                ////////////////////////////////////////////////////////////
                if (endContractDate < now && (diffHours > 0 || (diffHours === 0 && diffMinutes > 0))) {
                    let totalMinutes = diffHours * 60 + diffMinutes;
                    roundedHours = Math.ceil(totalMinutes / 60); // Rounded to next hour
                    roundedLateAddHours = roundedHours;
                    updateTimeDisplay(roundedHours);

                    if (!isSettlementAuthValid) {
                        $("#contract_real_endTime").prop('readonly', true).css('background-color', 'white');
                    } else {
                        handleSettlementAuth(roundedHours);
                    }
                } else {
                    console.log("CASE 1 ......")
                    caseSettelement=1;
                    resetTimeDisplay();
                }

                function updateTimeDisplay(diffValue, isDays = false) {
                    $("#divLateHours").css("display", "");

                    if (isDays) {
                        $("#diffHours").text(diffValue.toString().padStart(2, '0'));
                        $("#diffMinutes").text("").hide();
                    } else {
                        $("#diffHours").text(diffValue.toString().padStart(2, '0'));
                        $("#diffMinutes").text(':00').show();
                    }
                }

                function handleSettlementAuth(roundedHoursVal) {
                    console.log("first:roundedHoursVal:",roundedHoursVal)
                    let display = 0;
                    let isDays = false;
                    if(diffDays == parseInt(expectedDays)){
                        if (roundedHoursVal <= parseInt(TotalFreeHours)) {
                            console.log("CASE 2 ......")
                            $("#AddOrLateHoursText").text("@localizer["FreeHourss"]");
                            display = roundedHoursVal;
                            roundedLateAddHours = 0;
                            roundedLateSettelmentHours = 0;
                            caseSettelement=2;
                        } else {
                            console.log("CASE 3 ......")
                            roundedLateAddHours -= parseInt(TotalFreeHours);
                            display = roundedLateAddHours;
                            roundedLateSettelmentHours = 0;
                            $("#AddOrLateHoursText").text("@localizer["AddHourslate"]");
                            hideSettlementSomeOptions("hour");
                            caseSettelement=3;
                        }
                    }
                    else {
                        console.log("CASE 4 ......")
                        display = diffDays - parseInt(expectedDays);
                        hideSettlementSomeOptions("day");
                        isDays = true;
                        $("#AddOrLateHoursText").text("@localizer["LateDays"]");
                        caseSettelement=4;
                    } 
                    updateTimeDisplay(display,isDays);
                }

                function resetTimeDisplay() {
                    $("#diffHours").text("00");
                    $("#diffMinutes").text("00");
                    diffHours = 0;
                    diffMinutes = 0;
                }

                CalculateSettelementDay();
            }

            document.getElementById("contract_real_endTime").addEventListener("change", calculateDifference);
            // Call calculateDifference function when the page loads
            calculateDifference();
            customizeDate();
        });
        function hideSettlementSomeOptions(type) {
            const elementToHide = document.getElementById("mechanismSettlement");
            const settlementSelect = document.getElementById("Settlement-mechanism");
            elementToHide.style.display = "";
                if(type==="hour"){
                    if (settlementSelect) {
                    // إخفاء الخيارات غير المرغوبة (Day و DayHalf)
                    Array.from(settlementSelect.options).forEach(option => {
                        if (option.value === "1" || option.value === ".5") {
                            option.style.display = "none"; // إخفاء الاختيار
                        }
                    });
                }
            }
        }
    </script>
    <script>
        function clearExpensesData() {
            $("#Expenses-Data-Table textarea").val('');
            $("#Expenses-Data-Table input[type='text']").val('');
            $("#TotalExpenses").text('');
            $('#SecondFieldset .upload__img-box').remove();
            expensesArray.splice(0, expensesArray.length);
        }

        function clearCompensationData() {
            $("#compensation-Data-Table textarea").val('');
            $("#compensation-Data-Table input[type='text']").val('');
            $("#TotalCompensation").text('');
            $('#ThirdFieldset .upload__img-box').remove();
            compensationArray.splice(0, compensationArray.length);
        }


        function clearPaymentData() {
            $("#AmountPayed").val('');
            document.getElementById('ContractSettlement_PaymentMethod').disabled = true;
            document.getElementById('ContractSettlement_PaymentMethod').selectedIndex = 0;
            document.getElementById('ContractSettlement_SalesPoint').disabled = true;
            document.getElementById('ContractSettlement_SalesPoint').selectedIndex = 0;
            $("#ContractSettlement_SalesPoint").empty();
        }





        function CalculateSettelementDay() {
            const endContractDateString = "@Model.ContractSettlement.CrCasRenterContractBasicExpectedEndDate?.ToString("yyyy-MM-ddTHH:mm:ss", CultureInfo.InvariantCulture)";
            const now = new Date();
            const endContractDate = new Date(endContractDateString);
            settlementDay = parseFloat($("#Settlement-mechanism").val()) || 0;
            $("#ContractSettlement_ActualDaysNo").val(totalDaysNo);
        }

        var AdditionalKm = 0;
        // Function to calculate and update additional KM
        function calculateAdditionalKM(enteredValue) {
            var PreviousMeterInput = '@Model.ContractSettlement.CrCasRenterContractBasicCurrentReadingMeter';
            var PreviousMeterValue = parseInt(PreviousMeterInput) || 0;
            var AdditionalKmFreeDaily = '@Model.ContractSettlement.CrCasRenterContractBasicTotalDailyFreeKm';
            var expectedDays =parseInt("@Model.ContractSettlement.CrCasRenterContractBasicExpectedRentalDays");
            var TotalAdditionalKM = parseFloat(expectedDays) * parseInt(AdditionalKmFreeDaily);
            if (enteredValue <= PreviousMeterValue) {
                $("#Error_CurrentMeter").text("@localizer["requirdfieldCurrentMeter"]" + " " + PreviousMeterValue);
            } else {
                var Free = TotalAdditionalKM + PreviousMeterValue;
                AdditionalKm = enteredValue - Free;
                if (AdditionalKm <= 0) {
                    $("#AdditionalKM").text("0");
                    AdditionalKm = 0;
                } else {
                    $("#AdditionalKM").text(AdditionalKm.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 }));
                }
                $("#Error_CurrentMeter").text("");
            }
        }
        var CurrentMeterInput = $("#CurrentMeter");
        // Bind events to CurrentMeterInput
        CurrentMeterInput.on("focusout", function () {
            var enteredValue = parseFloat($(this).val()) || 0;
            calculateAdditionalKM(enteredValue);
            $("#ContractSettlement_AdditionalKm").val(AdditionalKm);
        });
        var CarCheckUp;
        function GetCheckUp() {
            // Initialize an empty array to store the data
            var checkUpData = [];
            // Iterate over each table row
            $(".tabel-data-checkbox-td").each(function () {
                var $row = $(this).closest("tr"); // Get the closest <tr> element
                // Extract data from the row
                var notes = $row.find(".check-table-notes").val().trim();
                var $label = $row.find(".Tires");
                var dataEn = $label.data('en'); // Get the data-en attribute
                var dataAr = $label.data('ar'); // Get the data-ar attribute
                var isChecked = $row.find(".CheckUp").is(":checked");
                var selectedReasonCheck = $row.find(".form-select").val(); // Get the selected value from the <select>

                // Check if the checkbox is checked
                if (isChecked) {
                    // Create an object to store the extracted data
                    var rowData = {
                        reason: notes,
                        enName: dataEn,
                        arName: dataAr,
                        reasonCheck: selectedReasonCheck // Add the selected value to the object
                    };

                    // Push the object into the array
                    checkUpData.push(rowData);
                    CarCheckUp = checkUpData;
                    console.log("CarCheckUp", CarCheckUp);
                }
            });
        }

    </script>
    <script>
        const nextButtons = document.querySelectorAll(".next");

        Array.from(nextButtons).forEach((nextBtn) => {
            nextBtn.addEventListener("click", (event) => {
                var field = nextBtn.closest("fieldset");
                const ExpensesCheckbox = document.getElementById('expenses-check');
                // const CompensationCheckbox = document.getElementById('compensation-check');
                const CompensationSelected = GetCompensationSelect();

                const firsetfield = document.getElementById('firstFieldset');
                const fieldsets = document.querySelectorAll("fieldset");
                if ($("#SettlementForm").valid()) {
                    const current_fs = nextBtn.closest("fieldset");
                    let next_fs = current_fs.nextElementSibling;
                    CalculateSettelementDay();
                    CalculateKmFree();
                    if (current_fs.id === 'firstFieldset') {
                        // $("#ExpensesError").text('');
                        $("#requird_field_ExpensesValue").text('').css("color", "");
                        $("#requird_field_ExpensesReasons").text('').css("color", "");
                        if (!ExpensesCheckbox.checked && CompensationSelected) {
                            clearExpensesData();
                            next_fs = current_fs.nextElementSibling.nextElementSibling;
                            $("#progressbar li").eq($("fieldset").index(current_fs.nextElementSibling)).addClass("active");
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.style.display = "flex";
                            current_fs.style.display = "none";
                        } else if (!ExpensesCheckbox.checked && !CompensationSelected) {
                            clearExpensesData();
                            clearCompensationData();
                            next_fs = current_fs.nextElementSibling.nextElementSibling.nextElementSibling;
                            $("#progressbar li").eq($("fieldset").index(current_fs.nextElementSibling)).addClass("active");
                            $("#progressbar li").eq($("fieldset").index(current_fs.nextElementSibling.nextElementSibling)).addClass("active");
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.style.display = "flex";
                            current_fs.style.display = "none";
                            $("#CurrentMeter").focus();
                        }
                        else {
                            next_fs = current_fs.nextElementSibling;
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.style.display = "flex";
                            current_fs.style.display = "none";
                            $("#expensesValue-input").focus();
                        }
                    }
                    if (current_fs.id === 'SecondFieldset') {
                        // $("#ExpensesError").text('');
                        var imgs = true;

                        if (ExpensesCheckbox.checked && !CompensationSelected) {
                            clearCompensationData();
                            next_fs = current_fs.nextElementSibling.nextElementSibling;
                            $("#progressbar li").eq($("fieldset").index(current_fs.nextElementSibling)).addClass("active");
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.style.display = "flex";
                            current_fs.style.display = "none";
                            $("#CurrentMeter").focus();
                        }
                        else {
                            // $("#requird_field_CompensationValue").text('').css("color", "");
                            // $("#requird_field_CompensationReasons").text('').css("color", "");
                            // $("#compensationError").text('');
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.style.display = "flex";
                            current_fs.style.display = "none";
                        }
                    }
                    if (current_fs.id === 'ThirdFieldset') {
                        // $("#compensationError").text('');
                        $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                        next_fs.style.display = "flex";
                        current_fs.style.display = "none";
                        $("#CurrentMeter").focus();
                    }
                    if (current_fs.id === 'FourthFieldset') {
                        var allChecked = true;
                        var currentMeter = true;
                        var imgs = true;

                        // Check checkboxes
                        var checkboxes = document.querySelectorAll(".CheckUp");
                        checkboxes.forEach(function (checkbox) {
                            if (!checkbox.checked) {
                                allChecked = false;
                            }
                        });

                        // Check currentMeterSpan
                        var currentMeterSpan = $("#Error_CurrentMeter");
                        if (currentMeterSpan.text().trim() === "") {
                            console.log("Span is empty");
                        } else {
                            currentMeter = false;
                        }

                        // Check if the div contains at least one img element
                        if (imgCheckUpArray.length > 0) {
                            console.log("The div contains at least one img element");
                        } else {
                            imgs = false;
                        }
                        if (imgs && currentMeter && allChecked) {
                            $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");
                            next_fs.style.display = "flex";
                            current_fs.style.display = "none";
                            clearPaymentData();
                            CalculateContractSettelement();
                            UpdateTotalValuesExpensesAndCompensation();
                            setTimeout(HideZeroValuesFromDetailsContract, 100); // 🔹 التأكد من تنفيذ التحديث قبل الإخفاء
                            $("#AmountPayed").focus();
                        }
                        else {
                            $("#examinationError").text('@localizer["checkUpMessageRequired"]')
                        }
                    }

                }
            });
        });

        const previousButtons = document.querySelectorAll(".previous");

        Array.from(previousButtons).forEach((prevBtn) => {
            prevBtn.addEventListener("click", (event) => {
                const ExpensesCheckbox = document.getElementById('expenses-check');
                // const CompensationCheckbox = document.getElementById('compensation-check');
                const CompensationSelected = GetCompensationSelect();

                const current_fs = prevBtn.closest("fieldset");
                let previous_fs = current_fs.previousElementSibling;
                if (current_fs.id === 'FourthFieldset') {

                    if (ExpensesCheckbox.checked && CompensationSelected) {
                        previous_fs = current_fs.previousElementSibling;
                    } else if (!ExpensesCheckbox.checked && !CompensationSelected) {
                        previous_fs = current_fs.previousElementSibling.previousElementSibling.previousElementSibling;
                        $("#progressbar li").eq($("fieldset").index(current_fs.previousElementSibling)).removeClass("active");
                        $("#progressbar li").eq($("fieldset").index(current_fs.previousElementSibling.previousElementSibling)).removeClass("active");
                    } else if (ExpensesCheckbox.checked && !CompensationSelected) {
                        previous_fs = current_fs.previousElementSibling.previousElementSibling;
                        $("#progressbar li").eq($("fieldset").index(current_fs.previousElementSibling)).removeClass("active");
                    }
                }

                if (current_fs.id === 'ThirdFieldset') {

                    if (!ExpensesCheckbox.checked && CompensationSelected) {
                        previous_fs = current_fs.previousElementSibling.previousElementSibling;
                        $("#progressbar li").eq($("fieldset").index(current_fs.previousElementSibling)).removeClass("active");

                    }
                }
                Array.from(previous_fs.elements).forEach((field) => {
                    //field.addEventListener('input', () => {
                    //    hideErrorMessage(field);
                    //});
                });
                $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");

                previous_fs.style.display = "flex";
                current_fs.style.display = "none";
            });
        });

        function CalculateKmFree() {
            var AdditionalKmFreeDaily = '@Model.ContractSettlement.CrCasRenterContractBasicTotalDailyFreeKm';
            var expectedDays = "@Model.ContractSettlement.CrCasRenterContractBasicExpectedRentalDays";
            var TotalAdditionalKM = parseInt(expectedDays) * parseInt(AdditionalKmFreeDaily);
            $("#FreeKM").text(TotalAdditionalKM.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 }));
        }
        function GetCompensationSelect() {
            const CompensationSelect = document.getElementById('Settlement-type');
            const allowedValues = ["35", "32", "10", "12"]; // القيم المسموح بها
            return CompensationSelect && allowedValues.includes(CompensationSelect.value);
        }
        function UpdateTotalValuesExpensesAndCompensation() {
            var expensesInput = $("#TotalExpenses").text().trim();
            var compensationInput = $("#TotalCompensation").text().trim();
            var expensesValue = parseFloat(expensesInput.replace(/,/g, '')) || 0;
            var compensationValue = parseFloat(compensationInput.replace(/,/g, '')) || 0;
            $("input[name='ContractSettlement.ExpensesValue']").val(expensesValue);
            $("input[name='ContractSettlement.CompensationValue']").val(compensationValue);
        }
        function HideZeroValuesFromDetailsContract() {
            $("#dropdown-content-Settlement4 .dropdown-content-row").each(function () {
                var valueElement = $(this).find(".personal-data p");
                var valueText = valueElement.text().trim();
                var numericValue = parseFloat(valueText.replace(/,/g, '')) || 0;

                if (numericValue === 0) {
                    $(this).hide(); // إخفاء الصف إذا كانت القيمة 0 أو فارغة
                } else {
                    $(this).show(); // التأكد من ظهور الصف إذا كانت القيمة غير 0
                }
            });
        }
    </script>
    <script>
        var rentValueTotal = 0;
        var FeesTammValue = 0;
        var advantagesValueTotal = 0;
        var AdditionalDriverValue = 0;
        var PrivateDriverValueTotal = 0;
        var ChoicesValueTotal = 0;
        var AdditionalValue = 0;
        var AdditionalHoursValueTotal = 0;
        var AdditionalKMValueTotal = 0;
        var ContractValue = 0;
        var ContractValueAfterDiscount = 0;
        var taxValue = 0;
        var fuelValue = 0;
        var TotalContract = 0;
        var ExpensesValue = 0;
        var compensationValue = 0;
        var AmountRequired = 0;
        var somethingIsNotOkay = true;
        function CalculateContractSettelement() {

            //Rental Price
            var expectedDays =parseInt("@Model.ContractSettlement.CrCasRenterContractBasicExpectedRentalDays");
            var rentalPricePerDay = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicDailyRent));
            var rentValue = expectedDays * parseFloat(rentalPricePerDay);
            // غرامة التاخير
            console.log("settlementDay:",settlementDay)
            console.log("lateDaysToSettlement:",diffDays - parseInt(expectedDays))
            var lateDaysToSettlement = diffDays - parseInt(expectedDays);
            var settelementRentValue = settlementDay * lateDaysToSettlement * parseFloat(rentalPricePerDay)
            console.log("settelementRentValue:",settelementRentValue)
            rentValueTotal = rentValue + settelementRentValue;
            document.getElementById('LateDays').textContent=lateDaysToSettlement.toString().padStart(2, '0');
            document.getElementById('RentalValue').textContent = rentValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            document.getElementById('LateSettlement').textContent = settelementRentValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            // FeesTamm
            var FeesTamm = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicAuthorizationValue));
            FeesTammValue = parseFloat(FeesTamm);
            document.getElementById('DelegationValue').textContent = FeesTammValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            // Advantages
            var AdvantagesValue = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.AdvantagesValue));
            advantagesValueTotal = totalDaysNo * parseFloat(AdvantagesValue);
            document.getElementById('Features').textContent = advantagesValueTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#ContractSettlement_AdvantagesValueTotal").val(advantagesValueTotal.toFixed(2));

            //AdditionalDriver
            var AdditionalDriver = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicAdditionalDriverValue));
            AdditionalDriverValue = parseFloat(AdditionalDriver);
            document.getElementById('AdditionalDriver').textContent = AdditionalDriverValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            //PrivateDriver
            var PrivateDriverValue = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicPrivateDriverValue));
            PrivateDriverValueTotal = totalDaysNo * parseFloat(PrivateDriverValue);
            document.getElementById('PrivateDriver').textContent = PrivateDriverValueTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#ContractSettlement_PrivateDriverValueTotal").val(PrivateDriverValueTotal.toFixed(2));

            // Additionals
            var Additionals = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicAdditionalValue));
            AdditionalValue = parseFloat(Additionals);
            document.getElementById('Additionals').textContent = AdditionalValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            //Choices
            var ChoicesValue = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.ChoicesValue));
            ChoicesValueTotal = totalDaysNo * parseFloat(ChoicesValue);
            document.getElementById('Choices').textContent = ChoicesValueTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#ContractSettlement_ChoicesValueTotal").val(ChoicesValueTotal.toFixed(2));

            // Additional Hours Value Total
            if(caseSettelement==3){
                GetAdditionalHoursValue();
            }
            else {
                $("#ContractSettlement_MaxHours").val(0);
                $("#ContractSettlement_ExtraHoursValue").val(0);
            }
            
            GetDifferentFuelValue();
            // Additional KMs Value Total
            if (AdditionalKm != null && AdditionalKm.toString() != "" && AdditionalKm != undefined) {
                GetAdditionalKmValue();
                $("#ExcessKilos").text(AdditionalKm.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 }));
                $("#ContractSettlement_AdditionalKm").val(AdditionalKm);
            }
            //Get ContractValue

            ContractValue = rentValueTotal + FeesTammValue + advantagesValueTotal + AdditionalDriverValue + fuelValue +
                            PrivateDriverValueTotal + AdditionalValue + ChoicesValueTotal + AdditionalHoursValueTotal + AdditionalKMValueTotal;
            document.getElementById('ContractValue').textContent = ContractValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#ContractSettlement_ContractValue").val(ContractValue.toFixed(2));

            // get ContractValueAfterDiscount
            var discountRate = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicUserDiscountRate));
            var discountValue = ContractValue * (parseFloat(discountRate) / 100);
            $("#ContractSettlement_DiscountValue").val(discountValue.toFixed(2));

            ContractValueAfterDiscount = ContractValue - discountValue;
            $("#ContractSettlement_ContractValueAfterDiscount").val(ContractValueAfterDiscount.toFixed(2));
            document.getElementById('ContractValueAfterDiscount').textContent = ContractValueAfterDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            // get Tax Value
            var taxRate = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicTaxRate));
            taxValue = ContractValueAfterDiscount * (parseFloat(taxRate) / 100);
            $("#ContractSettlement_TaxValue").val(taxValue.toFixed(2));

            document.getElementById('TaxValue').textContent = taxValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            // get TotalContract
            TotalContract = ContractValueAfterDiscount + taxValue;
            $("#ContractSettlement_TotalContract").val(TotalContract.toFixed(2));
            document.getElementById('TotalContract').textContent = TotalContract.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            // expenses Value
            var expensesInput = $("#TotalExpenses").text().trim();
            var expensesValue = parseFloat(expensesInput.replace(/,/g, '')) || 0;
            document.getElementById('TotalExpenseValue').textContent = expensesValue.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});

            // compensation Value
            var compensationInput = $("#TotalCompensation").text().trim();
            var compensationValue = parseFloat(compensationInput.replace(/,/g, '')) || 0;
            document.getElementById('TotalCompensationValue').textContent = compensationValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2});


            // AmountRequired
            var previousBalance = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasic5.CrCasRenterLessorAvailableBalance));
            var previousTotalContract = @Html.Raw(Json.Serialize(Model?.ContractSettlement.CrCasRenterContractBasicExpectedTotal));
            AmountRequired = TotalContract - parseFloat(previousTotalContract) - parseFloat(previousBalance) + compensationValue - ExpensesValue;
            if (AmountRequired < 0) {
                document.getElementById('RenterMoneyText').textContent = '@localizer["RenterMoneyText2"]'
                document.getElementById('AmountPayed').disabled = false;
            }
            else if (AmountRequired > 0) {
                document.getElementById('RenterMoneyText').textContent = '@localizer["RenterMoneyText1"]'
                document.getElementById('AmountPayed').disabled = false;
            }
            else {
                document.getElementById('AmountPayed').disabled = true;
            }

            const formattedAmount = Math.abs(AmountRequired).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            // تحويل القيمة إلى رقم عند الإرسال
            $("#ContractSettlement_AmountRequired").val(AmountRequired);
            document.getElementById('AmountRequired').textContent = formattedAmount;
            console.log("AmountRequired Check Minis", AmountRequired)

        }
        function GetAdditionalHoursValue() {
            // استرجاع القيم المطلوبة
            const TotalFreeHours = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicTotalFreeHours));
            var AdditionalHourValue = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicHourValue));
            var AdditionalHour = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicHourMax));

            if (AdditionalHour > 0) {
                AdditionalHoursValueTotal = 0; 
                if (roundedLateAddHours == AdditionalHour) {
                    AdditionalHoursValueTotal = parseInt(AdditionalHour) * parseFloat(AdditionalHourValue);
                } else {
                    if (roundedLateAddHours >= 0) {
                        AdditionalHoursValueTotal = roundedLateAddHours * parseFloat(AdditionalHourValue);
                    }
                }
            }
            console.log("AdditionalHour", AdditionalHour)
            console.log("AdditionalHoursValueTotal", AdditionalHoursValueTotal)
            AdditionalHoursValueTotal= AdditionalHoursValueTotal*settlementDay;
            // تحديث القيم المعروضة
            document.getElementById('LateSettlement').textContent = AdditionalHoursValueTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            $("#ContractSettlement_MaxHours").val(AdditionalHour);
            $("#ContractSettlement_ExtraHoursValue").val(AdditionalHoursValueTotal.toFixed(2));
        }
        function GetAdditionalKmValue() {
            const UnlimitedKm = @Json.Serialize(Model?.ContractSettlement?.UnlimitedKm); // جلب القيمة الحقيقية من الخادم
            console.log("Unlimited:", UnlimitedKm);
            if (!UnlimitedKm) {
                const KMValue = @Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicKmValue));
                AdditionalKMValueTotal = parseInt(AdditionalKm) * parseFloat(KMValue);
                document.getElementById('ExtraKMsValue').textContent = AdditionalKMValueTotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            }
        }
        function GetDifferentFuelValue() {
            const oldStatusCodeFuel = parseInt(@Html.Raw(Json.Serialize(Model?.ContractSettlement?.CarCheckUpFuel?.CrCasRenterContractCarCheckupCheck)));
            const fuelValueContract = parseFloat(@Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicFuelValue)));
            const newStatusCodeFuel = parseInt(document.querySelector('select[name="CheckupDetails[20].ReasonCheckCode"]').value.trim());
            console.log("oldStatusCodeFuel", oldStatusCodeFuel)
            const fuelLevels = { 1: 1.0, 2: 0.75,  3: 0.5,  4: 0.25, 5: 0.0};
            const oldFuelPercentage = fuelLevels[oldStatusCodeFuel] || 0;
            const newFuelPercentage = fuelLevels[newStatusCodeFuel] || 0;
            fuelValue = (oldFuelPercentage-newFuelPercentage) * fuelValueContract;
            document.getElementById('FuelValue').textContent = fuelValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        }

    </script>
    <script>
        function CheckIfCanPayLessThanTotalAmount() {
            var userCashBranchAmount = @Html.Raw(Json.Serialize(userInfo?.CrMasUserBranchValidities?.FirstOrDefault(x => x.CrMasUserBranchValidityBranch == Model?.SelectedBranch).CrMasUserBranchValidityBranchCashAvailable));
            var AmountPayed = document.getElementById("AmountPayed").value;
            console.log("userCashBranchAmount", userCashBranchAmount)
            console.log("AmountRequired", AmountRequired)
            console.log("AmountPayed", AmountPayed)
            if (AmountRequired < 0) {
                if (parseFloat(userCashBranchAmount) < parseFloat(AmountPayed)) {
                    toastr.options = { "positionClass": '@localizer["toastPostion"]', };
                    toastr.error('@localizer["UserDontHaveCashToPay"]');
                    $("#AmountPayed").css({ "border": "2px solid red" });    //This For last Check When i submit Form
                    somethingIsNotOkay = false;
                }
                else {
                    $("#AmountPayed").css({ "border": "2px solid #faa64d" }); //This For last Check When i submit Form
                    somethingIsNotOkay = true;
                }
            }
            else {
                $("#AmountPayed").css({ "border": "2px solid #faa64d" }); //This For last Check When i submit Form
                somethingIsNotOkay = true;
            }
        }
        $(document).ready(function () {
            $("#AmountPayed").focusout(function () {
                somethingIsNotOkay = true;
                var payed = document.getElementById('AmountPayed').value;
                var BranchCode = @Html.Raw(Json.Serialize(Model?.SelectedBranch));
                if (AmountRequired < 0) {
                    CheckIfCanPayLessThanTotalAmount();
                }
                if (AmountRequired > 0 && parseFloat(payed) > 0 && somethingIsNotOkay) {
                    document.getElementById('ContractSettlement_PaymentMethod').disabled = false;
                    // document.getElementById('ContractSettlement_PaymentMethod').selectedIndex = 0;
                    document.getElementById('ContractSettlement_SalesPoint').disabled = false;
                    document.getElementById('ContractSettlement_SalesPoint').selectedIndex = 0;
                }
                else if (AmountRequired < 0 && parseFloat(payed) > 0 && somethingIsNotOkay) {
                    CheckIfCanPayLessThanTotalAmount();
                    getSalesPoint("10", BranchCode);
                    document.getElementById('ContractSettlement_PaymentMethod').value = "10";
                    document.getElementById('ContractSettlement_PaymentMethod').disabled = true;

                }
                else {
                    document.getElementById('ContractSettlement_PaymentMethod').disabled = true;
                    document.getElementById('ContractSettlement_PaymentMethod').selectedIndex = 0;
                    document.getElementById('ContractSettlement_SalesPoint').disabled = true;
                    document.getElementById('ContractSettlement_SalesPoint').selectedIndex = 0;
                    $("#ContractSettlement_SalesPoint").empty();
                }
            })
        });
        $(document).ready(function () {
            $("#ContractSettlement_PaymentMethod").change(function () {
                var PaymentMethod = $("#ContractSettlement_PaymentMethod").val();
                var BranchCode = $("#SelectedBranch").val();
                getSalesPoint(PaymentMethod, BranchCode);
            })
        });
        function getSalesPoint(PaymentMethod, BranchCode) {
            $.get("/BS/ContractSettlement/GetSalesPoint", { PaymentMethod: PaymentMethod, BranchCode: BranchCode }, function (data) {
                $("#ContractSettlement_SalesPoint").empty();
                if (data.type == "1" && data.salesPoints != null) {
                    $.each(data.salesPoints, function (index, row) {
                        if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {
                            $("#ContractSettlement_SalesPoint").append("<option  value= '" + row.crCasAccountSalesPointCode + "'>" + row.crCasAccountSalesPointEnName + "</option>")
                        }
                        else {
                            $("#ContractSettlement_SalesPoint").append("<option class='text-right' value= '" + row.crCasAccountSalesPointCode + "'>" + row.crCasAccountSalesPointArName + "</option>")
                        }
                    });
                }
                else if (data.type == "2" && data.accountBank != null) {
                    $.each(data.accountBank, function (index, row) {
                        if ("@requestCulture?.RequestCulture.UICulture.Name" == "en-US") {

                            $("#ContractSettlement_SalesPoint").append("<option value= '" + row.crCasAccountBankCode + "'>" + row.crCasAccountBankEnName + "</option>")
                        }
                        else {
                            $("#ContractSettlement_SalesPoint").append("<option class='text-right' value= '" + row.crCasAccountBankCode + "'>" + row.crCasAccountBankArName + "</option>")
                        }
                    });
                }

            });
        }
    </script>
    
    <!--Create Card Contract PDf-->
    <script>
        const CreateCardContract = async () => {
             try {
               const contractNo ='@Html.Raw(Model?.ContractSettlement?.CrCasRenterContractBasicNo)';
               const canvas = document.getElementById("myCanvasCard");
               var dates = getDates();
               const contractStatus = getSelectedContractStatus();
               const dynamicData = {
                  CARD_TITLE_AR: contractStatus.AR,
                  CARD_TITLE_EN: contractStatus.EN,
                  RENTAR_NAME_AR: '@Html.Raw(Model?.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationArName)',
                  RENTAR_NAME_EN: '@Html.Raw(Model?.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationEnName)',
                  CAR_NAME_AR: '@Html.Raw(Model?.ContractSettlement?.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationConcatenateArName)',
                  CAR_NAME_EN: '@Html.Raw(Model?.ContractSettlement?.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationConcatenateEnName)',
                  CONTRACT_DATE_AR: dates.start.startHijri,
                  CONTRACT_DATE_EN: dates.start.startMiladi,
                  CONTRACT_END_DATE_AR: dates.end.endHijri,
                  CONTRACT_END_DATE_EN: dates.end.endMiladi,
                  ADDRESS: '@Html.Raw(Model?.CrCasBranchInformation?.CrCasBranchPost?.CrCasBranchPostCityNavigation?.CrMasSupPostCityConcatenateArName)' + ' - ' + '@Html.Raw(Model?.CrCasBranchInformation?.CrCasBranchInformationArShortName)',
                  CONTRACT_NUMBER: contractNo,
                   images: {
                       background: "@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageContractCard)",
                       QR: "@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageQrCodeSite)",
                   },
               };

               const loadedImages = await loadDynamicImages(dynamicData.images);
               const dataWithImages = { ...dynamicData, images: loadedImages };
               console.log("dataWithImages", dataWithImages);

               await drawCard(canvas, dataWithImages);
               // حفظ الصورة كـ Base64
               const base64Image = canvas.toDataURL("image/png");

               // تخزين Base64 في input
               const inputPdf = document.getElementById("StaticContractCardImg");
               inputPdf.value = base64Image;
               console.log("Base64 Image:", base64Image);
              }
              catch (error) {
                  console.error("خطأ في إنشاء الفاتورة:", error);
              }
          }
        function getDates() {
                // تحديد خيارات التنسيق
                var options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' };

                // تنسيق التاريخ الميلادي باستخدام البيانات من الـ Model
                var formattedStartDate = "@Model.ContractSettlement?.CrCasRenterContractBasicExpectedStartDate?.ToString("yyyy/MM/dd HH:mm", CultureInfo.InvariantCulture)";
                var startDate = new Date(formattedStartDate);  // تحويل النص إلى كائن Date

                // التحقق إذا كانت القيمة صالحة
                if (isNaN(startDate)) {
                    console.error('تاريخ البدء غير صالح');
                    startDate = new Date();  // تعيين تاريخ افتراضي في حال حدوث خطأ
                }

                // تحويل التاريخ الهجري باستخدام دالة formatHijriDate
                const startHijriDate = formatHijriDate(startDate, "ar");

                // الحصول على عدد أيام العقد

                // التحقق من صحة عدد الأيام
                if (isNaN(totalDaysNo)) {
                    console.error('عدد الأيام غير صالح');
                    totalDaysNo = 0;
                }

                // حساب تاريخ نهاية العقد بناءً على الوقت الحالي مع إضافة عدد الأيام إلى تاريخ البدء
                var endDate = new Date();  // الحصول على التاريخ والوقت الحالي
                endDate.setDate(startDate.getDate() + totalDaysNo);  // إضافة عدد الأيام إلى تاريخ البدء
                endDate.setHours(new Date().getHours(), new Date().getMinutes()); 

                // تنسيق التاريخ الميلادي لآخر تاريخ
                var formattedEndDate = endDate.toLocaleDateString('ja-JP', options);

                // تحويل التاريخ الهجري باستخدام دالة formatHijriDate
                const endHijriDate = formatHijriDate(endDate, "ar");

                // إرجاع التواريخ بالميلادي والهجري
                return {
                    start: {
                        startMiladi: formattedStartDate,
                        startHijri: startHijriDate,
                    },
                    end: {
                        endMiladi: formattedEndDate,
                        endHijri: endHijriDate,
                    },
                };
            }
        function getSelectedContractStatus() {
            const settlementSelect = document.getElementById("Settlement-type");
            const selectedOption = settlementSelect.options[settlementSelect.selectedIndex]; // جلب العنصر المحدد
            const dataType = selectedOption.getAttribute("data-type"); // استخراج data-type

            const statuses = {
                "1": { AR: "تم إغلاق العقد", EN: "Contract Closed" },
                "2": { AR: "تم تعليق العقد", EN: "Contract Suspended" }
            };

            return statuses[dataType] || { AR: "حالة غير معروفة", EN: "Unknown Status" };
        }
    </script>
    <!--Create invoice -->
    <script>
        async function CreateInvoicePdf() {
            const accountInvoiceNo = "@Model?.ContractSettlement?.CrCasRenterContractBasicNo";
            const canvas = document.getElementById("myCanvasInvoice");
            const dates = getFormattedDatesMiliadiAndHijri();
            var rentDailyValue= GetRentDailyValue();
            var delegationValue= GetDelegationValue();
            var addDriverValue = GetAddDriverValue();
            var privateDriverValue = GetPrivateDriverValue();
            var choicesValue = GetChoicesValue();
            var additionalsValue = GetAdditionalsValue();
            var AdditionalHourValue =parseFloat('@Html.Raw(Model?.ContractSettlement?.CrCasRenterContractBasicHourValue)')||0;
            var discountInput = parseFloat('@Html.Raw(Model?.ContractSettlement?.CrCasRenterContractBasicUserDiscountRate)') || 0;
            var daysNo = totalDaysNo;
            var taxPercent = parseFloat('@Html.Raw(Model?.ContractSettlement?.CrCasRenterContractBasicTaxRate)') || 0;
            var advantagesValue = parseFloat('@Model?.ContractSettlement?.AdvantagesValue') || 0;
            const KMValue =parseFloat(@Html.Raw(Json.Serialize(Model?.ContractSettlement?.CrCasRenterContractBasicKmValue)));
            const expectedDays = "@Model?.ContractSettlement?.CrCasRenterContractBasicExpectedRentalDays";
            var lateDaysToSettlement = diffDays - parseInt(expectedDays);
            const itemsData = [
                {
                    arabic: "الإيجار",
                    english: "Rent",
                    value: rentDailyValue,
                    number: parseInt(expectedDays),
                    discount: discountInput,
                    vat: taxPercent,
                },
                {
                    arabic: "التفويض",
                    english: "Delegation",
                    value: delegationValue,
                    number: 1,
                    discount: discountInput,
                    vat: taxPercent,
                },
                {
                    arabic: "السائق الاضافي",
                    english: "Add Driver",
                    value: addDriverValue,
                    number: 1,
                    discount: discountInput,
                    vat: taxPercent,
                },
                {
                    arabic: "السائق الخاص",
                    english: "Private Driver",
                    value: privateDriverValue,
                    number: 1,
                    discount: discountInput,
                    vat: taxPercent,
                },
                {
                    arabic: "الخيارات",
                    english: "Choices",
                    value: choicesValue,
                    number: daysNo,
                    discount: discountInput,
                    vat: taxPercent,
                },
                {
                    arabic: "الاضافات",
                    english: "Additionals",
                    value: additionalsValue,
                    number: 1,
                    discount: discountInput,
                    vat: taxPercent,
                },
                {
                    arabic: "الكيلوات الزائدة",
                    english: "Extra Kilos",
                    value: KMValue,
                    number: parseInt(AdditionalKm),
                    discount: discountInput,
                    vat: taxPercent,
                },
                {
                    arabic: "الوقود",
                    english: "Fuel",
                    value: fuelValue,
                    number: 1,
                    discount: discountInput,
                    vat: taxPercent,
                },
                {
                    arabic: "غرامة التأخير",
                    english: "late fee",
                    value: caseSettelement === 4 ? rentDailyValue : (caseSettelement === 3 ? AdditionalHourValue : 0),
                    number: caseSettelement === 4 ? lateDaysToSettlement*settlementDay : (caseSettelement === 3 ? roundedLateAddHours*settlementDay : 0),
                    discount: discountInput,
                    vat: taxPercent,
                }
            ];

            const processedData = generateInvoiceItems(itemsData);

            const dynamicData = {
                CONTRACT_NUMBER: accountInvoiceNo,
                DATE_AR:dates.hijriDate.ar,
                DATE_EN: dates.miladiDate.en,
                DATE_EN_LONG: dates.hijriDate.en,
                CONTRACT_CREATE_AR: "تسوية عقد",
                CONTRACT_CREATE_EN: "Settelement Contract",
                TENANT_NAME_AR: '@Html.Raw(Model?.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationArName)',
                TENANT_NAME_EN: '@Html.Raw(Model?.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationEnName)',
                CAR_DESCRIPTION_AR: '@Html.Raw(Model?.ContractSettlement?.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationConcatenateArName)',
                CAR_DESCRIPTION_EN: '@Html.Raw(Model?.ContractSettlement?.CrCasRenterContractBasicCarSerailNoNavigation?.CrCasCarInformationConcatenateEnName)',
                EMPLOYEE_AR: decodeHTMLEntities("@user.CrMasUserInformationArName"),
                EMPLOYEE_EN:decodeHTMLEntities("@user.CrMasUserInformationEnName"),
                images: {
                    background: "@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageTaxInvoice)",
                    signature: "@Url.Content(user?.CrMasUserInformationSignature)",
                    qr: "@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageQrCodeSite)",
                    stamp: "@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageStamp)",
                },
                Serviceitems: processedData.Serviceitems,
                Valueitems: processedData.Valueitems,
                Numberitems: processedData.Numberitems,
                Amountitems: processedData.Amountitems,
                Discountitems: processedData.Discountitems,
                AfterDiscountitems: processedData.AfterDiscountitems,
                VATitems: processedData.VATitems,
                Totalitems: processedData.Totalitems,
            };

            const loadedImages = await loadDynamicImages(dynamicData.images);
            const dataWithImages = { ...dynamicData, images: loadedImages };
            console.log("dataWithImages", dataWithImages);
            await drawInvoice(canvas, dataWithImages);
            await createPdf(accountInvoiceNo, canvas, "SavePdfInvoice", "ContractSettlement_InitialInvoiceNo");
        }
        function generateInvoiceItems(itemsData) {
            const processedItems = itemsData
                .filter(item => item.value !== 0 && item.number !== 0) // تصفية القيم الصفرية
                .map(item => {
                    var totalBeforeDiscount = item.value * item.number; // إجمالي السعر قبل الخصم
                    var discountAmount = (item.discount / 100) * totalBeforeDiscount; // قيمة الخصم
                    var afterDiscount = totalBeforeDiscount - discountAmount; // القيمة بعد الخصم
                    var vatAmount = (item.vat / 100) * afterDiscount; // الضريبة
                    var totalAfterVAT = afterDiscount + vatAmount; // الإجمالي بعد الضريبة
                    if (discountAmount === 0) discountAmount = 0;
                    if (vatAmount === 0) vatAmount = 0;

                    return {
                        arabic: item.arabic,
                        english: item.english,
                        value: item.value, // تخزين القيمة الأصلية كرقم
                        number: item.number, // العدد
                        amount: totalBeforeDiscount, // إجمالي السعر قبل الخصم
                        discount: discountAmount, // قيمة الخصم
                        afterDiscount: afterDiscount, // القيمة بعد الخصم
                        vat: vatAmount, // الضريبة
                        total: totalAfterVAT, // الإجمالي بعد الضريبة
                    };
                });

            // حساب المجموع لكل عمود
            var sumColumn = (key) =>
                processedItems.reduce((sum, item) => sum + item[key], 0).toFixed(2);

            return {
                Serviceitems: [
                    ...processedItems.map(item => ({
                        arabic: item.arabic,
                        english: item.english,
                        textAlign: "center",
                    }))
                ],
                Valueitems: [
                    ...processedItems.map(item => ({ content: item.value.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) })),
                    { sum: sumColumn("value").toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) }
                ],
                Numberitems: [
                    ...processedItems.map(item => ({ content: item.number })),
                    { sum: "-" }
                ],
                Amountitems: [
                    ...processedItems.map(item => ({ content: item.amount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) })),
                    { sum: sumColumn("amount").toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) }
                ],
                Discountitems: [
                    ...processedItems.map(item => ({ content: item.discount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) })),
                    { sum: sumColumn("discount").toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) }
                ],
                AfterDiscountitems: [
                    ...processedItems.map(item => ({ content: item.afterDiscount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) })),
                    { sum: sumColumn("afterDiscount").toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) }
                ],
                VATitems: [
                    ...processedItems.map(item => ({ content: item.vat.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) })),
                    { sum: sumColumn("vat").toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) }
                ],
                Totalitems: [
                    ...processedItems.map(item => ({ content: item.total.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) })),
                    { sum: sumColumn("total").toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) }
                ],
            };
        }
        function GetDelegationValue(){
            var FeesTamm = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicAuthorizationValue)';
            var FeesTammValue = 0;
            if (parseFloat(FeesTamm) != null) {
                FeesTammValue = parseFloat(FeesTamm);
            }
            else {
                FeesTammValue = 0;
            }
            return FeesTammValue;
        }
        function GetRentDailyValue(){
            return parseFloat('@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicDailyRent)');
        }
        function GetAddDriverValue(){
            var additionalDriver = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicAdditionalDriverId)';
            var additionalDriverValue = 0;
            if (additionalDriver != null || additionalDriver != "") {
                var AddDriverValue = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicAdditionalDriverValue)';
                if (parseInt(AddDriverValue) != null) {
                    additionalDriverValue = parseFloat(AddDriverValue);
                }
                else {
                    additionalDriverValue = 0;
                }
            }
            return additionalDriverValue;
        }
        function GetPrivateDriverValue(){
            var privateDriverValue = 0;
            var privateDriver = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicPrivateDriverValue)';
            if (parseFloat(privateDriver) != null) {
                privateDriverValue = parseFloat(privateDriver);
            }
            else {
                privateDriverValue = 0;
            }
            return privateDriverValue;
        }
        function GetChoicesValue(){
             var TotalChoices = parseFloat('@Html.Raw(Model.ContractSettlement?.ChoicesValue)');
             var choicesValue = 0;
             if (TotalChoices != null && TotalChoices != 0 && TotalChoices != "" && TotalChoices != undefined) {
                 choicesValue = parseFloat(TotalChoices);
             }
             else {
                 choicesValue = 0;
             }
             return choicesValue;
        }
        function GetAdditionalsValue(){
            var TotalAdditionals = '@Html.Raw(Model.ContractSettlement?.CrCasRenterContractBasicAdditionalValue)';
            var additionalValue = 0;
            if (TotalAdditionals != null && TotalAdditionals != 0 && TotalAdditionals != "" && TotalAdditionals != undefined) {
                additionalValue = parseFloat(TotalAdditionals);
            }
            else {
                additionalValue = 0;
            }
            return additionalValue;
        }
    </script>
    <!--Create Receipt PDf-->
    <script>
        async function CreateReceiptPdf() {
                const AccountPaymentReceiptNo = "@ViewBag.AccountPaymentReceiptNo";
                const AccountCatchReceiptNo = "@ViewBag.AccountCatchReceiptNo";
                var background="";
                var accountReceiptNo = "";
                if (AmountRequired >= 0){
                    accountReceiptNo=AccountCatchReceiptNo;
                    background="@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageReceipt)";
                }
                else if (AmountRequired<0){
                    accountReceiptNo=AccountPaymentReceiptNo;
                    background="@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageExchange)";
                }
                const canvas = document.getElementById("myCanvasReceipt");
                const dates = getFormattedDatesMiliadiAndHijri();
                var namesOfPaymentMethod = getSelectedOptionDataPaymentMethod();
                var getAfterAndBeforeDecimalAmountPayed =await getFormattedAmount();
                console.log("getAfterAndBeforeDecimalAmountPayed",getAfterAndBeforeDecimalAmountPayed);
                const contractNo = "@Model?.ContractSettlement?.CrCasRenterContractBasicNo";
                const dynamicData = {
                    DATE_AR:dates.hijriDate.ar,
                    DATE_EN: dates.miladiDate.en,
                    HIJRI_DATE_AR: dates.hijriDate.en,
                    HIJRI_DATE_EN: dates.miladiDate.ar ,
                    CONTRACT_NUMBER: accountReceiptNo,
                    AMOUNT: getAfterAndBeforeDecimalAmountPayed.beforeDecimal,
                    HALALAS: getAfterAndBeforeDecimalAmountPayed.afterDecimal,
                    TENANT_NAME_AR: '@Html.Raw(Model?.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationArName)',
                    TENANT_NAME_EN: '@Html.Raw(Model?.ContractSettlement?.CrCasRenterContractBasic5?.CrCasRenterLessorNavigation?.CrMasRenterInformationEnName)',
                    AMOUNT_AR: getAfterAndBeforeDecimalAmountPayed.arabicText,
                    AMOUNT_EN: getAfterAndBeforeDecimalAmountPayed.englishText,
                    PAYMENT_METHOD_AR: namesOfPaymentMethod.ar,
                    PAYMENT_METHOD_EN: namesOfPaymentMethod.en,
                    PAYMENT_DESC_AR: `${contractNo}  دفعة تحت الحساب لعقد ايجار السيارة لعقد`,
                    PAYMENT_DESC_EN: `Payment to extend the car rental contract ${contractNo}`,
                    NOTES_AR: document.getElementById("ContractSettlement_ReasonsPayment").value,
                    APPROVER_NAME_AR: decodeHTMLEntities("@user.CrMasUserInformationArName"),
                    APPROVER_NAME_EN: decodeHTMLEntities("@user.CrMasUserInformationEnName"),
                    images: {
                        background: background,
                        signature: "@Url.Content(user?.CrMasUserInformationSignature)",
                        qr: "@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageQrCodeSite)",
                        stamp: "@Url.Content(userInfo?.CrMasUserInformationLessorNavigation?.CrMasLessorImage.CrMasLessorImageStamp)",
                    },
                };
                const loadedImages = await loadDynamicImages(dynamicData.images);
                const dataWithImages = { ...dynamicData, images: loadedImages };
                console.log("dataWithImages",dataWithImages);
                await drawReceipt(canvas, dataWithImages);
                await createPdf(accountReceiptNo, canvas, "SavePdfReceipt", "ContractSettlement_AccountReceiptNo");
        };
        function getSelectedOptionDataPaymentMethod() {
                var selectElement = document.getElementById("ContractSettlement_PaymentMethod");
                var selectedOption = selectElement.options[selectElement.selectedIndex];

                // Get the text of the selected option
                const selectedText = selectedOption.textContent || selectedOption.innerText;

                // Get the Arabic and English names from data attributes
                var selectedArabicName = selectedOption.dataset.ar;
                var selectedEnglishName = selectedOption.dataset.en;

                // Return the data as an object
                return {
                    ar: selectedArabicName,
                    en: selectedEnglishName,
                };
        }
        async function getFormattedAmount() {
                        // الحصول على قيمة الإدخال من العنصر
            var AmountPayedInput = document.getElementById("AmountPayed").value;

            // تحويل القيمة إلى رقم والتأكد من وجود خانتين عشريتين
            const rawAmountPayed = parseFloat(AmountPayedInput).toFixed(2);

            // تقسيم الرقم إلى جزأين: الجزء الصحيح والجزء العشري
            const [beforeDecimalll, afterDecimal] = rawAmountPayed.split(".");

            // تنسيق الجزء الصحيح ليشمل فاصلة الآلاف
                const beforeDecimal = parseInt(beforeDecimalll).toLocaleString('en-US');

                    // استدعاء البيانات لتغيير الرقم إلى نص
                        const numberToText = await dataChanged(rawAmountPayed);

                    // النص بالعربية والإنجليزية
                    const arabicText = numberToText.ar_concatenate;
                    const englishText = numberToText.en_concatenate;

                    // إرجاع النتيجة
                    return {
                        beforeDecimal,
                        afterDecimal,
                        arabicText,
                        englishText
                    };
            }
    </script>
    <script>
        // submit Form
        document.addEventListener('DOMContentLoaded', function () {
            var form = document.getElementById('SettlementForm');
            var submitButton = document.getElementById('submitForm');

            submitButton.addEventListener('click', async function (event) {
                event.preventDefault();
                var AmountPayed = document.getElementById("AmountPayed").value;
                if ($("#SettlementForm").valid()) {
                    // Submit the form
                    CheckIfCanPayLessThanTotalAmount();
                    if (somethingIsNotOkay) {
                        $("#ContainerLoader").show();
                            console.log("⏳ بدء إنشاء صورة البطاقة...");
                            await CreateCardContract();
                            console.log("✅ البطاقة تم إنشاؤها بنجاح.");
                            console.log("⏳ بدء إنشاء الفاتورة...");
                            await CreateInvoicePdf();
                            console.log("✅ الفاتورة تم إنشاؤها بنجاح.");
                            if (parseFloat(AmountPayed) > 0) {
                                console.log("⏳ بدء إنشاء الإيصال...");
                                await CreateReceiptPdf();
                                console.log("✅ الإيصال تم إنشاؤه بنجاح.");
                            }
                       


                            document.getElementById('ContractSettlement_PaymentMethod').disabled = false;
                            document.getElementById('ContractSettlement_SalesPoint').disabled = false;
                            form.submit();
                    }
                    else {
                        CheckIfCanPayLessThanTotalAmount();
                    }
                }
            });
        });
    </script>
    <script>
        async function dataChanged(number) {
            try {
                const response = await $.ajax({
                    url: "/BS/Contract/Get_ConvertedNumber_Action",
                    type: "GET",
                    data: { our_No: number },
                });
                return response;
            } catch (error) {
                console.error("Error occurred: ", error);
            }
        }
    </script>
    <script>
        function handleAmountPayed(input) {
            // Remove non-digit characters and additional decimal points
            input.value = input.value.replace(/[^0-9\.]/g, '');
            const decimalIndex = input.value.indexOf('.');
            // Limit to 9 digits before and after the decimal point
            if (decimalIndex !== -1) {
                const digitsBeforeDecimal = input.value.substring(0, decimalIndex);
                const digitsAfterDecimal = input.value.substring(decimalIndex + 1);

                // Limit to 2 digits after the decimal point
                input.value = digitsBeforeDecimal.substr(0, 7) + '.' + digitsAfterDecimal.substr(0, 2);

                // Remove additional decimal points
                if (input.value.indexOf('.', decimalIndex + 1) !== -1) {
                    const lastValidIndex = input.value.lastIndexOf('.');
                    input.value = input.value.substring(0, lastValidIndex) + input.value.substring(lastValidIndex + 1);
                }
            } else {
                // Limit to 7 digits before the decimal point
                input.value = input.value.substr(0, 7);
            }
        }
    </script>
    <script>
        // To decode some string
        function decodeHTMLEntities(text) {
            var textArea = document.createElement("textarea");
            textArea.innerHTML = text;
            return textArea.value;
        }
        // Function to format Hijri date
        function formatHijriDate(date, language) {
            const parsedDate = new Date(date);
            const options = { weekday: 'long', day: 'numeric', year: 'numeric', month: 'long', calendar: 'islamic-umalqura' };
            if (language === 'ar') {
                return parsedDate.toLocaleDateString('ar-SA', options).replace(/هـ/g, ''); // إزالة "هـ" من التاريخ العربي
            } else {
                return parsedDate.toLocaleDateString('en-US-u-ca-islamic-umalqura', options).replace(/AH/g, ''); // إزالة "AH" من التاريخ الإنجليزي
            }
        }
               // دالة تنسيق التاريخ الميلادي
        function formatMiladiDate(date) {
            return date.toLocaleDateString('en-GB'); // يعطي الصيغة DD/MM/YYYY
        }

        // دالة تنسيق الوقت
        function formatTime(date) {
            return date.toLocaleTimeString('en-GB'); // يعطي الصيغة HH:MM:SS
        }
        function splitTextInHalf(text) {
            // Check if text is null, empty, or less than or equal to 100 characters
            if (text == null || text === "") {
                return ["", ""];
            }

            if (text.length <= 100) {
                return [text, ""];
            }

            // Find the middle of the text
            const middleIndex = Math.floor(text.length / 2);

            // Find the closest space to the middle to avoid splitting words
            const beforeMiddle = text.lastIndexOf(' ', middleIndex);
            const afterMiddle = text.indexOf(' ', middleIndex + 1);

            // Determine the best split point
            const splitIndex = (middleIndex - beforeMiddle < afterMiddle - middleIndex)
                ? beforeMiddle
                : afterMiddle;

            // Split the text into two parts
            const firstHalf = text.slice(0, splitIndex).trim();
            const secondHalf = text.slice(splitIndex).trim();

            return [firstHalf, secondHalf];
        }
        function splitNumberbeforeAndafterDecimal(number) {
            let cleanedValueString = number.replace(/,/g, "");
            let parts = cleanedValueString.split('.');
            let beforeDecimal = parts[0];
            let afterDecimal = parts.length > 1 ? parts[1] : "00";
            afterDecimal = afterDecimal.padEnd(2, '0');
            // Add thousands separators to the before decimal part
            beforeDecimal = beforeDecimal.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            return [beforeDecimal, afterDecimal];
        }
    </script>
    <script>
        function showSpinner(button) {
            button.dataset.originalContent = button.innerHTML;
            const spinner = document.createElement('div');
            spinner.classList.add('spinner-border', 'spinner-border-sm', 'text-warning');
            spinner.setAttribute('role', 'status');
            const checkIcon = document.createElement('i');
            checkIcon.classList.add('fa-solid', 'fa-check');
            button.innerHTML = '';
            button.appendChild(spinner);
            button.classList.add('spinner-payment-check');
        }

        function removeSpinnerAndChangeColor(button) {
            button.innerHTML = button.dataset.originalContent;
            const checkDiv = document.querySelector('.row .col-auto .systems-check');
            if (checkDiv) {
                checkDiv.style.backgroundColor = 'green';
            }
            button.classList.remove('spinner-payment-check');
        }
        function getFormattedDatesMiliadiAndHijri() {
             // الحصول على التاريخ الميلادي الحالي من الخادم
             var dateTimeNow = decodeHTMLEntities('@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffK")');
             const miladiDate = new Date(dateTimeNow);

             // تنسيق التاريخ الميلادي
             const miladiOptions = { year: 'numeric', month: '2-digit', day: '2-digit' };
             const miladiDateString = miladiDate.toLocaleDateString('en-US', miladiOptions).split('/').join('/');

             // تنسيق التاريخ الهجري
             const hijriDateStringAr = formatHijriDate(miladiDate, 'ar');
             const hijriDateStringEn = formatHijriDate(miladiDate, 'en');

             return {
                 miladiDate: {
                     en: miladiDateString,
                     ar: miladiDateString // يمكن تنسيق التاريخ الميلادي بالعربية إذا أردت
                 },
                 hijriDate: {
                     ar: hijriDateStringAr,
                     en: hijriDateStringEn
                 }
             };
         }
        function getFormatDate(date) {
             const parsedDate = new Date(date);
             if (!isNaN(parsedDate) && parsedDate != null && parsedDate != "") {
                 var dateFormat = parsedDate.getFullYear() + '/' +
                     (parsedDate.getMonth() + 1).toString().padStart(2, '0') + '/' +
                     parsedDate.getDate().toString().padStart(2, '0') ;
                 return dateFormat;
             }
             return "";
         }

    </script>

}